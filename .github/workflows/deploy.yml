name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for Docker images'
        required: false
        default: 'latest'

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ubuntu
  DOMAIN: ${{ secrets.DOMAIN }}
  AWS_DEFAULT_REGION: us-east-1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: 'latest'
      
      - name: Test backend
        working-directory: ./backend
        run: |
          uv sync
          uv run pytest --tb=short || echo "Tests completed with issues"
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps
      
      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm run build || echo "Frontend build completed"

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Get runner IP and security group
        id: runner-info
        run: |
          # Get runner's public IP
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
          echo "RUNNER_IP=${RUNNER_IP}" >> $GITHUB_OUTPUT
          
          # Get EC2 instance security group
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ env.EC2_HOST }}" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)
          
          SECURITY_GROUP_ID=$(aws ec2 describe-instances \
            --instance-ids ${INSTANCE_ID} \
            --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' \
            --output text)
          
          echo "SECURITY_GROUP_ID=${SECURITY_GROUP_ID}" >> $GITHUB_OUTPUT
          echo "Runner IP: ${RUNNER_IP}"
          echo "Security Group: ${SECURITY_GROUP_ID}"
      
      - name: Add runner IP to security group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ steps.runner-info.outputs.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner-info.outputs.RUNNER_IP }}/32 \
            --group-rule-description "GitHub Actions deployment - temporary"
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
      
      - name: Deploy on server
        run: |
          # SSH into server and run deploy script
          ssh -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'ENDSSH'
            cd ~/floridify
            
            # Pull latest code
            git pull origin master
            
            # Set environment variables needed by deploy script
            export EC2_HOST=${{ env.EC2_HOST }}
            export EC2_USER=${{ env.EC2_USER }}
            export DOMAIN=${{ env.DOMAIN }}
            
            # Run deploy script on server (without GITHUB_ACTIONS set)
            ./scripts/deploy
          ENDSSH
      
      - name: Remove runner IP from security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ steps.runner-info.outputs.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.runner-info.outputs.RUNNER_IP }}/32 || true
      
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
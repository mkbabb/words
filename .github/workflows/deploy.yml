name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for Docker images'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/floridify-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/floridify-frontend
  DOMAIN: ${{ secrets.DOMAIN }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: 'latest'
      
      - name: Test backend
        working-directory: ./backend
        run: |
          uv sync
          uv run pytest --tb=short || echo "Tests completed with issues"
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps
      
      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm run build || echo "Frontend build completed"

  build-and-deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          target: production
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            ${{ env.BACKEND_IMAGE }}:${{ github.event.inputs.version || 'latest' }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          platforms: linux/amd64
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          target: production
          build-args: |
            VITE_API_URL=https://${{ env.DOMAIN }}/api
            VITE_APP_TITLE=Floridify
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            ${{ env.FRONTEND_IMAGE }}:${{ github.event.inputs.version || 'latest' }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          platforms: linux/amd64
      
      - name: Deploy to EC2 using simplified script
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
          GITHUB_ACTIONS: true
        run: |
          # Make deploy script executable
          chmod +x scripts/deploy
          
          # Run unified deployment script
          ./scripts/deploy
      
      # Verification is now handled by the deploy script
scripts/analyze_corpus_optimization.py:12:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
10 | from collections import Counter, defaultdict
11 | from pathlib import Path
12 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | # Import available NLP libraries
   |

scripts/analyze_corpus_optimization.py:12:1: UP035 `typing.List` is deprecated, use `list` instead
   |
10 | from collections import Counter, defaultdict
11 | from pathlib import Path
12 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | # Import available NLP libraries
   |

scripts/analyze_corpus_optimization.py:12:1: UP035 `typing.Set` is deprecated, use `set` instead
   |
10 | from collections import Counter, defaultdict
11 | from pathlib import Path
12 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | # Import available NLP libraries
   |

scripts/analyze_corpus_optimization.py:12:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
10 | from collections import Counter, defaultdict
11 | from pathlib import Path
12 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | # Import available NLP libraries
   |

scripts/analyze_corpus_optimization.py:22:19: Q000 [*] Single quotes found but double quotes preferred
   |
20 |     NLTK_AVAILABLE = True
21 |     # Download required NLTK data
22 |     nltk.download('wordnet', quiet=True)
   |                   ^^^^^^^^^ Q000
23 |     nltk.download('averaged_perceptron_tagger', quiet=True)
24 |     nltk.download('punkt', quiet=True)
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:23:19: Q000 [*] Single quotes found but double quotes preferred
   |
21 |     # Download required NLTK data
22 |     nltk.download('wordnet', quiet=True)
23 |     nltk.download('averaged_perceptron_tagger', quiet=True)
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
24 |     nltk.download('punkt', quiet=True)
25 | except ImportError:
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:24:19: Q000 [*] Single quotes found but double quotes preferred
   |
22 |     nltk.download('wordnet', quiet=True)
23 |     nltk.download('averaged_perceptron_tagger', quiet=True)
24 |     nltk.download('punkt', quiet=True)
   |                   ^^^^^^^ Q000
25 | except ImportError:
26 |     NLTK_AVAILABLE = False
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:27:5: T201 `print` found
   |
25 | except ImportError:
26 |     NLTK_AVAILABLE = False
27 |     print("Warning: NLTK not available. Install with: pip install nltk")
   |     ^^^^^ T201
28 |
29 | try:
   |
   = help: Remove `print`

scripts/analyze_corpus_optimization.py:34:5: T201 `print` found
   |
32 | except ImportError:
33 |     SPACY_AVAILABLE = False
34 |     print("Warning: spaCy not available. Install with: pip install spacy")
   |     ^^^^^ T201
   |
   = help: Remove `print`

scripts/analyze_corpus_optimization.py:40:9: ANN204 Missing return type annotation for special method `__init__`
   |
38 |     """Analyzes word corpus for optimization opportunities."""
39 |     
40 |     def __init__(self):
   |         ^^^^^^^^ ANN204
41 |         self.setup_nlp_tools()
   |
   = help: Add return type annotation: `None`

scripts/analyze_corpus_optimization.py:43:9: ANN201 Missing return type annotation for public function `setup_nlp_tools`
   |
41 |         self.setup_nlp_tools()
42 |         
43 |     def setup_nlp_tools(self):
   |         ^^^^^^^^^^^^^^^ ANN201
44 |         """Initialize NLP tools for analysis."""
45 |         self.tools = {}
   |
   = help: Add return type annotation: `None`

scripts/analyze_corpus_optimization.py:48:24: Q000 [*] Single quotes found but double quotes preferred
   |
47 |         if NLTK_AVAILABLE:
48 |             self.tools['porter_stemmer'] = PorterStemmer()
   |                        ^^^^^^^^^^^^^^^^ Q000
49 |             self.tools['snowball_stemmer'] = SnowballStemmer('english')
50 |             self.tools['wordnet_lemmatizer'] = WordNetLemmatizer()
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:49:24: Q000 [*] Single quotes found but double quotes preferred
   |
47 |         if NLTK_AVAILABLE:
48 |             self.tools['porter_stemmer'] = PorterStemmer()
49 |             self.tools['snowball_stemmer'] = SnowballStemmer('english')
   |                        ^^^^^^^^^^^^^^^^^^ Q000
50 |             self.tools['wordnet_lemmatizer'] = WordNetLemmatizer()
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:49:62: Q000 [*] Single quotes found but double quotes preferred
   |
47 |         if NLTK_AVAILABLE:
48 |             self.tools['porter_stemmer'] = PorterStemmer()
49 |             self.tools['snowball_stemmer'] = SnowballStemmer('english')
   |                                                              ^^^^^^^^^ Q000
50 |             self.tools['wordnet_lemmatizer'] = WordNetLemmatizer()
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:50:24: Q000 [*] Single quotes found but double quotes preferred
   |
48 |             self.tools['porter_stemmer'] = PorterStemmer()
49 |             self.tools['snowball_stemmer'] = SnowballStemmer('english')
50 |             self.tools['wordnet_lemmatizer'] = WordNetLemmatizer()
   |                        ^^^^^^^^^^^^^^^^^^^^ Q000
51 |             
52 |         if SPACY_AVAILABLE:
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:54:28: Q000 [*] Single quotes found but double quotes preferred
   |
52 |         if SPACY_AVAILABLE:
53 |             try:
54 |                 self.tools['spacy_nlp'] = spacy.load('en_core_web_sm')
   |                            ^^^^^^^^^^^ Q000
55 |             except:
56 |                 print("spaCy model not found. Install with: python -m spacy download en_core_web_sm")
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:54:54: Q000 [*] Single quotes found but double quotes preferred
   |
52 |         if SPACY_AVAILABLE:
53 |             try:
54 |                 self.tools['spacy_nlp'] = spacy.load('en_core_web_sm')
   |                                                      ^^^^^^^^^^^^^^^^ Q000
55 |             except:
56 |                 print("spaCy model not found. Install with: python -m spacy download en_core_web_sm")
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:56:17: T201 `print` found
   |
54 |                 self.tools['spacy_nlp'] = spacy.load('en_core_web_sm')
55 |             except:
56 |                 print("spaCy model not found. Install with: python -m spacy download en_core_web_sm")
   |                 ^^^^^ T201
57 |                 
58 |     def load_corpus(self, file_path: Path) -> List[str]:
   |
   = help: Remove `print`

scripts/analyze_corpus_optimization.py:58:47: UP006 [*] Use `list` instead of `List` for type annotation
   |
56 |                 print("spaCy model not found. Install with: python -m spacy download en_core_web_sm")
57 |                 
58 |     def load_corpus(self, file_path: Path) -> List[str]:
   |                                               ^^^^ UP006
59 |         """Load words from corpus file."""
60 |         with open(file_path, 'r', encoding='utf-8') as f:
   |
   = help: Replace with `list`

scripts/analyze_corpus_optimization.py:60:30: Q000 [*] Single quotes found but double quotes preferred
   |
58 |     def load_corpus(self, file_path: Path) -> List[str]:
59 |         """Load words from corpus file."""
60 |         with open(file_path, 'r', encoding='utf-8') as f:
   |                              ^^^ Q000
61 |             return [line.strip().lower() for line in f if line.strip()]
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:60:30: UP015 [*] Unnecessary mode argument
   |
58 |     def load_corpus(self, file_path: Path) -> List[str]:
59 |         """Load words from corpus file."""
60 |         with open(file_path, 'r', encoding='utf-8') as f:
   |                              ^^^ UP015
61 |             return [line.strip().lower() for line in f if line.strip()]
   |
   = help: Remove mode argument

scripts/analyze_corpus_optimization.py:60:44: Q000 [*] Single quotes found but double quotes preferred
   |
58 |     def load_corpus(self, file_path: Path) -> List[str]:
59 |         """Load words from corpus file."""
60 |         with open(file_path, 'r', encoding='utf-8') as f:
   |                                            ^^^^^^^ Q000
61 |             return [line.strip().lower() for line in f if line.strip()]
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:63:53: UP006 [*] Use `list` instead of `List` for type annotation
   |
61 |             return [line.strip().lower() for line in f if line.strip()]
62 |             
63 |     def analyze_morphological_patterns(self, words: List[str]) -> Dict[str, any]:
   |                                                     ^^^^ UP006
64 |         """Analyze morphological patterns in the corpus."""
65 |         analysis = {
   |
   = help: Replace with `list`

scripts/analyze_corpus_optimization.py:63:67: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
61 |             return [line.strip().lower() for line in f if line.strip()]
62 |             
63 |     def analyze_morphological_patterns(self, words: List[str]) -> Dict[str, any]:
   |                                                                   ^^^^ UP006
64 |         """Analyze morphological patterns in the corpus."""
65 |         analysis = {
   |
   = help: Replace with `dict`

scripts/analyze_corpus_optimization.py:66:13: Q000 [*] Single quotes found but double quotes preferred
   |
64 |         """Analyze morphological patterns in the corpus."""
65 |         analysis = {
66 |             'total_words': len(words),
   |             ^^^^^^^^^^^^^ Q000
67 |             'unique_words': len(set(words)),
68 |             'suffix_patterns': defaultdict(int),
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:67:13: Q000 [*] Single quotes found but double quotes preferred
   |
65 |         analysis = {
66 |             'total_words': len(words),
67 |             'unique_words': len(set(words)),
   |             ^^^^^^^^^^^^^^ Q000
68 |             'suffix_patterns': defaultdict(int),
69 |             'inflection_groups': defaultdict(list),
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:68:13: Q000 [*] Single quotes found but double quotes preferred
   |
66 |             'total_words': len(words),
67 |             'unique_words': len(set(words)),
68 |             'suffix_patterns': defaultdict(int),
   |             ^^^^^^^^^^^^^^^^^ Q000
69 |             'inflection_groups': defaultdict(list),
70 |             'length_distribution': Counter()
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:69:13: Q000 [*] Single quotes found but double quotes preferred
   |
67 |             'unique_words': len(set(words)),
68 |             'suffix_patterns': defaultdict(int),
69 |             'inflection_groups': defaultdict(list),
   |             ^^^^^^^^^^^^^^^^^^^ Q000
70 |             'length_distribution': Counter()
71 |         }
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:70:13: Q000 [*] Single quotes found but double quotes preferred
   |
68 |             'suffix_patterns': defaultdict(int),
69 |             'inflection_groups': defaultdict(list),
70 |             'length_distribution': Counter()
   |             ^^^^^^^^^^^^^^^^^^^^^ Q000
71 |         }
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:75:13: Q000 [*] Single quotes found but double quotes preferred
   |
73 |         # Common English suffixes for inflections
74 |         inflection_suffixes = {
75 |             's': 'plural/verb',
   |             ^^^ Q000
76 |             'es': 'plural/verb',
77 |             'ed': 'past tense',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:75:18: Q000 [*] Single quotes found but double quotes preferred
   |
73 |         # Common English suffixes for inflections
74 |         inflection_suffixes = {
75 |             's': 'plural/verb',
   |                  ^^^^^^^^^^^^^ Q000
76 |             'es': 'plural/verb',
77 |             'ed': 'past tense',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:76:13: Q000 [*] Single quotes found but double quotes preferred
   |
74 |         inflection_suffixes = {
75 |             's': 'plural/verb',
76 |             'es': 'plural/verb',
   |             ^^^^ Q000
77 |             'ed': 'past tense',
78 |             'ing': 'present participle',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:76:19: Q000 [*] Single quotes found but double quotes preferred
   |
74 |         inflection_suffixes = {
75 |             's': 'plural/verb',
76 |             'es': 'plural/verb',
   |                   ^^^^^^^^^^^^^ Q000
77 |             'ed': 'past tense',
78 |             'ing': 'present participle',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:77:13: Q000 [*] Single quotes found but double quotes preferred
   |
75 |             's': 'plural/verb',
76 |             'es': 'plural/verb',
77 |             'ed': 'past tense',
   |             ^^^^ Q000
78 |             'ing': 'present participle',
79 |             'er': 'comparative/agent',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:77:19: Q000 [*] Single quotes found but double quotes preferred
   |
75 |             's': 'plural/verb',
76 |             'es': 'plural/verb',
77 |             'ed': 'past tense',
   |                   ^^^^^^^^^^^^ Q000
78 |             'ing': 'present participle',
79 |             'er': 'comparative/agent',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:78:13: Q000 [*] Single quotes found but double quotes preferred
   |
76 |             'es': 'plural/verb',
77 |             'ed': 'past tense',
78 |             'ing': 'present participle',
   |             ^^^^^ Q000
79 |             'er': 'comparative/agent',
80 |             'est': 'superlative',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:78:20: Q000 [*] Single quotes found but double quotes preferred
   |
76 |             'es': 'plural/verb',
77 |             'ed': 'past tense',
78 |             'ing': 'present participle',
   |                    ^^^^^^^^^^^^^^^^^^^^ Q000
79 |             'er': 'comparative/agent',
80 |             'est': 'superlative',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:79:13: Q000 [*] Single quotes found but double quotes preferred
   |
77 |             'ed': 'past tense',
78 |             'ing': 'present participle',
79 |             'er': 'comparative/agent',
   |             ^^^^ Q000
80 |             'est': 'superlative',
81 |             'ly': 'adverb',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:79:19: Q000 [*] Single quotes found but double quotes preferred
   |
77 |             'ed': 'past tense',
78 |             'ing': 'present participle',
79 |             'er': 'comparative/agent',
   |                   ^^^^^^^^^^^^^^^^^^^ Q000
80 |             'est': 'superlative',
81 |             'ly': 'adverb',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:80:13: Q000 [*] Single quotes found but double quotes preferred
   |
78 |             'ing': 'present participle',
79 |             'er': 'comparative/agent',
80 |             'est': 'superlative',
   |             ^^^^^ Q000
81 |             'ly': 'adverb',
82 |             'ment': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:80:20: Q000 [*] Single quotes found but double quotes preferred
   |
78 |             'ing': 'present participle',
79 |             'er': 'comparative/agent',
80 |             'est': 'superlative',
   |                    ^^^^^^^^^^^^^ Q000
81 |             'ly': 'adverb',
82 |             'ment': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:81:13: Q000 [*] Single quotes found but double quotes preferred
   |
79 |             'er': 'comparative/agent',
80 |             'est': 'superlative',
81 |             'ly': 'adverb',
   |             ^^^^ Q000
82 |             'ment': 'noun',
83 |             'ness': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:81:19: Q000 [*] Single quotes found but double quotes preferred
   |
79 |             'er': 'comparative/agent',
80 |             'est': 'superlative',
81 |             'ly': 'adverb',
   |                   ^^^^^^^^ Q000
82 |             'ment': 'noun',
83 |             'ness': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:82:13: Q000 [*] Single quotes found but double quotes preferred
   |
80 |             'est': 'superlative',
81 |             'ly': 'adverb',
82 |             'ment': 'noun',
   |             ^^^^^^ Q000
83 |             'ness': 'noun',
84 |             'ity': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:82:21: Q000 [*] Single quotes found but double quotes preferred
   |
80 |             'est': 'superlative',
81 |             'ly': 'adverb',
82 |             'ment': 'noun',
   |                     ^^^^^^ Q000
83 |             'ness': 'noun',
84 |             'ity': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:83:13: Q000 [*] Single quotes found but double quotes preferred
   |
81 |             'ly': 'adverb',
82 |             'ment': 'noun',
83 |             'ness': 'noun',
   |             ^^^^^^ Q000
84 |             'ity': 'noun',
85 |             'tion': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:83:21: Q000 [*] Single quotes found but double quotes preferred
   |
81 |             'ly': 'adverb',
82 |             'ment': 'noun',
83 |             'ness': 'noun',
   |                     ^^^^^^ Q000
84 |             'ity': 'noun',
85 |             'tion': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:84:13: Q000 [*] Single quotes found but double quotes preferred
   |
82 |             'ment': 'noun',
83 |             'ness': 'noun',
84 |             'ity': 'noun',
   |             ^^^^^ Q000
85 |             'tion': 'noun',
86 |             'sion': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:84:20: Q000 [*] Single quotes found but double quotes preferred
   |
82 |             'ment': 'noun',
83 |             'ness': 'noun',
84 |             'ity': 'noun',
   |                    ^^^^^^ Q000
85 |             'tion': 'noun',
86 |             'sion': 'noun',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:85:13: Q000 [*] Single quotes found but double quotes preferred
   |
83 |             'ness': 'noun',
84 |             'ity': 'noun',
85 |             'tion': 'noun',
   |             ^^^^^^ Q000
86 |             'sion': 'noun',
87 |             'ize': 'verb',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:85:21: Q000 [*] Single quotes found but double quotes preferred
   |
83 |             'ness': 'noun',
84 |             'ity': 'noun',
85 |             'tion': 'noun',
   |                     ^^^^^^ Q000
86 |             'sion': 'noun',
87 |             'ize': 'verb',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:86:13: Q000 [*] Single quotes found but double quotes preferred
   |
84 |             'ity': 'noun',
85 |             'tion': 'noun',
86 |             'sion': 'noun',
   |             ^^^^^^ Q000
87 |             'ize': 'verb',
88 |             'ise': 'verb',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:86:21: Q000 [*] Single quotes found but double quotes preferred
   |
84 |             'ity': 'noun',
85 |             'tion': 'noun',
86 |             'sion': 'noun',
   |                     ^^^^^^ Q000
87 |             'ize': 'verb',
88 |             'ise': 'verb',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:87:13: Q000 [*] Single quotes found but double quotes preferred
   |
85 |             'tion': 'noun',
86 |             'sion': 'noun',
87 |             'ize': 'verb',
   |             ^^^^^ Q000
88 |             'ise': 'verb',
89 |             'able': 'adjective',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:87:20: Q000 [*] Single quotes found but double quotes preferred
   |
85 |             'tion': 'noun',
86 |             'sion': 'noun',
87 |             'ize': 'verb',
   |                    ^^^^^^ Q000
88 |             'ise': 'verb',
89 |             'able': 'adjective',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:88:13: Q000 [*] Single quotes found but double quotes preferred
   |
86 |             'sion': 'noun',
87 |             'ize': 'verb',
88 |             'ise': 'verb',
   |             ^^^^^ Q000
89 |             'able': 'adjective',
90 |             'ible': 'adjective',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:88:20: Q000 [*] Single quotes found but double quotes preferred
   |
86 |             'sion': 'noun',
87 |             'ize': 'verb',
88 |             'ise': 'verb',
   |                    ^^^^^^ Q000
89 |             'able': 'adjective',
90 |             'ible': 'adjective',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:89:13: Q000 [*] Single quotes found but double quotes preferred
   |
87 |             'ize': 'verb',
88 |             'ise': 'verb',
89 |             'able': 'adjective',
   |             ^^^^^^ Q000
90 |             'ible': 'adjective',
91 |             'ful': 'adjective',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:89:21: Q000 [*] Single quotes found but double quotes preferred
   |
87 |             'ize': 'verb',
88 |             'ise': 'verb',
89 |             'able': 'adjective',
   |                     ^^^^^^^^^^^ Q000
90 |             'ible': 'adjective',
91 |             'ful': 'adjective',
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:90:13: Q000 [*] Single quotes found but double quotes preferred
   |
88 |             'ise': 'verb',
89 |             'able': 'adjective',
90 |             'ible': 'adjective',
   |             ^^^^^^ Q000
91 |             'ful': 'adjective',
92 |             'less': 'adjective'
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:90:21: Q000 [*] Single quotes found but double quotes preferred
   |
88 |             'ise': 'verb',
89 |             'able': 'adjective',
90 |             'ible': 'adjective',
   |                     ^^^^^^^^^^^ Q000
91 |             'ful': 'adjective',
92 |             'less': 'adjective'
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:91:13: Q000 [*] Single quotes found but double quotes preferred
   |
89 |             'able': 'adjective',
90 |             'ible': 'adjective',
91 |             'ful': 'adjective',
   |             ^^^^^ Q000
92 |             'less': 'adjective'
93 |         }
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:91:20: Q000 [*] Single quotes found but double quotes preferred
   |
89 |             'able': 'adjective',
90 |             'ible': 'adjective',
91 |             'ful': 'adjective',
   |                    ^^^^^^^^^^^ Q000
92 |             'less': 'adjective'
93 |         }
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:92:13: Q000 [*] Single quotes found but double quotes preferred
   |
90 |             'ible': 'adjective',
91 |             'ful': 'adjective',
92 |             'less': 'adjective'
   |             ^^^^^^ Q000
93 |         }
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:92:21: Q000 [*] Single quotes found but double quotes preferred
   |
90 |             'ible': 'adjective',
91 |             'ful': 'adjective',
92 |             'less': 'adjective'
   |                     ^^^^^^^^^^^ Q000
93 |         }
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:97:22: Q000 [*] Single quotes found but double quotes preferred
   |
95 |         # Analyze suffix patterns
96 |         for word in words:
97 |             analysis['length_distribution'][len(word)] += 1
   |                      ^^^^^^^^^^^^^^^^^^^^^ Q000
98 |             
99 |             for suffix, category in inflection_suffixes.items():
   |
   = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:101:30: Q000 [*] Single quotes found but double quotes preferred
    |
 99 |             for suffix, category in inflection_suffixes.items():
100 |                 if word.endswith(suffix) and len(word) > len(suffix) + 2:
101 |                     analysis['suffix_patterns'][suffix] += 1
    |                              ^^^^^^^^^^^^^^^^^ Q000
102 |                     base = word[:-len(suffix)]
103 |                     analysis['inflection_groups'][base].append((word, suffix, category))
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:103:30: Q000 [*] Single quotes found but double quotes preferred
    |
101 |                     analysis['suffix_patterns'][suffix] += 1
102 |                     base = word[:-len(suffix)]
103 |                     analysis['inflection_groups'][base].append((word, suffix, category))
    |                              ^^^^^^^^^^^^^^^^^^^ Q000
104 |                     
105 |         return analysis
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:107:48: UP006 [*] Use `list` instead of `List` for type annotation
    |
105 |         return analysis
106 |         
107 |     def compare_reduction_methods(self, words: List[str], sample_size: int = 5000) -> Dict[str, any]:
    |                                                ^^^^ UP006
108 |         """Compare different reduction methods on a sample."""
109 |         # Use sample for performance
    |
    = help: Replace with `list`

scripts/analyze_corpus_optimization.py:107:87: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
105 |         return analysis
106 |         
107 |     def compare_reduction_methods(self, words: List[str], sample_size: int = 5000) -> Dict[str, any]:
    |                                                                                       ^^^^ UP006
108 |         """Compare different reduction methods on a sample."""
109 |         # Use sample for performance
    |
    = help: Replace with `dict`

scripts/analyze_corpus_optimization.py:114:17: Q000 [*] Single quotes found but double quotes preferred
    |
113 |         # 1. Simple deduplication
114 |         results['deduplication'] = {
    |                 ^^^^^^^^^^^^^^^ Q000
115 |             'method': 'Simple lowercase deduplication',
116 |             'original': len(sample),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:115:13: Q000 [*] Single quotes found but double quotes preferred
    |
113 |         # 1. Simple deduplication
114 |         results['deduplication'] = {
115 |             'method': 'Simple lowercase deduplication',
    |             ^^^^^^^^ Q000
116 |             'original': len(sample),
117 |             'reduced': len(set(sample)),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:115:23: Q000 [*] Single quotes found but double quotes preferred
    |
113 |         # 1. Simple deduplication
114 |         results['deduplication'] = {
115 |             'method': 'Simple lowercase deduplication',
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
116 |             'original': len(sample),
117 |             'reduced': len(set(sample)),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:116:13: Q000 [*] Single quotes found but double quotes preferred
    |
114 |         results['deduplication'] = {
115 |             'method': 'Simple lowercase deduplication',
116 |             'original': len(sample),
    |             ^^^^^^^^^^ Q000
117 |             'reduced': len(set(sample)),
118 |             'reduction_pct': (1 - len(set(sample)) / len(sample)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:117:13: Q000 [*] Single quotes found but double quotes preferred
    |
115 |             'method': 'Simple lowercase deduplication',
116 |             'original': len(sample),
117 |             'reduced': len(set(sample)),
    |             ^^^^^^^^^ Q000
118 |             'reduction_pct': (1 - len(set(sample)) / len(sample)) * 100
119 |         }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:118:13: Q000 [*] Single quotes found but double quotes preferred
    |
116 |             'original': len(sample),
117 |             'reduced': len(set(sample)),
118 |             'reduction_pct': (1 - len(set(sample)) / len(sample)) * 100
    |             ^^^^^^^^^^^^^^^ Q000
119 |         }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:122:12: Q000 [*] Single quotes found but double quotes preferred
    |
121 |         # 2. Stemming methods
122 |         if 'porter_stemmer' in self.tools:
    |            ^^^^^^^^^^^^^^^^ Q000
123 |             porter_stems = set()
124 |             for word in sample:
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:126:49: Q000 [*] Single quotes found but double quotes preferred
    |
124 |             for word in sample:
125 |                 try:
126 |                     porter_stems.add(self.tools['porter_stemmer'].stem(word))
    |                                                 ^^^^^^^^^^^^^^^^ Q000
127 |                 except:
128 |                     porter_stems.add(word)
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:130:21: Q000 [*] Single quotes found but double quotes preferred
    |
128 |                     porter_stems.add(word)
129 |                     
130 |             results['porter_stemming'] = {
    |                     ^^^^^^^^^^^^^^^^^ Q000
131 |                 'method': 'Porter Stemmer (aggressive)',
132 |                 'original': len(sample),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:131:17: Q000 [*] Single quotes found but double quotes preferred
    |
130 |             results['porter_stemming'] = {
131 |                 'method': 'Porter Stemmer (aggressive)',
    |                 ^^^^^^^^ Q000
132 |                 'original': len(sample),
133 |                 'reduced': len(porter_stems),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:131:27: Q000 [*] Single quotes found but double quotes preferred
    |
130 |             results['porter_stemming'] = {
131 |                 'method': 'Porter Stemmer (aggressive)',
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
132 |                 'original': len(sample),
133 |                 'reduced': len(porter_stems),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:132:17: Q000 [*] Single quotes found but double quotes preferred
    |
130 |             results['porter_stemming'] = {
131 |                 'method': 'Porter Stemmer (aggressive)',
132 |                 'original': len(sample),
    |                 ^^^^^^^^^^ Q000
133 |                 'reduced': len(porter_stems),
134 |                 'reduction_pct': (1 - len(porter_stems) / len(sample)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:133:17: Q000 [*] Single quotes found but double quotes preferred
    |
131 |                 'method': 'Porter Stemmer (aggressive)',
132 |                 'original': len(sample),
133 |                 'reduced': len(porter_stems),
    |                 ^^^^^^^^^ Q000
134 |                 'reduction_pct': (1 - len(porter_stems) / len(sample)) * 100
135 |             }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:134:17: Q000 [*] Single quotes found but double quotes preferred
    |
132 |                 'original': len(sample),
133 |                 'reduced': len(porter_stems),
134 |                 'reduction_pct': (1 - len(porter_stems) / len(sample)) * 100
    |                 ^^^^^^^^^^^^^^^ Q000
135 |             }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:137:12: Q000 [*] Single quotes found but double quotes preferred
    |
135 |             }
136 |             
137 |         if 'snowball_stemmer' in self.tools:
    |            ^^^^^^^^^^^^^^^^^^ Q000
138 |             snowball_stems = set()
139 |             for word in sample:
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:141:51: Q000 [*] Single quotes found but double quotes preferred
    |
139 |             for word in sample:
140 |                 try:
141 |                     snowball_stems.add(self.tools['snowball_stemmer'].stem(word))
    |                                                   ^^^^^^^^^^^^^^^^^^ Q000
142 |                 except:
143 |                     snowball_stems.add(word)
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:145:21: Q000 [*] Single quotes found but double quotes preferred
    |
143 |                     snowball_stems.add(word)
144 |                     
145 |             results['snowball_stemming'] = {
    |                     ^^^^^^^^^^^^^^^^^^^ Q000
146 |                 'method': 'Snowball Stemmer (balanced)',
147 |                 'original': len(sample),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:146:17: Q000 [*] Single quotes found but double quotes preferred
    |
145 |             results['snowball_stemming'] = {
146 |                 'method': 'Snowball Stemmer (balanced)',
    |                 ^^^^^^^^ Q000
147 |                 'original': len(sample),
148 |                 'reduced': len(snowball_stems),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:146:27: Q000 [*] Single quotes found but double quotes preferred
    |
145 |             results['snowball_stemming'] = {
146 |                 'method': 'Snowball Stemmer (balanced)',
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
147 |                 'original': len(sample),
148 |                 'reduced': len(snowball_stems),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:147:17: Q000 [*] Single quotes found but double quotes preferred
    |
145 |             results['snowball_stemming'] = {
146 |                 'method': 'Snowball Stemmer (balanced)',
147 |                 'original': len(sample),
    |                 ^^^^^^^^^^ Q000
148 |                 'reduced': len(snowball_stems),
149 |                 'reduction_pct': (1 - len(snowball_stems) / len(sample)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:148:17: Q000 [*] Single quotes found but double quotes preferred
    |
146 |                 'method': 'Snowball Stemmer (balanced)',
147 |                 'original': len(sample),
148 |                 'reduced': len(snowball_stems),
    |                 ^^^^^^^^^ Q000
149 |                 'reduction_pct': (1 - len(snowball_stems) / len(sample)) * 100
150 |             }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:149:17: Q000 [*] Single quotes found but double quotes preferred
    |
147 |                 'original': len(sample),
148 |                 'reduced': len(snowball_stems),
149 |                 'reduction_pct': (1 - len(snowball_stems) / len(sample)) * 100
    |                 ^^^^^^^^^^^^^^^ Q000
150 |             }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:153:12: Q000 [*] Single quotes found but double quotes preferred
    |
152 |         # 3. Lemmatization
153 |         if 'wordnet_lemmatizer' in self.tools:
    |            ^^^^^^^^^^^^^^^^^^^^ Q000
154 |             lemmas = set()
155 |             for word in sample:
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:158:42: Q000 [*] Single quotes found but double quotes preferred
    |
156 |                 try:
157 |                     # Try different POS tags for better lemmatization
158 |                     lemma_n = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='n')
    |                                          ^^^^^^^^^^^^^^^^^^^^ Q000
159 |                     lemma_v = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='v')
160 |                     lemma_a = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='a')
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:158:84: Q000 [*] Single quotes found but double quotes preferred
    |
156 |                 try:
157 |                     # Try different POS tags for better lemmatization
158 |                     lemma_n = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='n')
    |                                                                                    ^^^ Q000
159 |                     lemma_v = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='v')
160 |                     lemma_a = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='a')
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:159:42: Q000 [*] Single quotes found but double quotes preferred
    |
157 |                     # Try different POS tags for better lemmatization
158 |                     lemma_n = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='n')
159 |                     lemma_v = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='v')
    |                                          ^^^^^^^^^^^^^^^^^^^^ Q000
160 |                     lemma_a = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='a')
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:159:84: Q000 [*] Single quotes found but double quotes preferred
    |
157 |                     # Try different POS tags for better lemmatization
158 |                     lemma_n = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='n')
159 |                     lemma_v = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='v')
    |                                                                                    ^^^ Q000
160 |                     lemma_a = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='a')
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:160:42: Q000 [*] Single quotes found but double quotes preferred
    |
158 |                     lemma_n = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='n')
159 |                     lemma_v = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='v')
160 |                     lemma_a = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='a')
    |                                          ^^^^^^^^^^^^^^^^^^^^ Q000
161 |                     
162 |                     # Choose shortest lemma
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:160:84: Q000 [*] Single quotes found but double quotes preferred
    |
158 |                     lemma_n = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='n')
159 |                     lemma_v = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='v')
160 |                     lemma_a = self.tools['wordnet_lemmatizer'].lemmatize(word, pos='a')
    |                                                                                    ^^^ Q000
161 |                     
162 |                     # Choose shortest lemma
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:168:21: Q000 [*] Single quotes found but double quotes preferred
    |
166 |                     lemmas.add(word)
167 |                     
168 |             results['wordnet_lemmatization'] = {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ Q000
169 |                 'method': 'WordNet Lemmatizer (conservative)',
170 |                 'original': len(sample),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:169:17: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             results['wordnet_lemmatization'] = {
169 |                 'method': 'WordNet Lemmatizer (conservative)',
    |                 ^^^^^^^^ Q000
170 |                 'original': len(sample),
171 |                 'reduced': len(lemmas),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:169:27: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             results['wordnet_lemmatization'] = {
169 |                 'method': 'WordNet Lemmatizer (conservative)',
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
170 |                 'original': len(sample),
171 |                 'reduced': len(lemmas),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:170:17: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             results['wordnet_lemmatization'] = {
169 |                 'method': 'WordNet Lemmatizer (conservative)',
170 |                 'original': len(sample),
    |                 ^^^^^^^^^^ Q000
171 |                 'reduced': len(lemmas),
172 |                 'reduction_pct': (1 - len(lemmas) / len(sample)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:171:17: Q000 [*] Single quotes found but double quotes preferred
    |
169 |                 'method': 'WordNet Lemmatizer (conservative)',
170 |                 'original': len(sample),
171 |                 'reduced': len(lemmas),
    |                 ^^^^^^^^^ Q000
172 |                 'reduction_pct': (1 - len(lemmas) / len(sample)) * 100
173 |             }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:172:17: Q000 [*] Single quotes found but double quotes preferred
    |
170 |                 'original': len(sample),
171 |                 'reduced': len(lemmas),
172 |                 'reduction_pct': (1 - len(lemmas) / len(sample)) * 100
    |                 ^^^^^^^^^^^^^^^ Q000
173 |             }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:181:17: Q000 [*] Single quotes found but double quotes preferred
    |
179 |             custom_bases.add(base)
180 |             
181 |         results['custom_rules'] = {
    |                 ^^^^^^^^^^^^^^ Q000
182 |             'method': 'Custom rule-based reduction',
183 |             'original': len(sample),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:182:13: Q000 [*] Single quotes found but double quotes preferred
    |
181 |         results['custom_rules'] = {
182 |             'method': 'Custom rule-based reduction',
    |             ^^^^^^^^ Q000
183 |             'original': len(sample),
184 |             'reduced': len(custom_bases),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:182:23: Q000 [*] Single quotes found but double quotes preferred
    |
181 |         results['custom_rules'] = {
182 |             'method': 'Custom rule-based reduction',
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
183 |             'original': len(sample),
184 |             'reduced': len(custom_bases),
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:183:13: Q000 [*] Single quotes found but double quotes preferred
    |
181 |         results['custom_rules'] = {
182 |             'method': 'Custom rule-based reduction',
183 |             'original': len(sample),
    |             ^^^^^^^^^^ Q000
184 |             'reduced': len(custom_bases),
185 |             'reduction_pct': (1 - len(custom_bases) / len(sample)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:184:13: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             'method': 'Custom rule-based reduction',
183 |             'original': len(sample),
184 |             'reduced': len(custom_bases),
    |             ^^^^^^^^^ Q000
185 |             'reduction_pct': (1 - len(custom_bases) / len(sample)) * 100
186 |         }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:185:13: Q000 [*] Single quotes found but double quotes preferred
    |
183 |             'original': len(sample),
184 |             'reduced': len(custom_bases),
185 |             'reduction_pct': (1 - len(custom_bases) / len(sample)) * 100
    |             ^^^^^^^^^^^^^^^ Q000
186 |         }
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:195:14: Q000 [*] Single quotes found but double quotes preferred
    |
193 |         suffix_rules = [
194 |             # Verb forms
195 |             ('ied', 'y'),      # studied -> study
    |              ^^^^^ Q000
196 |             ('ies', 'y'),      # studies -> study
197 |             ('ing', ''),       # studying -> study
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:195:21: Q000 [*] Single quotes found but double quotes preferred
    |
193 |         suffix_rules = [
194 |             # Verb forms
195 |             ('ied', 'y'),      # studied -> study
    |                     ^^^ Q000
196 |             ('ies', 'y'),      # studies -> study
197 |             ('ing', ''),       # studying -> study
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:196:14: Q000 [*] Single quotes found but double quotes preferred
    |
194 |             # Verb forms
195 |             ('ied', 'y'),      # studied -> study
196 |             ('ies', 'y'),      # studies -> study
    |              ^^^^^ Q000
197 |             ('ing', ''),       # studying -> study
198 |             ('ed', ''),        # studied -> study
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:196:21: Q000 [*] Single quotes found but double quotes preferred
    |
194 |             # Verb forms
195 |             ('ied', 'y'),      # studied -> study
196 |             ('ies', 'y'),      # studies -> study
    |                     ^^^ Q000
197 |             ('ing', ''),       # studying -> study
198 |             ('ed', ''),        # studied -> study
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:197:14: Q000 [*] Single quotes found but double quotes preferred
    |
195 |             ('ied', 'y'),      # studied -> study
196 |             ('ies', 'y'),      # studies -> study
197 |             ('ing', ''),       # studying -> study
    |              ^^^^^ Q000
198 |             ('ed', ''),        # studied -> study
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:197:21: Q000 [*] Single quotes found but double quotes preferred
    |
195 |             ('ied', 'y'),      # studied -> study
196 |             ('ies', 'y'),      # studies -> study
197 |             ('ing', ''),       # studying -> study
    |                     ^^ Q000
198 |             ('ed', ''),        # studied -> study
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:198:14: Q000 [*] Single quotes found but double quotes preferred
    |
196 |             ('ies', 'y'),      # studies -> study
197 |             ('ing', ''),       # studying -> study
198 |             ('ed', ''),        # studied -> study
    |              ^^^^ Q000
199 |             
200 |             # Plural forms
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:198:20: Q000 [*] Single quotes found but double quotes preferred
    |
196 |             ('ies', 'y'),      # studies -> study
197 |             ('ing', ''),       # studying -> study
198 |             ('ed', ''),        # studied -> study
    |                    ^^ Q000
199 |             
200 |             # Plural forms
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:201:14: Q000 [*] Single quotes found but double quotes preferred
    |
200 |             # Plural forms
201 |             ('ves', 'f'),      # leaves -> leaf
    |              ^^^^^ Q000
202 |             ('ves', 'fe'),     # knives -> knife
203 |             ('ies', 'y'),      # cities -> city
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:201:21: Q000 [*] Single quotes found but double quotes preferred
    |
200 |             # Plural forms
201 |             ('ves', 'f'),      # leaves -> leaf
    |                     ^^^ Q000
202 |             ('ves', 'fe'),     # knives -> knife
203 |             ('ies', 'y'),      # cities -> city
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:202:14: Q000 [*] Single quotes found but double quotes preferred
    |
200 |             # Plural forms
201 |             ('ves', 'f'),      # leaves -> leaf
202 |             ('ves', 'fe'),     # knives -> knife
    |              ^^^^^ Q000
203 |             ('ies', 'y'),      # cities -> city
204 |             ('oes', 'o'),      # tomatoes -> tomato
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:202:21: Q000 [*] Single quotes found but double quotes preferred
    |
200 |             # Plural forms
201 |             ('ves', 'f'),      # leaves -> leaf
202 |             ('ves', 'fe'),     # knives -> knife
    |                     ^^^^ Q000
203 |             ('ies', 'y'),      # cities -> city
204 |             ('oes', 'o'),      # tomatoes -> tomato
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:203:14: Q000 [*] Single quotes found but double quotes preferred
    |
201 |             ('ves', 'f'),      # leaves -> leaf
202 |             ('ves', 'fe'),     # knives -> knife
203 |             ('ies', 'y'),      # cities -> city
    |              ^^^^^ Q000
204 |             ('oes', 'o'),      # tomatoes -> tomato
205 |             ('ses', 's'),      # glasses -> glass
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:203:21: Q000 [*] Single quotes found but double quotes preferred
    |
201 |             ('ves', 'f'),      # leaves -> leaf
202 |             ('ves', 'fe'),     # knives -> knife
203 |             ('ies', 'y'),      # cities -> city
    |                     ^^^ Q000
204 |             ('oes', 'o'),      # tomatoes -> tomato
205 |             ('ses', 's'),      # glasses -> glass
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:204:14: Q000 [*] Single quotes found but double quotes preferred
    |
202 |             ('ves', 'fe'),     # knives -> knife
203 |             ('ies', 'y'),      # cities -> city
204 |             ('oes', 'o'),      # tomatoes -> tomato
    |              ^^^^^ Q000
205 |             ('ses', 's'),      # glasses -> glass
206 |             ('xes', 'x'),      # boxes -> box
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:204:21: Q000 [*] Single quotes found but double quotes preferred
    |
202 |             ('ves', 'fe'),     # knives -> knife
203 |             ('ies', 'y'),      # cities -> city
204 |             ('oes', 'o'),      # tomatoes -> tomato
    |                     ^^^ Q000
205 |             ('ses', 's'),      # glasses -> glass
206 |             ('xes', 'x'),      # boxes -> box
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:205:14: Q000 [*] Single quotes found but double quotes preferred
    |
203 |             ('ies', 'y'),      # cities -> city
204 |             ('oes', 'o'),      # tomatoes -> tomato
205 |             ('ses', 's'),      # glasses -> glass
    |              ^^^^^ Q000
206 |             ('xes', 'x'),      # boxes -> box
207 |             ('zes', 'z'),      # buzzes -> buzz
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:205:21: Q000 [*] Single quotes found but double quotes preferred
    |
203 |             ('ies', 'y'),      # cities -> city
204 |             ('oes', 'o'),      # tomatoes -> tomato
205 |             ('ses', 's'),      # glasses -> glass
    |                     ^^^ Q000
206 |             ('xes', 'x'),      # boxes -> box
207 |             ('zes', 'z'),      # buzzes -> buzz
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:206:14: Q000 [*] Single quotes found but double quotes preferred
    |
204 |             ('oes', 'o'),      # tomatoes -> tomato
205 |             ('ses', 's'),      # glasses -> glass
206 |             ('xes', 'x'),      # boxes -> box
    |              ^^^^^ Q000
207 |             ('zes', 'z'),      # buzzes -> buzz
208 |             ('ches', 'ch'),    # churches -> church
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:206:21: Q000 [*] Single quotes found but double quotes preferred
    |
204 |             ('oes', 'o'),      # tomatoes -> tomato
205 |             ('ses', 's'),      # glasses -> glass
206 |             ('xes', 'x'),      # boxes -> box
    |                     ^^^ Q000
207 |             ('zes', 'z'),      # buzzes -> buzz
208 |             ('ches', 'ch'),    # churches -> church
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:207:14: Q000 [*] Single quotes found but double quotes preferred
    |
205 |             ('ses', 's'),      # glasses -> glass
206 |             ('xes', 'x'),      # boxes -> box
207 |             ('zes', 'z'),      # buzzes -> buzz
    |              ^^^^^ Q000
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('shes', 'sh'),    # brushes -> brush
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:207:21: Q000 [*] Single quotes found but double quotes preferred
    |
205 |             ('ses', 's'),      # glasses -> glass
206 |             ('xes', 'x'),      # boxes -> box
207 |             ('zes', 'z'),      # buzzes -> buzz
    |                     ^^^ Q000
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('shes', 'sh'),    # brushes -> brush
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:208:14: Q000 [*] Single quotes found but double quotes preferred
    |
206 |             ('xes', 'x'),      # boxes -> box
207 |             ('zes', 'z'),      # buzzes -> buzz
208 |             ('ches', 'ch'),    # churches -> church
    |              ^^^^^^ Q000
209 |             ('shes', 'sh'),    # brushes -> brush
210 |             ('men', 'man'),    # men -> man
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:208:22: Q000 [*] Single quotes found but double quotes preferred
    |
206 |             ('xes', 'x'),      # boxes -> box
207 |             ('zes', 'z'),      # buzzes -> buzz
208 |             ('ches', 'ch'),    # churches -> church
    |                      ^^^^ Q000
209 |             ('shes', 'sh'),    # brushes -> brush
210 |             ('men', 'man'),    # men -> man
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:209:14: Q000 [*] Single quotes found but double quotes preferred
    |
207 |             ('zes', 'z'),      # buzzes -> buzz
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('shes', 'sh'),    # brushes -> brush
    |              ^^^^^^ Q000
210 |             ('men', 'man'),    # men -> man
211 |             ('ren', 'r'),      # children -> child (approximate)
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:209:22: Q000 [*] Single quotes found but double quotes preferred
    |
207 |             ('zes', 'z'),      # buzzes -> buzz
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('shes', 'sh'),    # brushes -> brush
    |                      ^^^^ Q000
210 |             ('men', 'man'),    # men -> man
211 |             ('ren', 'r'),      # children -> child (approximate)
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:210:14: Q000 [*] Single quotes found but double quotes preferred
    |
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('shes', 'sh'),    # brushes -> brush
210 |             ('men', 'man'),    # men -> man
    |              ^^^^^ Q000
211 |             ('ren', 'r'),      # children -> child (approximate)
212 |             ('es', ''),        # dishes -> dish
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:210:21: Q000 [*] Single quotes found but double quotes preferred
    |
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('shes', 'sh'),    # brushes -> brush
210 |             ('men', 'man'),    # men -> man
    |                     ^^^^^ Q000
211 |             ('ren', 'r'),      # children -> child (approximate)
212 |             ('es', ''),        # dishes -> dish
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:211:14: Q000 [*] Single quotes found but double quotes preferred
    |
209 |             ('shes', 'sh'),    # brushes -> brush
210 |             ('men', 'man'),    # men -> man
211 |             ('ren', 'r'),      # children -> child (approximate)
    |              ^^^^^ Q000
212 |             ('es', ''),        # dishes -> dish
213 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:211:21: Q000 [*] Single quotes found but double quotes preferred
    |
209 |             ('shes', 'sh'),    # brushes -> brush
210 |             ('men', 'man'),    # men -> man
211 |             ('ren', 'r'),      # children -> child (approximate)
    |                     ^^^ Q000
212 |             ('es', ''),        # dishes -> dish
213 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:212:14: Q000 [*] Single quotes found but double quotes preferred
    |
210 |             ('men', 'man'),    # men -> man
211 |             ('ren', 'r'),      # children -> child (approximate)
212 |             ('es', ''),        # dishes -> dish
    |              ^^^^ Q000
213 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:212:20: Q000 [*] Single quotes found but double quotes preferred
    |
210 |             ('men', 'man'),    # men -> man
211 |             ('ren', 'r'),      # children -> child (approximate)
212 |             ('es', ''),        # dishes -> dish
    |                    ^^ Q000
213 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:213:14: Q000 [*] Single quotes found but double quotes preferred
    |
211 |             ('ren', 'r'),      # children -> child (approximate)
212 |             ('es', ''),        # dishes -> dish
213 |             ('s', ''),         # cats -> cat
    |              ^^^ Q000
214 |             
215 |             # Comparative/Superlative
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:213:19: Q000 [*] Single quotes found but double quotes preferred
    |
211 |             ('ren', 'r'),      # children -> child (approximate)
212 |             ('es', ''),        # dishes -> dish
213 |             ('s', ''),         # cats -> cat
    |                   ^^ Q000
214 |             
215 |             # Comparative/Superlative
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:216:14: Q000 [*] Single quotes found but double quotes preferred
    |
215 |             # Comparative/Superlative
216 |             ('iest', 'y'),     # happiest -> happy
    |              ^^^^^^ Q000
217 |             ('ier', 'y'),      # happier -> happy
218 |             ('est', ''),       # fastest -> fast
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:216:22: Q000 [*] Single quotes found but double quotes preferred
    |
215 |             # Comparative/Superlative
216 |             ('iest', 'y'),     # happiest -> happy
    |                      ^^^ Q000
217 |             ('ier', 'y'),      # happier -> happy
218 |             ('est', ''),       # fastest -> fast
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:217:14: Q000 [*] Single quotes found but double quotes preferred
    |
215 |             # Comparative/Superlative
216 |             ('iest', 'y'),     # happiest -> happy
217 |             ('ier', 'y'),      # happier -> happy
    |              ^^^^^ Q000
218 |             ('est', ''),       # fastest -> fast
219 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:217:21: Q000 [*] Single quotes found but double quotes preferred
    |
215 |             # Comparative/Superlative
216 |             ('iest', 'y'),     # happiest -> happy
217 |             ('ier', 'y'),      # happier -> happy
    |                     ^^^ Q000
218 |             ('est', ''),       # fastest -> fast
219 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:218:14: Q000 [*] Single quotes found but double quotes preferred
    |
216 |             ('iest', 'y'),     # happiest -> happy
217 |             ('ier', 'y'),      # happier -> happy
218 |             ('est', ''),       # fastest -> fast
    |              ^^^^^ Q000
219 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:218:21: Q000 [*] Single quotes found but double quotes preferred
    |
216 |             ('iest', 'y'),     # happiest -> happy
217 |             ('ier', 'y'),      # happier -> happy
218 |             ('est', ''),       # fastest -> fast
    |                     ^^ Q000
219 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:219:14: Q000 [*] Single quotes found but double quotes preferred
    |
217 |             ('ier', 'y'),      # happier -> happy
218 |             ('est', ''),       # fastest -> fast
219 |             ('er', ''),        # faster -> fast
    |              ^^^^ Q000
220 |             
221 |             # Adverbs
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:219:20: Q000 [*] Single quotes found but double quotes preferred
    |
217 |             ('ier', 'y'),      # happier -> happy
218 |             ('est', ''),       # fastest -> fast
219 |             ('er', ''),        # faster -> fast
    |                    ^^ Q000
220 |             
221 |             # Adverbs
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:222:14: Q000 [*] Single quotes found but double quotes preferred
    |
221 |             # Adverbs
222 |             ('ly', ''),        # quickly -> quick
    |              ^^^^ Q000
223 |         ]
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:222:20: Q000 [*] Single quotes found but double quotes preferred
    |
221 |             # Adverbs
222 |             ('ly', ''),        # quickly -> quick
    |                    ^^ Q000
223 |         ]
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:230:33: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
228 |                 base = word[:-len(suffix)] + replacement
229 |                 # Avoid creating very short words
230 |                 if len(base) >= 3:
    |                                 ^ PLR2004
231 |                     return base
    |

scripts/analyze_corpus_optimization.py:235:9: PLR0915 Too many statements (71 > 50)
    |
233 |         return original
234 |         
235 |     def generate_recommendations(self, corpus_path: Path) -> None:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
236 |         """Generate comprehensive optimization recommendations."""
237 |         print(f"\n{'='*60}")
    |

scripts/analyze_corpus_optimization.py:237:9: T201 `print` found
    |
235 |     def generate_recommendations(self, corpus_path: Path) -> None:
236 |         """Generate comprehensive optimization recommendations."""
237 |         print(f"\n{'='*60}")
    |         ^^^^^ T201
238 |         print("CORPUS OPTIMIZATION ANALYSIS")
239 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:238:9: T201 `print` found
    |
236 |         """Generate comprehensive optimization recommendations."""
237 |         print(f"\n{'='*60}")
238 |         print("CORPUS OPTIMIZATION ANALYSIS")
    |         ^^^^^ T201
239 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:239:9: T201 `print` found
    |
237 |         print(f"\n{'='*60}")
238 |         print("CORPUS OPTIMIZATION ANALYSIS")
239 |         print(f"{'='*60}\n")
    |         ^^^^^ T201
240 |         
241 |         # Load corpus
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:243:9: T201 `print` found
    |
241 |         # Load corpus
242 |         words = self.load_corpus(corpus_path)
243 |         print(f"Loaded {len(words):,} words from {corpus_path.name}")
    |         ^^^^^ T201
244 |         
245 |         # Basic statistics
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:247:9: T201 `print` found
    |
245 |         # Basic statistics
246 |         unique_words = set(words)
247 |         print(f"Unique words: {len(unique_words):,}")
    |         ^^^^^ T201
248 |         print(f"Duplicates: {len(words) - len(unique_words):,}")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:248:9: T201 `print` found
    |
246 |         unique_words = set(words)
247 |         print(f"Unique words: {len(unique_words):,}")
248 |         print(f"Duplicates: {len(words) - len(unique_words):,}")
    |         ^^^^^ T201
249 |         
250 |         # Morphological analysis
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:251:9: T201 `print` found
    |
250 |         # Morphological analysis
251 |         print(f"\n{'='*60}")
    |         ^^^^^ T201
252 |         print("MORPHOLOGICAL ANALYSIS")
253 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:252:9: T201 `print` found
    |
250 |         # Morphological analysis
251 |         print(f"\n{'='*60}")
252 |         print("MORPHOLOGICAL ANALYSIS")
    |         ^^^^^ T201
253 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:253:9: T201 `print` found
    |
251 |         print(f"\n{'='*60}")
252 |         print("MORPHOLOGICAL ANALYSIS")
253 |         print(f"{'='*60}\n")
    |         ^^^^^ T201
254 |         
255 |         morph_analysis = self.analyze_morphological_patterns(list(unique_words))
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:257:9: T201 `print` found
    |
255 |         morph_analysis = self.analyze_morphological_patterns(list(unique_words))
256 |         
257 |         print("Most common suffixes:")
    |         ^^^^^ T201
258 |         for suffix, count in sorted(morph_analysis['suffix_patterns'].items(), 
259 |                                    key=lambda x: x[1], reverse=True)[:10]:
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:258:52: Q000 [*] Single quotes found but double quotes preferred
    |
257 |         print("Most common suffixes:")
258 |         for suffix, count in sorted(morph_analysis['suffix_patterns'].items(), 
    |                                                    ^^^^^^^^^^^^^^^^^ Q000
259 |                                    key=lambda x: x[1], reverse=True)[:10]:
260 |             pct = (count / len(unique_words)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:261:13: T201 `print` found
    |
259 |                                    key=lambda x: x[1], reverse=True)[:10]:
260 |             pct = (count / len(unique_words)) * 100
261 |             print(f"  -{suffix}: {count:,} words ({pct:.1f}%)")
    |             ^^^^^ T201
262 |             
263 |         print("\nWord length distribution:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:263:9: T201 `print` found
    |
261 |             print(f"  -{suffix}: {count:,} words ({pct:.1f}%)")
262 |             
263 |         print("\nWord length distribution:")
    |         ^^^^^ T201
264 |         for length in range(1, 16):
265 |             count = morph_analysis['length_distribution'].get(length, 0)
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:265:36: Q000 [*] Single quotes found but double quotes preferred
    |
263 |         print("\nWord length distribution:")
264 |         for length in range(1, 16):
265 |             count = morph_analysis['length_distribution'].get(length, 0)
    |                                    ^^^^^^^^^^^^^^^^^^^^^ Q000
266 |             if count > 0:
267 |                 print(f"  {length:2d} chars: {count:,} words")
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:267:17: T201 `print` found
    |
265 |             count = morph_analysis['length_distribution'].get(length, 0)
266 |             if count > 0:
267 |                 print(f"  {length:2d} chars: {count:,} words")
    |                 ^^^^^ T201
268 |                 
269 |         # Method comparison
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:270:9: T201 `print` found
    |
269 |         # Method comparison
270 |         print(f"\n{'='*60}")
    |         ^^^^^ T201
271 |         print("REDUCTION METHOD COMPARISON")
272 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:271:9: T201 `print` found
    |
269 |         # Method comparison
270 |         print(f"\n{'='*60}")
271 |         print("REDUCTION METHOD COMPARISON")
    |         ^^^^^ T201
272 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:272:9: T201 `print` found
    |
270 |         print(f"\n{'='*60}")
271 |         print("REDUCTION METHOD COMPARISON")
272 |         print(f"{'='*60}\n")
    |         ^^^^^ T201
273 |         
274 |         method_results = self.compare_reduction_methods(list(unique_words))
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:276:13: B007 Loop control variable `method_name` not used within loop body
    |
274 |         method_results = self.compare_reduction_methods(list(unique_words))
275 |         
276 |         for method_name, result in method_results.items():
    |             ^^^^^^^^^^^ B007
277 |             print(f"{result['method']}:")
278 |             print(f"  Original: {result['original']:,} words")
    |
    = help: Rename unused `method_name` to `_method_name`

scripts/analyze_corpus_optimization.py:276:36: PERF102 When using only the values of a dict use the `values()` method
    |
274 |         method_results = self.compare_reduction_methods(list(unique_words))
275 |         
276 |         for method_name, result in method_results.items():
    |                                    ^^^^^^^^^^^^^^^^^^^^ PERF102
277 |             print(f"{result['method']}:")
278 |             print(f"  Original: {result['original']:,} words")
    |
    = help: Replace `.items()` with `.values()`

scripts/analyze_corpus_optimization.py:277:13: T201 `print` found
    |
276 |         for method_name, result in method_results.items():
277 |             print(f"{result['method']}:")
    |             ^^^^^ T201
278 |             print(f"  Original: {result['original']:,} words")
279 |             print(f"  Reduced:  {result['reduced']:,} words")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:278:13: T201 `print` found
    |
276 |         for method_name, result in method_results.items():
277 |             print(f"{result['method']}:")
278 |             print(f"  Original: {result['original']:,} words")
    |             ^^^^^ T201
279 |             print(f"  Reduced:  {result['reduced']:,} words")
280 |             print(f"  Reduction: {result['reduction_pct']:.1f}%\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:279:13: T201 `print` found
    |
277 |             print(f"{result['method']}:")
278 |             print(f"  Original: {result['original']:,} words")
279 |             print(f"  Reduced:  {result['reduced']:,} words")
    |             ^^^^^ T201
280 |             print(f"  Reduction: {result['reduction_pct']:.1f}%\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:280:13: T201 `print` found
    |
278 |             print(f"  Original: {result['original']:,} words")
279 |             print(f"  Reduced:  {result['reduced']:,} words")
280 |             print(f"  Reduction: {result['reduction_pct']:.1f}%\n")
    |             ^^^^^ T201
281 |             
282 |         # Calculate projections for full corpus
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:283:9: T201 `print` found
    |
282 |         # Calculate projections for full corpus
283 |         print(f"\n{'='*60}")
    |         ^^^^^ T201
284 |         print("FULL CORPUS PROJECTIONS")
285 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:284:9: T201 `print` found
    |
282 |         # Calculate projections for full corpus
283 |         print(f"\n{'='*60}")
284 |         print("FULL CORPUS PROJECTIONS")
    |         ^^^^^ T201
285 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:285:9: T201 `print` found
    |
283 |         print(f"\n{'='*60}")
284 |         print("FULL CORPUS PROJECTIONS")
285 |         print(f"{'='*60}\n")
    |         ^^^^^ T201
286 |         
287 |         current_unique = len(unique_words)
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:290:9: T201 `print` found
    |
288 | …     target_size = 55000
289 | …     
290 | …     print(f"Current unique words: {current_unique:,}")
    |       ^^^^^ T201
291 | …     print(f"Target size: {target_size:,}")
292 | …     print(f"Required reduction: {current_unique - target_size:,} words ({((current_unique - target_size) / current_unique * 100):.1…
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:291:9: T201 `print` found
    |
290 | …     print(f"Current unique words: {current_unique:,}")
291 | …     print(f"Target size: {target_size:,}")
    |       ^^^^^ T201
292 | …     print(f"Required reduction: {current_unique - target_size:,} words ({((current_unique - target_size) / current_unique * 100):.1…
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:292:9: T201 `print` found
    |
290 | …     print(f"Current unique words: {current_unique:,}")
291 | …     print(f"Target size: {target_size:,}")
292 | …     print(f"Required reduction: {current_unique - target_size:,} words ({((current_unique - target_size) / current_unique * 100):.1…
    |       ^^^^^ T201
293 | …     
294 | …     print("Projected corpus sizes with different methods:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:294:9: T201 `print` found
    |
292 | …     print(f"Required reduction: {current_unique - target_size:,} words ({((current_unique - target_size) / current_unique * 100):.1…
293 | …     
294 | …     print("Projected corpus sizes with different methods:")
    |       ^^^^^ T201
295 | …     for method_name, result in method_results.items():
296 | …         reduction_rate = result['reduction_pct'] / 100
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:295:13: B007 Loop control variable `method_name` not used within loop body
    |
294 |         print("Projected corpus sizes with different methods:")
295 |         for method_name, result in method_results.items():
    |             ^^^^^^^^^^^ B007
296 |             reduction_rate = result['reduction_pct'] / 100
297 |             projected_size = int(current_unique * (1 - reduction_rate))
    |
    = help: Rename unused `method_name` to `_method_name`

scripts/analyze_corpus_optimization.py:295:36: PERF102 When using only the values of a dict use the `values()` method
    |
294 |         print("Projected corpus sizes with different methods:")
295 |         for method_name, result in method_results.items():
    |                                    ^^^^^^^^^^^^^^^^^^^^ PERF102
296 |             reduction_rate = result['reduction_pct'] / 100
297 |             projected_size = int(current_unique * (1 - reduction_rate))
    |
    = help: Replace `.items()` with `.values()`

scripts/analyze_corpus_optimization.py:296:37: Q000 [*] Single quotes found but double quotes preferred
    |
294 |         print("Projected corpus sizes with different methods:")
295 |         for method_name, result in method_results.items():
296 |             reduction_rate = result['reduction_pct'] / 100
    |                                     ^^^^^^^^^^^^^^^ Q000
297 |             projected_size = int(current_unique * (1 - reduction_rate))
298 |             print(f"  {result['method']}: ~{projected_size:,} words")
    |
    = help: Replace single quotes with double quotes

scripts/analyze_corpus_optimization.py:298:13: T201 `print` found
    |
296 |             reduction_rate = result['reduction_pct'] / 100
297 |             projected_size = int(current_unique * (1 - reduction_rate))
298 |             print(f"  {result['method']}: ~{projected_size:,} words")
    |             ^^^^^ T201
299 |             
300 |         # Recommendations
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:301:9: T201 `print` found
    |
300 |         # Recommendations
301 |         print(f"\n{'='*60}")
    |         ^^^^^ T201
302 |         print("RECOMMENDATIONS")
303 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:302:9: T201 `print` found
    |
300 |         # Recommendations
301 |         print(f"\n{'='*60}")
302 |         print("RECOMMENDATIONS")
    |         ^^^^^ T201
303 |         print(f"{'='*60}\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:303:9: T201 `print` found
    |
301 |         print(f"\n{'='*60}")
302 |         print("RECOMMENDATIONS")
303 |         print(f"{'='*60}\n")
    |         ^^^^^ T201
304 |         
305 |         print("1. HYBRID APPROACH (Recommended):")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:305:9: T201 `print` found
    |
303 |         print(f"{'='*60}\n")
304 |         
305 |         print("1. HYBRID APPROACH (Recommended):")
    |         ^^^^^ T201
306 |         print("   - Use WordNet lemmatization as primary method (conservative)")
307 |         print("   - Apply custom rules for common patterns not caught by lemmatizer")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:306:9: T201 `print` found
    |
305 |         print("1. HYBRID APPROACH (Recommended):")
306 |         print("   - Use WordNet lemmatization as primary method (conservative)")
    |         ^^^^^ T201
307 |         print("   - Apply custom rules for common patterns not caught by lemmatizer")
308 |         print("   - Maintain separate lists for:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:307:9: T201 `print` found
    |
305 |         print("1. HYBRID APPROACH (Recommended):")
306 |         print("   - Use WordNet lemmatization as primary method (conservative)")
307 |         print("   - Apply custom rules for common patterns not caught by lemmatizer")
    |         ^^^^^ T201
308 |         print("   - Maintain separate lists for:")
309 |         print("     * Irregular forms (go/went/gone)")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:308:9: T201 `print` found
    |
306 |         print("   - Use WordNet lemmatization as primary method (conservative)")
307 |         print("   - Apply custom rules for common patterns not caught by lemmatizer")
308 |         print("   - Maintain separate lists for:")
    |         ^^^^^ T201
309 |         print("     * Irregular forms (go/went/gone)")
310 |         print("     * Domain-specific terms")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:309:9: T201 `print` found
    |
307 |         print("   - Apply custom rules for common patterns not caught by lemmatizer")
308 |         print("   - Maintain separate lists for:")
309 |         print("     * Irregular forms (go/went/gone)")
    |         ^^^^^ T201
310 |         print("     * Domain-specific terms")
311 |         print("     * Proper nouns")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:310:9: T201 `print` found
    |
308 |         print("   - Maintain separate lists for:")
309 |         print("     * Irregular forms (go/went/gone)")
310 |         print("     * Domain-specific terms")
    |         ^^^^^ T201
311 |         print("     * Proper nouns")
312 |         print("     * Common abbreviations\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:311:9: T201 `print` found
    |
309 |         print("     * Irregular forms (go/went/gone)")
310 |         print("     * Domain-specific terms")
311 |         print("     * Proper nouns")
    |         ^^^^^ T201
312 |         print("     * Common abbreviations\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:312:9: T201 `print` found
    |
310 |         print("     * Domain-specific terms")
311 |         print("     * Proper nouns")
312 |         print("     * Common abbreviations\n")
    |         ^^^^^ T201
313 |         
314 |         print("2. IMPLEMENTATION TOOLS:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:314:9: T201 `print` found
    |
312 |         print("     * Common abbreviations\n")
313 |         
314 |         print("2. IMPLEMENTATION TOOLS:")
    |         ^^^^^ T201
315 |         print("   - Primary: NLTK with WordNet (most accurate for English)")
316 |         print("   - Secondary: spaCy (faster for batch processing)")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:315:9: T201 `print` found
    |
314 |         print("2. IMPLEMENTATION TOOLS:")
315 |         print("   - Primary: NLTK with WordNet (most accurate for English)")
    |         ^^^^^ T201
316 |         print("   - Secondary: spaCy (faster for batch processing)")
317 |         print("   - Fallback: Custom rule-based for edge cases\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:316:9: T201 `print` found
    |
314 |         print("2. IMPLEMENTATION TOOLS:")
315 |         print("   - Primary: NLTK with WordNet (most accurate for English)")
316 |         print("   - Secondary: spaCy (faster for batch processing)")
    |         ^^^^^ T201
317 |         print("   - Fallback: Custom rule-based for edge cases\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:317:9: T201 `print` found
    |
315 |         print("   - Primary: NLTK with WordNet (most accurate for English)")
316 |         print("   - Secondary: spaCy (faster for batch processing)")
317 |         print("   - Fallback: Custom rule-based for edge cases\n")
    |         ^^^^^ T201
318 |         
319 |         print("3. QUALITY CONTROL:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:319:9: T201 `print` found
    |
317 |         print("   - Fallback: Custom rule-based for edge cases\n")
318 |         
319 |         print("3. QUALITY CONTROL:")
    |         ^^^^^ T201
320 |         print("   - Create mapping file: inflected form -> base form")
321 |         print("   - Validate against frequency lists")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:320:9: T201 `print` found
    |
319 |         print("3. QUALITY CONTROL:")
320 |         print("   - Create mapping file: inflected form -> base form")
    |         ^^^^^ T201
321 |         print("   - Validate against frequency lists")
322 |         print("   - Test search functionality with both forms")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:321:9: T201 `print` found
    |
319 |         print("3. QUALITY CONTROL:")
320 |         print("   - Create mapping file: inflected form -> base form")
321 |         print("   - Validate against frequency lists")
    |         ^^^^^ T201
322 |         print("   - Test search functionality with both forms")
323 |         print("   - Maintain override list for exceptions\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:322:9: T201 `print` found
    |
320 |         print("   - Create mapping file: inflected form -> base form")
321 |         print("   - Validate against frequency lists")
322 |         print("   - Test search functionality with both forms")
    |         ^^^^^ T201
323 |         print("   - Maintain override list for exceptions\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:323:9: T201 `print` found
    |
321 |         print("   - Validate against frequency lists")
322 |         print("   - Test search functionality with both forms")
323 |         print("   - Maintain override list for exceptions\n")
    |         ^^^^^ T201
324 |         
325 |         print("4. EXPECTED OUTCOMES:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:325:9: T201 `print` found
    |
323 |         print("   - Maintain override list for exceptions\n")
324 |         
325 |         print("4. EXPECTED OUTCOMES:")
    |         ^^^^^ T201
326 |         print("   - Corpus reduction: 70-80% to ~55k base forms")
327 |         print("   - Search improvement: Fewer false negatives")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:326:9: T201 `print` found
    |
325 |         print("4. EXPECTED OUTCOMES:")
326 |         print("   - Corpus reduction: 70-80% to ~55k base forms")
    |         ^^^^^ T201
327 |         print("   - Search improvement: Fewer false negatives")
328 |         print("   - Memory usage: ~40% reduction")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:327:9: T201 `print` found
    |
325 |         print("4. EXPECTED OUTCOMES:")
326 |         print("   - Corpus reduction: 70-80% to ~55k base forms")
327 |         print("   - Search improvement: Fewer false negatives")
    |         ^^^^^ T201
328 |         print("   - Memory usage: ~40% reduction")
329 |         print("   - Lookup speed: 2-3x faster with smaller index\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:328:9: T201 `print` found
    |
326 |         print("   - Corpus reduction: 70-80% to ~55k base forms")
327 |         print("   - Search improvement: Fewer false negatives")
328 |         print("   - Memory usage: ~40% reduction")
    |         ^^^^^ T201
329 |         print("   - Lookup speed: 2-3x faster with smaller index\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:329:9: T201 `print` found
    |
327 |         print("   - Search improvement: Fewer false negatives")
328 |         print("   - Memory usage: ~40% reduction")
329 |         print("   - Lookup speed: 2-3x faster with smaller index\n")
    |         ^^^^^ T201
330 |         
331 |         print("5. IMPLEMENTATION PHASES:")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:331:9: T201 `print` found
    |
329 |         print("   - Lookup speed: 2-3x faster with smaller index\n")
330 |         
331 |         print("5. IMPLEMENTATION PHASES:")
    |         ^^^^^ T201
332 |         print("   Phase 1: Implement lemmatization pipeline")
333 |         print("   Phase 2: Build inflection mapping database")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:332:9: T201 `print` found
    |
331 |         print("5. IMPLEMENTATION PHASES:")
332 |         print("   Phase 1: Implement lemmatization pipeline")
    |         ^^^^^ T201
333 |         print("   Phase 2: Build inflection mapping database")
334 |         print("   Phase 3: Update search to use base forms")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:333:9: T201 `print` found
    |
331 |         print("5. IMPLEMENTATION PHASES:")
332 |         print("   Phase 1: Implement lemmatization pipeline")
333 |         print("   Phase 2: Build inflection mapping database")
    |         ^^^^^ T201
334 |         print("   Phase 3: Update search to use base forms")
335 |         print("   Phase 4: Add inflection expansion for queries")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:334:9: T201 `print` found
    |
332 |         print("   Phase 1: Implement lemmatization pipeline")
333 |         print("   Phase 2: Build inflection mapping database")
334 |         print("   Phase 3: Update search to use base forms")
    |         ^^^^^ T201
335 |         print("   Phase 4: Add inflection expansion for queries")
336 |         print("   Phase 5: Performance testing and optimization\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:335:9: T201 `print` found
    |
333 |         print("   Phase 2: Build inflection mapping database")
334 |         print("   Phase 3: Update search to use base forms")
335 |         print("   Phase 4: Add inflection expansion for queries")
    |         ^^^^^ T201
336 |         print("   Phase 5: Performance testing and optimization\n")
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:336:9: T201 `print` found
    |
334 |         print("   Phase 3: Update search to use base forms")
335 |         print("   Phase 4: Add inflection expansion for queries")
336 |         print("   Phase 5: Performance testing and optimization\n")
    |         ^^^^^ T201
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:344:9: T201 `print` found
    |
343 |     if not corpus_path.exists():
344 |         print(f"Error: Corpus file not found at {corpus_path}")
    |         ^^^^^ T201
345 |         exit(1)
    |
    = help: Remove `print`

scripts/analyze_corpus_optimization.py:345:9: PLR1722 Use `sys.exit()` instead of `exit`
    |
343 |     if not corpus_path.exists():
344 |         print(f"Error: Corpus file not found at {corpus_path}")
345 |         exit(1)
    |         ^^^^ PLR1722
346 |         
347 |     analyzer = CorpusAnalyzer()
    |
    = help: Replace `exit` with `sys.exit()`

scripts/apple_dict_cli.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env python3
  | ^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | """CLI for Apple Dictionary batch extraction operations."""
  |

scripts/apple_dict_cli.py:29:9: TRY300 Consider moving this statement to an `else` block
   |
27 |         await mongodb.connect()
28 |         console.print("[green]✓[/green] MongoDB connected successfully")
29 |         return mongodb
   |         ^^^^^^^^^^^^^^ TRY300
30 |     except Exception as e:
31 |         console.print(f"[yellow]⚠[/yellow] MongoDB connection failed: {e}")
   |

scripts/apple_dict_cli.py:39:5: PLC0415 `import` should be at the top-level of a file
   |
37 | def cli() -> None:
38 |     """Apple Dictionary batch extraction CLI for macOS."""
39 |     import platform
   |     ^^^^^^^^^^^^^^^ PLC0415
40 |     
41 |     if platform.system() != 'Darwin':
   |

scripts/apple_dict_cli.py:41:29: Q000 [*] Single quotes found but double quotes preferred
   |
39 |     import platform
40 |     
41 |     if platform.system() != 'Darwin':
   |                             ^^^^^^^^ Q000
42 |         console.print(f"[red]✗[/red] Apple Dictionary extraction requires macOS")
43 |         console.print(f"[red]✗[/red] Current platform: {platform.system()}")
   |
   = help: Replace single quotes with double quotes

scripts/apple_dict_cli.py:86:5: PLR0913 Too many arguments in function definition (7 > 5)
   |
84 |     help="Suppress progress output"
85 | )
86 | def extract(
   |     ^^^^^^^ PLR0913
87 |     word_list: Path | None,
88 |     output: Path | None,
   |

scripts/apple_dict_cli.py:260:13: PLC0415 `import` should be at the top-level of a file
    |
258 |     async def _info() -> None:
259 |         try:
260 |             from src.floridify.connectors.apple_dictionary import AppleDictionaryConnector
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
261 |             
262 |             connector = AppleDictionaryConnector()
    |

scripts/apple_dict_cli.py:320:27: Q000 [*] Single quotes found but double quotes preferred
    |
319 |     try:
320 |         with open(output, 'w', encoding='utf-8') as f:
    |                           ^^^ Q000
321 |             for word in sample_words:
322 |                 f.write(f"{word}\n")
    |
    = help: Replace single quotes with double quotes

scripts/apple_dict_cli.py:320:41: Q000 [*] Single quotes found but double quotes preferred
    |
319 |     try:
320 |         with open(output, 'w', encoding='utf-8') as f:
    |                                         ^^^^^^^ Q000
321 |             for word in sample_words:
322 |                 f.write(f"{word}\n")
    |
    = help: Replace single quotes with double quotes

scripts/apple_dict_cli.py:321:13: FURB122 [*] Use of `f.write` in a for loop
    |
319 |       try:
320 |           with open(output, 'w', encoding='utf-8') as f:
321 | /             for word in sample_words:
322 | |                 f.write(f"{word}\n")
    | |____________________________________^ FURB122
323 |           
324 |           console.print(f"[green]✓[/green] Created word list with {len(sample_words)} words: {output}")
    |
    = help: Replace with `f.writelines`

scripts/batch_cli.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env python3
  | ^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | """CLI for batch processing operations."""
  |

scripts/batch_cli.py:42:5: PIE790 [*] Unnecessary `pass` statement
   |
40 | def cli() -> None:
41 |     """Batch processing CLI for Floridify dictionary synthesis."""
42 |     pass
   |     ^^^^ PIE790
43 |
44 | @cli.command()
   |
   = help: Remove unnecessary `pass`

scripts/batch_cli.py:113:39: Q000 [*] Single quotes found but double quotes preferred
    |
111 |             # Get word corpus
112 |             words = []
113 |             if hasattr(search_engine, 'fuzzy_matcher') and search_engine.fuzzy_matcher:
    |                                       ^^^^^^^^^^^^^^^ Q000
114 |                 words.extend(search_engine.fuzzy_matcher.word_list)
    |
    = help: Replace single quotes with double quotes

scripts/batch_cli.py:116:39: Q000 [*] Single quotes found but double quotes preferred
    |
114 |                 words.extend(search_engine.fuzzy_matcher.word_list)
115 |             
116 |             if hasattr(search_engine, 'exact_matcher') and search_engine.exact_matcher:
    |                                       ^^^^^^^^^^^^^^^ Q000
117 |                 words.extend(search_engine.exact_matcher.word_dict.keys())
    |
    = help: Replace single quotes with double quotes

scripts/batch_cli.py:148:5: PIE790 [*] Unnecessary `pass` statement
    |
146 | def scheduler() -> None:
147 |     """Batch processing scheduler commands."""
148 |     pass
    |     ^^^^ PIE790
149 |
150 | @scheduler.command()
    |
    = help: Remove unnecessary `pass`

scripts/batch_cli.py:259:39: Q000 [*] Single quotes found but double quotes preferred
    |
257 |             # Get filtered word count
258 |             words = []
259 |             if hasattr(search_engine, 'fuzzy_matcher') and search_engine.fuzzy_matcher:
    |                                       ^^^^^^^^^^^^^^^ Q000
260 |                 words.extend(search_engine.fuzzy_matcher.word_list)
    |
    = help: Replace single quotes with double quotes

scripts/batch_cli.py:262:39: Q000 [*] Single quotes found but double quotes preferred
    |
260 |                 words.extend(search_engine.fuzzy_matcher.word_list)
261 |             
262 |             if hasattr(search_engine, 'exact_matcher') and search_engine.exact_matcher:
    |                                       ^^^^^^^^^^^^^^^ Q000
263 |                 words.extend(search_engine.exact_matcher.word_dict.keys())
    |
    = help: Replace single quotes with double quotes

scripts/batch_cli.py:282:13: PLC0415 `import` should be at the top-level of a file
    |
280 |             console.print("(Based on OpenAI Batch API pricing with 50% discount)")
281 |             
282 |             from rich.table import Table
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
283 |             table = Table()
284 |             table.add_column("Scenario", style="cyan")
    |

scripts/batch_synthesis.py:57:9: ANN204 Missing return type annotation for special method `__init__`
   |
55 |     """Manages checkpoint state for batch synthesis."""
56 |     
57 |     def __init__(self, checkpoint_file: Path):
   |         ^^^^^^^^ ANN204
58 |         self.checkpoint_file = checkpoint_file
59 |         self.processed_words: set[str] = set()
   |
   = help: Add return type annotation: `None`

scripts/batch_synthesis.py:70:49: Q000 [*] Single quotes found but double quotes preferred
   |
68 |         if self.checkpoint_file.exists():
69 |             try:
70 |                 with open(self.checkpoint_file, 'r') as f:
   |                                                 ^^^ Q000
71 |                     data = json.load(f)
72 |                     self.processed_words = set(data.get('processed_words', []))
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:70:49: UP015 [*] Unnecessary mode argument
   |
68 |         if self.checkpoint_file.exists():
69 |             try:
70 |                 with open(self.checkpoint_file, 'r') as f:
   |                                                 ^^^ UP015
71 |                     data = json.load(f)
72 |                     self.processed_words = set(data.get('processed_words', []))
   |
   = help: Remove mode argument

scripts/batch_synthesis.py:72:57: Q000 [*] Single quotes found but double quotes preferred
   |
70 |                 with open(self.checkpoint_file, 'r') as f:
71 |                     data = json.load(f)
72 |                     self.processed_words = set(data.get('processed_words', []))
   |                                                         ^^^^^^^^^^^^^^^^^ Q000
73 |                     self.failed_words = data.get('failed_words', {})
74 |                     self.start_time = data.get('start_time', time.time())
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:73:50: Q000 [*] Single quotes found but double quotes preferred
   |
71 |                     data = json.load(f)
72 |                     self.processed_words = set(data.get('processed_words', []))
73 |                     self.failed_words = data.get('failed_words', {})
   |                                                  ^^^^^^^^^^^^^^ Q000
74 |                     self.start_time = data.get('start_time', time.time())
75 |                     self.total_cost = data.get('total_cost', 0.0)
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:74:48: Q000 [*] Single quotes found but double quotes preferred
   |
72 |                     self.processed_words = set(data.get('processed_words', []))
73 |                     self.failed_words = data.get('failed_words', {})
74 |                     self.start_time = data.get('start_time', time.time())
   |                                                ^^^^^^^^^^^^ Q000
75 |                     self.total_cost = data.get('total_cost', 0.0)
76 |                     self.total_tokens = data.get('total_tokens', 0)
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:75:48: Q000 [*] Single quotes found but double quotes preferred
   |
73 |                     self.failed_words = data.get('failed_words', {})
74 |                     self.start_time = data.get('start_time', time.time())
75 |                     self.total_cost = data.get('total_cost', 0.0)
   |                                                ^^^^^^^^^^^^ Q000
76 |                     self.total_tokens = data.get('total_tokens', 0)
77 |                     console.print(f"[green]✅ Loaded checkpoint with {len(self.processed_words)} processed words[/green]")
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:76:50: Q000 [*] Single quotes found but double quotes preferred
   |
74 |                     self.start_time = data.get('start_time', time.time())
75 |                     self.total_cost = data.get('total_cost', 0.0)
76 |                     self.total_tokens = data.get('total_tokens', 0)
   |                                                  ^^^^^^^^^^^^^^ Q000
77 |                     console.print(f"[green]✅ Loaded checkpoint with {len(self.processed_words)} processed words[/green]")
78 |             except Exception as e:
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:85:17: Q000 [*] Single quotes found but double quotes preferred
   |
83 |         try:
84 |             data = {
85 |                 'processed_words': list(self.processed_words),
   |                 ^^^^^^^^^^^^^^^^^ Q000
86 |                 'failed_words': self.failed_words,
87 |                 'start_time': self.start_time,
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:86:17: Q000 [*] Single quotes found but double quotes preferred
   |
84 |             data = {
85 |                 'processed_words': list(self.processed_words),
86 |                 'failed_words': self.failed_words,
   |                 ^^^^^^^^^^^^^^ Q000
87 |                 'start_time': self.start_time,
88 |                 'total_cost': self.total_cost,
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:87:17: Q000 [*] Single quotes found but double quotes preferred
   |
85 |                 'processed_words': list(self.processed_words),
86 |                 'failed_words': self.failed_words,
87 |                 'start_time': self.start_time,
   |                 ^^^^^^^^^^^^ Q000
88 |                 'total_cost': self.total_cost,
89 |                 'total_tokens': self.total_tokens,
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:88:17: Q000 [*] Single quotes found but double quotes preferred
   |
86 |                 'failed_words': self.failed_words,
87 |                 'start_time': self.start_time,
88 |                 'total_cost': self.total_cost,
   |                 ^^^^^^^^^^^^ Q000
89 |                 'total_tokens': self.total_tokens,
90 |                 'timestamp': datetime.now().isoformat()
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:89:17: Q000 [*] Single quotes found but double quotes preferred
   |
87 |                 'start_time': self.start_time,
88 |                 'total_cost': self.total_cost,
89 |                 'total_tokens': self.total_tokens,
   |                 ^^^^^^^^^^^^^^ Q000
90 |                 'timestamp': datetime.now().isoformat()
91 |             }
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:90:17: Q000 [*] Single quotes found but double quotes preferred
   |
88 |                 'total_cost': self.total_cost,
89 |                 'total_tokens': self.total_tokens,
90 |                 'timestamp': datetime.now().isoformat()
   |                 ^^^^^^^^^^^ Q000
91 |             }
92 |             with open(self.checkpoint_file, 'w') as f:
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:90:30: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
88 |                 'total_cost': self.total_cost,
89 |                 'total_tokens': self.total_tokens,
90 |                 'timestamp': datetime.now().isoformat()
   |                              ^^^^^^^^^^^^^^ DTZ005
91 |             }
92 |             with open(self.checkpoint_file, 'w') as f:
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/batch_synthesis.py:92:45: Q000 [*] Single quotes found but double quotes preferred
   |
90 |                 'timestamp': datetime.now().isoformat()
91 |             }
92 |             with open(self.checkpoint_file, 'w') as f:
   |                                             ^^^ Q000
93 |                 json.dump(data, f, indent=2)
94 |         except Exception as e:
   |
   = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:118:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `frame`
    |
118 | def signal_handler(signum: int, frame: Any) -> None:
    |                                        ^^^ ANN401
119 |     """Handle shutdown signals gracefully."""
120 |     global SHUTDOWN_REQUESTED
    |

scripts/batch_synthesis.py:120:12: PLW0603 Using the global statement to update `SHUTDOWN_REQUESTED` is discouraged
    |
118 | def signal_handler(signum: int, frame: Any) -> None:
119 |     """Handle shutdown signals gracefully."""
120 |     global SHUTDOWN_REQUESTED
    |            ^^^^^^^^^^^^^^^^^^ PLW0603
121 |     SHUTDOWN_REQUESTED = True
122 |     console.print("\n[yellow]⚠️  Shutdown requested. Finishing current batch...[/yellow]")
    |

scripts/batch_synthesis.py:145:9: Q000 [*] Single quotes found but double quotes preferred
    |
144 |     return {
145 |         'regular_cost': regular_cost,
    |         ^^^^^^^^^^^^^^ Q000
146 |         'batch_cost': batch_cost,
147 |         'savings': regular_cost - batch_cost,
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:146:9: Q000 [*] Single quotes found but double quotes preferred
    |
144 |     return {
145 |         'regular_cost': regular_cost,
146 |         'batch_cost': batch_cost,
    |         ^^^^^^^^^^^^ Q000
147 |         'savings': regular_cost - batch_cost,
148 |         'estimated_tokens': int(total_input_tokens + total_output_tokens)
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:147:9: Q000 [*] Single quotes found but double quotes preferred
    |
145 |         'regular_cost': regular_cost,
146 |         'batch_cost': batch_cost,
147 |         'savings': regular_cost - batch_cost,
    |         ^^^^^^^^^ Q000
148 |         'estimated_tokens': int(total_input_tokens + total_output_tokens)
149 |     }
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:148:9: Q000 [*] Single quotes found but double quotes preferred
    |
146 |         'batch_cost': batch_cost,
147 |         'savings': regular_cost - batch_cost,
148 |         'estimated_tokens': int(total_input_tokens + total_output_tokens)
    |         ^^^^^^^^^^^^^^^^^^ Q000
149 |     }
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:185:14: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `task_id`
    |
183 |     state: BatchSynthesisState,
184 |     progress: Progress,
185 |     task_id: Any
    |              ^^^ ANN401
186 | ) -> None:
187 |     """Process a batch of words with synthesis."""
    |

scripts/batch_synthesis.py:209:59: Q000 [*] Single quotes found but double quotes preferred
    |
207 |             )
208 |             
209 |             if not lookup_result or not lookup_result.get('providers_data'):
    |                                                           ^^^^^^^^^^^^^^^^ Q000
210 |                 logger.warning(f"No provider data found for '{word}'")
211 |                 state.mark_failed(word, "No provider data")
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:210:32: G004 Logging statement uses f-string
    |
209 |             if not lookup_result or not lookup_result.get('providers_data'):
210 |                 logger.warning(f"No provider data found for '{word}'")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
211 |                 state.mark_failed(word, "No provider data")
212 |                 progress.advance(task_id)
    |

scripts/batch_synthesis.py:216:44: Q000 [*] Single quotes found but double quotes preferred
    |
215 |             # Get providers data
216 |             providers_data = lookup_result['providers_data']
    |                                            ^^^^^^^^^^^^^^^^ Q000
217 |             
218 |             # Use batch synthesis method
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:235:30: G004 Logging statement uses f-string
    |
233 |             else:
234 |                 state.mark_failed(word, "Synthesis returned None")
235 |                 logger.error(f"❌ Failed to synthesize '{word}'")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
236 |             
237 |         except Exception as e:
    |

scripts/batch_synthesis.py:240:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
238 |             error_msg = str(e)
239 |             state.mark_failed(word, error_msg)
240 |             logger.error(f"❌ Error processing '{word}': {error_msg}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
241 |         
242 |         finally:
    |
    = help: Replace with `exception`

scripts/batch_synthesis.py:240:26: G004 Logging statement uses f-string
    |
238 |             error_msg = str(e)
239 |             state.mark_failed(word, error_msg)
240 |             logger.error(f"❌ Error processing '{word}': {error_msg}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
241 |         
242 |         finally:
    |

scripts/batch_synthesis.py:247:5: ANN201 Missing return type annotation for public function `main`
    |
246 | @app.command()
247 | def main(
    |     ^^^^ ANN201
248 |     input_file: Path = typer.Argument(
249 |         ..., 
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis.py:248:24: B008 Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
246 |   @app.command()
247 |   def main(
248 |       input_file: Path = typer.Argument(
    |  ________________________^
249 | |         ..., 
250 | |         help="Text file containing words to process (one per line)"
251 | |     ),
    | |_____^ B008
252 |       checkpoint_file: Path = typer.Option(
253 |           Path("batch_synthesis_checkpoint.json"),
    |

scripts/batch_synthesis.py:252:29: B008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
250 |           help="Text file containing words to process (one per line)"
251 |       ),
252 |       checkpoint_file: Path = typer.Option(
    |  _____________________________^
253 | |         Path("batch_synthesis_checkpoint.json"),
254 | |         "--checkpoint", "-c",
255 | |         help="Checkpoint file for resume functionality"
256 | |     ),
    | |_____^ B008
257 |       batch_size: int = typer.Option(
258 |           10,
    |

scripts/batch_synthesis.py:279:27: Q000 [*] Single quotes found but double quotes preferred
    |
277 |         raise typer.Exit(1)
278 |     
279 |     with open(input_file, 'r') as f:
    |                           ^^^ Q000
280 |         all_words = [line.strip() for line in f if line.strip()]
    |
    = help: Replace single quotes with double quotes

scripts/batch_synthesis.py:279:27: UP015 [*] Unnecessary mode argument
    |
277 |         raise typer.Exit(1)
278 |     
279 |     with open(input_file, 'r') as f:
    |                           ^^^ UP015
280 |         all_words = [line.strip() for line in f if line.strip()]
    |
    = help: Remove mode argument

scripts/batch_synthesis.py:368:38: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
366 |         for word, error in list(state.failed_words.items())[:10]:
367 |             console.print(f"  • {word}: {error}")
368 |         if len(state.failed_words) > 10:
    |                                      ^^ PLR2004
369 |             console.print(f"  ... and {len(state.failed_words) - 10} more")
    |

scripts/batch_synthesis_enhanced.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env python3
  | ^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | """Enhanced batch synthesis script for processing entire word corpus with OpenAI Batch API."""
  |

scripts/batch_synthesis_enhanced.py:12:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
10 | from datetime import datetime, timedelta
11 | from pathlib import Path
12 | from typing import Any, Dict, List, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | from rich.console import Console
   |

scripts/batch_synthesis_enhanced.py:12:1: UP035 `typing.List` is deprecated, use `list` instead
   |
10 | from datetime import datetime, timedelta
11 | from pathlib import Path
12 | from typing import Any, Dict, List, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | from rich.console import Console
   |

scripts/batch_synthesis_enhanced.py:12:1: UP035 `typing.Set` is deprecated, use `set` instead
   |
10 | from datetime import datetime, timedelta
11 | from pathlib import Path
12 | from typing import Any, Dict, List, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 |
14 | from rich.console import Console
   |

scripts/batch_synthesis_enhanced.py:65:19: UP006 [*] Use `list` instead of `List` for type annotation
   |
63 |     total_batches: int = 0
64 |     
65 |     failed_words: List[Dict[str, str]] = field(default_factory=list)
   |                   ^^^^ UP006
66 |     current_status: str = "Initializing"
   |
   = help: Replace with `list`

scripts/batch_synthesis_enhanced.py:65:24: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
63 |     total_batches: int = 0
64 |     
65 |     failed_words: List[Dict[str, str]] = field(default_factory=list)
   |                        ^^^^ UP006
66 |     current_status: str = "Initializing"
   |
   = help: Replace with `dict`

scripts/batch_synthesis_enhanced.py:76:20: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
74 |     @property
75 |     def words_per_minute(self) -> float:
76 |         elapsed = (datetime.now() - self.start_time).total_seconds() / 60
   |                    ^^^^^^^^^^^^^^ DTZ005
77 |         if elapsed > 0:
78 |             return self.words_processed / elapsed
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/batch_synthesis_enhanced.py:82:43: UP045 [*] Use `X | None` for type annotations
   |
81 |     @property
82 |     def estimated_time_remaining(self) -> Optional[timedelta]:
   |                                           ^^^^^^^^^^^^^^^^^^^ UP045
83 |         if self.words_per_minute > 0 and self.words_processed < self.total_words:
84 |             remaining = self.total_words - self.words_processed
   |
   = help: Convert to `X | None`

scripts/batch_synthesis_enhanced.py:99:22: UP006 [*] Use `set` instead of `Set` for type annotation
    |
 97 | class Checkpoint:
 98 |     """Checkpoint data for recovery."""
 99 |     processed_words: Set[str]
    |                      ^^^ UP006
100 |     failed_words: List[Dict[str, str]]
101 |     metrics: BatchMetrics
    |
    = help: Replace with `set`

scripts/batch_synthesis_enhanced.py:100:19: UP006 [*] Use `list` instead of `List` for type annotation
    |
 98 |     """Checkpoint data for recovery."""
 99 |     processed_words: Set[str]
100 |     failed_words: List[Dict[str, str]]
    |                   ^^^^ UP006
101 |     metrics: BatchMetrics
102 |     last_position: int
    |
    = help: Replace with `list`

scripts/batch_synthesis_enhanced.py:100:24: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
 98 |     """Checkpoint data for recovery."""
 99 |     processed_words: Set[str]
100 |     failed_words: List[Dict[str, str]]
    |                        ^^^^ UP006
101 |     metrics: BatchMetrics
102 |     last_position: int
    |
    = help: Replace with `dict`

scripts/batch_synthesis_enhanced.py:109:9: ANN204 Missing return type annotation for special method `__init__`
    |
107 |     """Enhanced batch processor with checkpoint recovery and monitoring."""
108 |     
109 |     def __init__(
    |         ^^^^^^^^ ANN204
110 |         self,
111 |         words_file: Path,
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis_enhanced.py:124:31: UP006 [*] Use `set` instead of `Set` for type annotation
    |
123 |         self.metrics = BatchMetrics()
124 |         self.processed_words: Set[str] = set()
    |                               ^^^ UP006
125 |         self.shutdown_requested = False
    |
    = help: Replace with `set`

scripts/batch_synthesis_enhanced.py:131:9: ANN202 Missing return type annotation for private function `_handle_shutdown`
    |
129 |         signal.signal(signal.SIGTERM, self._handle_shutdown)
130 |     
131 |     def _handle_shutdown(self, signum, frame):
    |         ^^^^^^^^^^^^^^^^ ANN202
132 |         """Handle graceful shutdown."""
133 |         console.print("\n[yellow]Shutdown requested. Finishing current batch...[/yellow]")
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis_enhanced.py:131:32: ANN001 Missing type annotation for function argument `signum`
    |
129 |         signal.signal(signal.SIGTERM, self._handle_shutdown)
130 |     
131 |     def _handle_shutdown(self, signum, frame):
    |                                ^^^^^^ ANN001
132 |         """Handle graceful shutdown."""
133 |         console.print("\n[yellow]Shutdown requested. Finishing current batch...[/yellow]")
    |

scripts/batch_synthesis_enhanced.py:131:40: ANN001 Missing type annotation for function argument `frame`
    |
129 |         signal.signal(signal.SIGTERM, self._handle_shutdown)
130 |     
131 |     def _handle_shutdown(self, signum, frame):
    |                                        ^^^^^ ANN001
132 |         """Handle graceful shutdown."""
133 |         console.print("\n[yellow]Shutdown requested. Finishing current batch...[/yellow]")
    |

scripts/batch_synthesis_enhanced.py:136:40: UP045 [*] Use `X | None` for type annotations
    |
134 |         self.shutdown_requested = True
135 |     
136 |     async def load_checkpoint(self) -> Optional[int]:
    |                                        ^^^^^^^^^^^^^ UP045
137 |         """Load checkpoint if exists."""
138 |         if self.checkpoint_file.exists():
    |
    = help: Convert to `X | None`

scripts/batch_synthesis_enhanced.py:140:49: UP015 [*] Unnecessary mode argument
    |
138 |         if self.checkpoint_file.exists():
139 |             try:
140 |                 with open(self.checkpoint_file, "r") as f:
    |                                                 ^^^ UP015
141 |                     data = json.load(f)
    |
    = help: Remove mode argument

scripts/batch_synthesis_enhanced.py:159:15: ANN201 Missing return type annotation for public function `save_checkpoint`
    |
157 |         return 0
158 |     
159 |     async def save_checkpoint(self, position: int):
    |               ^^^^^^^^^^^^^^^ ANN201
160 |         """Save current progress to checkpoint."""
161 |         checkpoint_data = {
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis_enhanced.py:171:26: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
169 |             },
170 |             "last_position": position,
171 |             "timestamp": datetime.now().isoformat(),
    |                          ^^^^^^^^^^^^^^ DTZ005
172 |         }
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/batch_synthesis_enhanced.py:177:35: UP006 [*] Use `list` instead of `List` for type annotation
    |
175 |             json.dump(checkpoint_data, f, indent=2)
176 |     
177 |     async def load_words(self) -> List[str]:
    |                                   ^^^^ UP006
178 |         """Load words from file, skipping already processed."""
179 |         with open(self.words_file, "r") as f:
    |
    = help: Replace with `list`

scripts/batch_synthesis_enhanced.py:179:36: UP015 [*] Unnecessary mode argument
    |
177 |     async def load_words(self) -> List[str]:
178 |         """Load words from file, skipping already processed."""
179 |         with open(self.words_file, "r") as f:
    |                                    ^^^ UP015
180 |             all_words = [line.strip() for line in f if line.strip()]
    |
    = help: Remove mode argument

scripts/batch_synthesis_enhanced.py:203:42: UP006 [*] Use `list` instead of `List` for type annotation
    |
201 |         return input_cost + output_cost
202 |     
203 |     async def process_batch(self, words: List[str]) -> Dict[str, Any]:
    |                                          ^^^^ UP006
204 |         """Process a batch of words using the AI synthesis pipeline."""
205 |         results = {"successful": [], "failed": []}
    |
    = help: Replace with `list`

scripts/batch_synthesis_enhanced.py:203:56: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
201 |         return input_cost + output_cost
202 |     
203 |     async def process_batch(self, words: List[str]) -> Dict[str, Any]:
    |                                                        ^^^^ UP006
204 |         """Process a batch of words using the AI synthesis pipeline."""
205 |         results = {"successful": [], "failed": []}
    |
    = help: Replace with `dict`

scripts/batch_synthesis_enhanced.py:291:59: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
289 |         cost_table.add_column("Value", justify="right")
290 |         
291 |         cost_color = "red" if self.metrics.current_cost > 100 else "green"
    |                                                           ^^^ PLR2004
292 |         cost_table.add_row("Current Cost:", f"[{cost_color}]${self.metrics.current_cost:.2f}[/{cost_color}]")
293 |         cost_table.add_row("Est. Total Cost:", f"${self.metrics.estimated_total_cost:.2f}")
    |

scripts/batch_synthesis_enhanced.py:313:63: PLR2004 Magic value used in comparison, consider replacing `95` with a constant variable
    |
312 |         # Status
313 |         status_color = "green" if self.metrics.success_rate > 95 else "yellow"
    |                                                               ^^ PLR2004
314 |         status_table = Table(show_header=False, box=None, padding=(0, 1))
315 |         status_table.add_column("", style="dim")
    |

scripts/batch_synthesis_enhanced.py:335:15: ANN201 Missing return type annotation for public function `run`
    |
333 |         )
334 |     
335 |     async def run(self):
    |               ^^^ ANN201
336 |         """Run the batch processing with monitoring."""
337 |         # Load checkpoint
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis_enhanced.py:458:9: ANN201 Missing return type annotation for public function `display_summary`
    |
456 |         self.display_summary()
457 |     
458 |     def display_summary(self):
    |         ^^^^^^^^^^^^^^^ ANN201
459 |         """Display final summary."""
460 |         summary = Table(title="Batch Processing Summary", show_header=True)
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis_enhanced.py:471:19: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
469 |         summary.add_row("Average Cost/Word", f"${self.metrics.cost_per_word:.4f}")
470 |         
471 |         elapsed = datetime.now() - self.metrics.start_time
    |                   ^^^^^^^^^^^^^^ DTZ005
472 |         hours = int(elapsed.total_seconds() // 3600)
473 |         minutes = int((elapsed.total_seconds() % 3600) // 60)
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

scripts/batch_synthesis_enhanced.py:483:11: ANN201 Missing return type annotation for public function `main`
    |
483 | async def main():
    |           ^^^^ ANN201
484 |     """Main entry point."""
485 |     import argparse
    |
    = help: Add return type annotation: `None`

scripts/batch_synthesis_enhanced.py:485:5: PLC0415 `import` should be at the top-level of a file
    |
483 | async def main():
484 |     """Main entry point."""
485 |     import argparse
    |     ^^^^^^^^^^^^^^^ PLC0415
486 |     
487 |     parser = argparse.ArgumentParser(
    |

scripts/corpus_optimization_report.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env python3
  | ^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | """
3 | Corpus Optimization Report for Floridify English Dictionary Project
  |

scripts/corpus_optimization_report.py:11:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
 9 | from pathlib import Path
10 | from collections import Counter, defaultdict
11 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | import json
   |

scripts/corpus_optimization_report.py:11:1: UP035 `typing.List` is deprecated, use `list` instead
   |
 9 | from pathlib import Path
10 | from collections import Counter, defaultdict
11 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | import json
   |

scripts/corpus_optimization_report.py:11:1: UP035 `typing.Set` is deprecated, use `set` instead
   |
 9 | from pathlib import Path
10 | from collections import Counter, defaultdict
11 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | import json
   |

scripts/corpus_optimization_report.py:11:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
 9 | from pathlib import Path
10 | from collections import Counter, defaultdict
11 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | import json
   |

scripts/corpus_optimization_report.py:15:37: UP006 [*] Use `list` instead of `List` for type annotation
   |
15 | def load_corpus(file_path: Path) -> List[str]:
   |                                     ^^^^ UP006
16 |     """Load words from corpus file."""
17 |     with open(file_path, 'r', encoding='utf-8') as f:
   |
   = help: Replace with `list`

scripts/corpus_optimization_report.py:17:26: Q000 [*] Single quotes found but double quotes preferred
   |
15 | def load_corpus(file_path: Path) -> List[str]:
16 |     """Load words from corpus file."""
17 |     with open(file_path, 'r', encoding='utf-8') as f:
   |                          ^^^ Q000
18 |         return [line.strip().lower() for line in f if line.strip()]
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:17:26: UP015 [*] Unnecessary mode argument
   |
15 | def load_corpus(file_path: Path) -> List[str]:
16 |     """Load words from corpus file."""
17 |     with open(file_path, 'r', encoding='utf-8') as f:
   |                          ^^^ UP015
18 |         return [line.strip().lower() for line in f if line.strip()]
   |
   = help: Remove mode argument

scripts/corpus_optimization_report.py:17:40: Q000 [*] Single quotes found but double quotes preferred
   |
15 | def load_corpus(file_path: Path) -> List[str]:
16 |     """Load words from corpus file."""
17 |     with open(file_path, 'r', encoding='utf-8') as f:
   |                                        ^^^^^^^ Q000
18 |         return [line.strip().lower() for line in f if line.strip()]
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:21:27: UP006 [*] Use `list` instead of `List` for type annotation
   |
21 | def analyze_corpus(words: List[str]) -> Dict:
   |                           ^^^^ UP006
22 |     """Comprehensive corpus analysis."""
23 |     analysis = {
   |
   = help: Replace with `list`

scripts/corpus_optimization_report.py:21:41: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
21 | def analyze_corpus(words: List[str]) -> Dict:
   |                                         ^^^^ UP006
22 |     """Comprehensive corpus analysis."""
23 |     analysis = {
   |
   = help: Replace with `dict`

scripts/corpus_optimization_report.py:24:9: Q000 [*] Single quotes found but double quotes preferred
   |
22 |     """Comprehensive corpus analysis."""
23 |     analysis = {
24 |         'total_words': len(words),
   |         ^^^^^^^^^^^^^ Q000
25 |         'unique_words': len(set(words)),
26 |         'length_distribution': Counter(),
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:25:9: Q000 [*] Single quotes found but double quotes preferred
   |
23 |     analysis = {
24 |         'total_words': len(words),
25 |         'unique_words': len(set(words)),
   |         ^^^^^^^^^^^^^^ Q000
26 |         'length_distribution': Counter(),
27 |         'common_endings': Counter(),
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:26:9: Q000 [*] Single quotes found but double quotes preferred
   |
24 |         'total_words': len(words),
25 |         'unique_words': len(set(words)),
26 |         'length_distribution': Counter(),
   |         ^^^^^^^^^^^^^^^^^^^^^ Q000
27 |         'common_endings': Counter(),
28 |         'potential_inflections': defaultdict(list)
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:27:9: Q000 [*] Single quotes found but double quotes preferred
   |
25 |         'unique_words': len(set(words)),
26 |         'length_distribution': Counter(),
27 |         'common_endings': Counter(),
   |         ^^^^^^^^^^^^^^^^ Q000
28 |         'potential_inflections': defaultdict(list)
29 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:28:9: Q000 [*] Single quotes found but double quotes preferred
   |
26 |         'length_distribution': Counter(),
27 |         'common_endings': Counter(),
28 |         'potential_inflections': defaultdict(list)
   |         ^^^^^^^^^^^^^^^^^^^^^^^ Q000
29 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:33:18: Q000 [*] Single quotes found but double quotes preferred
   |
31 |     # Analyze word characteristics
32 |     for word in words:
33 |         analysis['length_distribution'][len(word)] += 1
   |                  ^^^^^^^^^^^^^^^^^^^^^ Q000
34 |         
35 |         # Check common endings (3+ chars)
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:36:25: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
   |
35 |         # Check common endings (3+ chars)
36 |         if len(word) >= 4:
   |                         ^ PLR2004
37 |             analysis['common_endings'][word[-3:]] += 1
38 |         if len(word) >= 5:
   |

scripts/corpus_optimization_report.py:37:22: Q000 [*] Single quotes found but double quotes preferred
   |
35 |         # Check common endings (3+ chars)
36 |         if len(word) >= 4:
37 |             analysis['common_endings'][word[-3:]] += 1
   |                      ^^^^^^^^^^^^^^^^ Q000
38 |         if len(word) >= 5:
39 |             analysis['common_endings'][word[-4:]] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:38:25: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
   |
36 |         if len(word) >= 4:
37 |             analysis['common_endings'][word[-3:]] += 1
38 |         if len(word) >= 5:
   |                         ^ PLR2004
39 |             analysis['common_endings'][word[-4:]] += 1
   |

scripts/corpus_optimization_report.py:39:22: Q000 [*] Single quotes found but double quotes preferred
   |
37 |             analysis['common_endings'][word[-3:]] += 1
38 |         if len(word) >= 5:
39 |             analysis['common_endings'][word[-4:]] += 1
   |                      ^^^^^^^^^^^^^^^^ Q000
40 |             
41 |     # Find potential base-inflection relationships
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:21: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                     ^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:26: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                          ^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:32: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                ^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:38: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                      ^^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:45: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                             ^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:51: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                                   ^^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:58: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                                          ^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:64: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                                                ^^^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:45:72: Q000 [*] Single quotes found but double quotes preferred
   |
43 |     for word in words:
44 |         # Check if removing common suffixes yields another word
45 |         suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment']
   |                                                                        ^^^^^^ Q000
46 |         for suffix in suffixes:
47 |             if word.endswith(suffix) and len(word) > len(suffix) + 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:50:30: Q000 [*] Single quotes found but double quotes preferred
   |
48 |                 potential_base = word[:-len(suffix)]
49 |                 if potential_base in word_set:
50 |                     analysis['potential_inflections'][potential_base].append((word, suffix))
   |                              ^^^^^^^^^^^^^^^^^^^^^^^ Q000
51 |                     
52 |     return analysis
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:55:48: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
55 | def calculate_optimization_potential(analysis: Dict) -> Dict:
   |                                                ^^^^ UP006
56 |     """Calculate potential corpus reduction using different strategies."""
57 |     total_words = analysis['unique_words']
   |
   = help: Replace with `dict`

scripts/corpus_optimization_report.py:55:57: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
55 | def calculate_optimization_potential(analysis: Dict) -> Dict:
   |                                                         ^^^^ UP006
56 |     """Calculate potential corpus reduction using different strategies."""
57 |     total_words = analysis['unique_words']
   |
   = help: Replace with `dict`

scripts/corpus_optimization_report.py:57:28: Q000 [*] Single quotes found but double quotes preferred
   |
55 | def calculate_optimization_potential(analysis: Dict) -> Dict:
56 |     """Calculate potential corpus reduction using different strategies."""
57 |     total_words = analysis['unique_words']
   |                            ^^^^^^^^^^^^^^ Q000
58 |     
59 |     strategies = {}
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:62:72: Q000 [*] Single quotes found but double quotes preferred
   |
61 |     # Strategy 1: Simple suffix removal
62 |     inflected_count = sum(len(inflections) for inflections in analysis['potential_inflections'].values())
   |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^ Q000
63 |     strategies['simple_suffix'] = {
64 |         'description': 'Remove words that are clear inflections of base forms',
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:63:16: Q000 [*] Single quotes found but double quotes preferred
   |
61 |     # Strategy 1: Simple suffix removal
62 |     inflected_count = sum(len(inflections) for inflections in analysis['potential_inflections'].values())
63 |     strategies['simple_suffix'] = {
   |                ^^^^^^^^^^^^^^^ Q000
64 |         'description': 'Remove words that are clear inflections of base forms',
65 |         'estimated_reduction': inflected_count,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:64:9: Q000 [*] Single quotes found but double quotes preferred
   |
62 |     inflected_count = sum(len(inflections) for inflections in analysis['potential_inflections'].values())
63 |     strategies['simple_suffix'] = {
64 |         'description': 'Remove words that are clear inflections of base forms',
   |         ^^^^^^^^^^^^^ Q000
65 |         'estimated_reduction': inflected_count,
66 |         'estimated_final_size': total_words - inflected_count,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:64:24: Q000 [*] Single quotes found but double quotes preferred
   |
62 |     inflected_count = sum(len(inflections) for inflections in analysis['potential_inflections'].values())
63 |     strategies['simple_suffix'] = {
64 |         'description': 'Remove words that are clear inflections of base forms',
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
65 |         'estimated_reduction': inflected_count,
66 |         'estimated_final_size': total_words - inflected_count,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:65:9: Q000 [*] Single quotes found but double quotes preferred
   |
63 |     strategies['simple_suffix'] = {
64 |         'description': 'Remove words that are clear inflections of base forms',
65 |         'estimated_reduction': inflected_count,
   |         ^^^^^^^^^^^^^^^^^^^^^ Q000
66 |         'estimated_final_size': total_words - inflected_count,
67 |         'reduction_percentage': (inflected_count / total_words) * 100
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:66:9: Q000 [*] Single quotes found but double quotes preferred
   |
64 |         'description': 'Remove words that are clear inflections of base forms',
65 |         'estimated_reduction': inflected_count,
66 |         'estimated_final_size': total_words - inflected_count,
   |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
67 |         'reduction_percentage': (inflected_count / total_words) * 100
68 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:67:9: Q000 [*] Single quotes found but double quotes preferred
   |
65 |         'estimated_reduction': inflected_count,
66 |         'estimated_final_size': total_words - inflected_count,
67 |         'reduction_percentage': (inflected_count / total_words) * 100
   |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
68 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:73:16: Q000 [*] Single quotes found but double quotes preferred
   |
71 |     # Based on linguistic studies, English has roughly 70-80% inflected forms
72 |     aggressive_base_estimate = int(total_words * 0.25)  # 25% are base forms
73 |     strategies['aggressive_lemmatization'] = {
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
74 |         'description': 'Full lemmatization with all inflections mapped to base forms',
75 |         'estimated_reduction': total_words - aggressive_base_estimate,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:74:9: Q000 [*] Single quotes found but double quotes preferred
   |
72 |     aggressive_base_estimate = int(total_words * 0.25)  # 25% are base forms
73 |     strategies['aggressive_lemmatization'] = {
74 |         'description': 'Full lemmatization with all inflections mapped to base forms',
   |         ^^^^^^^^^^^^^ Q000
75 |         'estimated_reduction': total_words - aggressive_base_estimate,
76 |         'estimated_final_size': aggressive_base_estimate,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:74:24: Q000 [*] Single quotes found but double quotes preferred
   |
72 |     aggressive_base_estimate = int(total_words * 0.25)  # 25% are base forms
73 |     strategies['aggressive_lemmatization'] = {
74 |         'description': 'Full lemmatization with all inflections mapped to base forms',
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
75 |         'estimated_reduction': total_words - aggressive_base_estimate,
76 |         'estimated_final_size': aggressive_base_estimate,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:75:9: Q000 [*] Single quotes found but double quotes preferred
   |
73 |     strategies['aggressive_lemmatization'] = {
74 |         'description': 'Full lemmatization with all inflections mapped to base forms',
75 |         'estimated_reduction': total_words - aggressive_base_estimate,
   |         ^^^^^^^^^^^^^^^^^^^^^ Q000
76 |         'estimated_final_size': aggressive_base_estimate,
77 |         'reduction_percentage': ((total_words - aggressive_base_estimate) / total_words) * 100
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:76:9: Q000 [*] Single quotes found but double quotes preferred
   |
74 |         'description': 'Full lemmatization with all inflections mapped to base forms',
75 |         'estimated_reduction': total_words - aggressive_base_estimate,
76 |         'estimated_final_size': aggressive_base_estimate,
   |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
77 |         'reduction_percentage': ((total_words - aggressive_base_estimate) / total_words) * 100
78 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:77:9: Q000 [*] Single quotes found but double quotes preferred
   |
75 |         'estimated_reduction': total_words - aggressive_base_estimate,
76 |         'estimated_final_size': aggressive_base_estimate,
77 |         'reduction_percentage': ((total_words - aggressive_base_estimate) / total_words) * 100
   |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
78 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:83:16: Q000 [*] Single quotes found but double quotes preferred
   |
81 |     # Keep high-frequency inflections, reduce others
82 |     balanced_estimate = int(total_words * 0.20)  # Target ~55k from 267k
83 |     strategies['balanced_approach'] = {
   |                ^^^^^^^^^^^^^^^^^^^ Q000
84 |         'description': 'Lemmatization with frequency-based exceptions',
85 |         'estimated_reduction': total_words - 55000,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:84:9: Q000 [*] Single quotes found but double quotes preferred
   |
82 |     balanced_estimate = int(total_words * 0.20)  # Target ~55k from 267k
83 |     strategies['balanced_approach'] = {
84 |         'description': 'Lemmatization with frequency-based exceptions',
   |         ^^^^^^^^^^^^^ Q000
85 |         'estimated_reduction': total_words - 55000,
86 |         'estimated_final_size': 55000,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:84:24: Q000 [*] Single quotes found but double quotes preferred
   |
82 |     balanced_estimate = int(total_words * 0.20)  # Target ~55k from 267k
83 |     strategies['balanced_approach'] = {
84 |         'description': 'Lemmatization with frequency-based exceptions',
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
85 |         'estimated_reduction': total_words - 55000,
86 |         'estimated_final_size': 55000,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:85:9: Q000 [*] Single quotes found but double quotes preferred
   |
83 |     strategies['balanced_approach'] = {
84 |         'description': 'Lemmatization with frequency-based exceptions',
85 |         'estimated_reduction': total_words - 55000,
   |         ^^^^^^^^^^^^^^^^^^^^^ Q000
86 |         'estimated_final_size': 55000,
87 |         'reduction_percentage': ((total_words - 55000) / total_words) * 100
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:86:9: Q000 [*] Single quotes found but double quotes preferred
   |
84 |         'description': 'Lemmatization with frequency-based exceptions',
85 |         'estimated_reduction': total_words - 55000,
86 |         'estimated_final_size': 55000,
   |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
87 |         'reduction_percentage': ((total_words - 55000) / total_words) * 100
88 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:87:9: Q000 [*] Single quotes found but double quotes preferred
   |
85 |         'estimated_reduction': total_words - 55000,
86 |         'estimated_final_size': 55000,
87 |         'reduction_percentage': ((total_words - 55000) / total_words) * 100
   |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
88 |     }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:93:35: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
93 | def generate_recommendations() -> Dict:
   |                                   ^^^^ UP006
94 |     """Generate specific implementation recommendations."""
95 |     return {
   |
   = help: Replace with `dict`

scripts/corpus_optimization_report.py:96:9: Q000 [*] Single quotes found but double quotes preferred
   |
94 |     """Generate specific implementation recommendations."""
95 |     return {
96 |         'stemming_vs_lemmatization': {
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
97 |             'recommendation': 'Lemmatization',
98 |             'reasoning': [
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:97:13: Q000 [*] Single quotes found but double quotes preferred
   |
95 |     return {
96 |         'stemming_vs_lemmatization': {
97 |             'recommendation': 'Lemmatization',
   |             ^^^^^^^^^^^^^^^^ Q000
98 |             'reasoning': [
99 |                 'Preserves word meaning better than stemming',
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:97:31: Q000 [*] Single quotes found but double quotes preferred
   |
95 |     return {
96 |         'stemming_vs_lemmatization': {
97 |             'recommendation': 'Lemmatization',
   |                               ^^^^^^^^^^^^^^^ Q000
98 |             'reasoning': [
99 |                 'Preserves word meaning better than stemming',
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:98:13: Q000 [*] Single quotes found but double quotes preferred
    |
 96 |         'stemming_vs_lemmatization': {
 97 |             'recommendation': 'Lemmatization',
 98 |             'reasoning': [
    |             ^^^^^^^^^^^ Q000
 99 |                 'Preserves word meaning better than stemming',
100 |                 'More accurate for dictionary lookups',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:99:17: Q000 [*] Single quotes found but double quotes preferred
    |
 97 |             'recommendation': 'Lemmatization',
 98 |             'reasoning': [
 99 |                 'Preserves word meaning better than stemming',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
100 |                 'More accurate for dictionary lookups',
101 |                 'Better user experience (showing "run" instead of "runn")',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:100:17: Q000 [*] Single quotes found but double quotes preferred
    |
 98 |             'reasoning': [
 99 |                 'Preserves word meaning better than stemming',
100 |                 'More accurate for dictionary lookups',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
101 |                 'Better user experience (showing "run" instead of "runn")',
102 |                 'Industry standard for NLP applications'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:102:17: Q000 [*] Single quotes found but double quotes preferred
    |
100 |                 'More accurate for dictionary lookups',
101 |                 'Better user experience (showing "run" instead of "runn")',
102 |                 'Industry standard for NLP applications'
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
103 |             ],
104 |             'comparison': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:104:13: Q000 [*] Single quotes found but double quotes preferred
    |
102 |                 'Industry standard for NLP applications'
103 |             ],
104 |             'comparison': {
    |             ^^^^^^^^^^^^ Q000
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:105:17: Q000 [*] Single quotes found but double quotes preferred
    |
103 |             ],
104 |             'comparison': {
105 |                 'stemming': {
    |                 ^^^^^^^^^^ Q000
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:106:21: Q000 [*] Single quotes found but double quotes preferred
    |
104 |             'comparison': {
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
    |                     ^^^^^^ Q000
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
108 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:106:30: Q000 [*] Single quotes found but double quotes preferred
    |
104 |             'comparison': {
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
    |                              ^^^^^^^^^^^^^^^^^^^ Q000
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
108 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:106:51: Q000 [*] Single quotes found but double quotes preferred
    |
104 |             'comparison': {
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ Q000
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
108 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:107:21: Q000 [*] Single quotes found but double quotes preferred
    |
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
    |                     ^^^^^^ Q000
108 |                 },
109 |                 'lemmatization': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:107:30: Q000 [*] Single quotes found but double quotes preferred
    |
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
    |                              ^^^^^^^^^^^^^^^^^^^^^^ Q000
108 |                 },
109 |                 'lemmatization': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:107:54: Q000 [*] Single quotes found but double quotes preferred
    |
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
    |                                                      ^^^^^^^^^^^^^^^^ Q000
108 |                 },
109 |                 'lemmatization': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:107:72: Q000 [*] Single quotes found but double quotes preferred
    |
105 |                 'stemming': {
106 |                     'pros': ['Faster processing', 'Simpler implementation'],
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
    |                                                                        ^^^^^^^^^^^^^^^^^^ Q000
108 |                 },
109 |                 'lemmatization': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:109:17: Q000 [*] Single quotes found but double quotes preferred
    |
107 |                     'cons': ['Can create non-words', 'Too aggressive', 'Poor for display']
108 |                 },
109 |                 'lemmatization': {
    |                 ^^^^^^^^^^^^^^^ Q000
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:110:21: Q000 [*] Single quotes found but double quotes preferred
    |
108 |                 },
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
    |                     ^^^^^^ Q000
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
112 |                 }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:110:30: Q000 [*] Single quotes found but double quotes preferred
    |
108 |                 },
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
    |                              ^^^^^^^^^^^^^^^^^^^^^ Q000
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
112 |                 }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:110:53: Q000 [*] Single quotes found but double quotes preferred
    |
108 |                 },
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
    |                                                     ^^^^^^^^^^^^^^^ Q000
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
112 |                 }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:110:70: Q000 [*] Single quotes found but double quotes preferred
    |
108 |                 },
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
    |                                                                      ^^^^^^^^^^^^^^^^^ Q000
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
112 |                 }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:111:21: Q000 [*] Single quotes found but double quotes preferred
    |
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
    |                     ^^^^^^ Q000
112 |                 }
113 |             }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:111:30: Q000 [*] Single quotes found but double quotes preferred
    |
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
    |                              ^^^^^^^^^^^^^^^^^^^ Q000
112 |                 }
113 |             }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:111:51: Q000 [*] Single quotes found but double quotes preferred
    |
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^ Q000
112 |                 }
113 |             }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:111:75: Q000 [*] Single quotes found but double quotes preferred
    |
109 |                 'lemmatization': {
110 |                     'pros': ['Produces real words', 'Context-aware', 'Better accuracy'],
111 |                     'cons': ['Slower processing', 'Requires POS tagging', 'More complex']
    |                                                                           ^^^^^^^^^^^^^^ Q000
112 |                 }
113 |             }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:116:9: Q000 [*] Single quotes found but double quotes preferred
    |
114 |         },
115 |         
116 |         'morphological_analysis': {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ Q000
117 |             'techniques': [
118 |                 {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:117:13: Q000 [*] Single quotes found but double quotes preferred
    |
116 |         'morphological_analysis': {
117 |             'techniques': [
    |             ^^^^^^^^^^^^ Q000
118 |                 {
119 |                     'name': 'Rule-based morphology',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:119:21: Q000 [*] Single quotes found but double quotes preferred
    |
117 |             'techniques': [
118 |                 {
119 |                     'name': 'Rule-based morphology',
    |                     ^^^^^^ Q000
120 |                     'description': 'Apply linguistic rules for English inflections',
121 |                     'accuracy': '85-90%',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:119:29: Q000 [*] Single quotes found but double quotes preferred
    |
117 |             'techniques': [
118 |                 {
119 |                     'name': 'Rule-based morphology',
    |                             ^^^^^^^^^^^^^^^^^^^^^^^ Q000
120 |                     'description': 'Apply linguistic rules for English inflections',
121 |                     'accuracy': '85-90%',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:120:21: Q000 [*] Single quotes found but double quotes preferred
    |
118 |                 {
119 |                     'name': 'Rule-based morphology',
120 |                     'description': 'Apply linguistic rules for English inflections',
    |                     ^^^^^^^^^^^^^ Q000
121 |                     'accuracy': '85-90%',
122 |                     'speed': 'Very fast',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:120:36: Q000 [*] Single quotes found but double quotes preferred
    |
118 |                 {
119 |                     'name': 'Rule-based morphology',
120 |                     'description': 'Apply linguistic rules for English inflections',
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
121 |                     'accuracy': '85-90%',
122 |                     'speed': 'Very fast',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:121:21: Q000 [*] Single quotes found but double quotes preferred
    |
119 |                     'name': 'Rule-based morphology',
120 |                     'description': 'Apply linguistic rules for English inflections',
121 |                     'accuracy': '85-90%',
    |                     ^^^^^^^^^^ Q000
122 |                     'speed': 'Very fast',
123 |                     'complexity': 'Medium'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:121:33: Q000 [*] Single quotes found but double quotes preferred
    |
119 |                     'name': 'Rule-based morphology',
120 |                     'description': 'Apply linguistic rules for English inflections',
121 |                     'accuracy': '85-90%',
    |                                 ^^^^^^^^ Q000
122 |                     'speed': 'Very fast',
123 |                     'complexity': 'Medium'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:122:21: Q000 [*] Single quotes found but double quotes preferred
    |
120 |                     'description': 'Apply linguistic rules for English inflections',
121 |                     'accuracy': '85-90%',
122 |                     'speed': 'Very fast',
    |                     ^^^^^^^ Q000
123 |                     'complexity': 'Medium'
124 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:122:30: Q000 [*] Single quotes found but double quotes preferred
    |
120 |                     'description': 'Apply linguistic rules for English inflections',
121 |                     'accuracy': '85-90%',
122 |                     'speed': 'Very fast',
    |                              ^^^^^^^^^^^ Q000
123 |                     'complexity': 'Medium'
124 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:123:21: Q000 [*] Single quotes found but double quotes preferred
    |
121 |                     'accuracy': '85-90%',
122 |                     'speed': 'Very fast',
123 |                     'complexity': 'Medium'
    |                     ^^^^^^^^^^^^ Q000
124 |                 },
125 |                 {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:123:35: Q000 [*] Single quotes found but double quotes preferred
    |
121 |                     'accuracy': '85-90%',
122 |                     'speed': 'Very fast',
123 |                     'complexity': 'Medium'
    |                                   ^^^^^^^^ Q000
124 |                 },
125 |                 {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:126:21: Q000 [*] Single quotes found but double quotes preferred
    |
124 |                 },
125 |                 {
126 |                     'name': 'Dictionary-based lemmatization',
    |                     ^^^^^^ Q000
127 |                     'description': 'Use WordNet or similar for lookups',
128 |                     'accuracy': '95-98%',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:126:29: Q000 [*] Single quotes found but double quotes preferred
    |
124 |                 },
125 |                 {
126 |                     'name': 'Dictionary-based lemmatization',
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
127 |                     'description': 'Use WordNet or similar for lookups',
128 |                     'accuracy': '95-98%',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:127:21: Q000 [*] Single quotes found but double quotes preferred
    |
125 |                 {
126 |                     'name': 'Dictionary-based lemmatization',
127 |                     'description': 'Use WordNet or similar for lookups',
    |                     ^^^^^^^^^^^^^ Q000
128 |                     'accuracy': '95-98%',
129 |                     'speed': 'Fast with caching',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:127:36: Q000 [*] Single quotes found but double quotes preferred
    |
125 |                 {
126 |                     'name': 'Dictionary-based lemmatization',
127 |                     'description': 'Use WordNet or similar for lookups',
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
128 |                     'accuracy': '95-98%',
129 |                     'speed': 'Fast with caching',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:128:21: Q000 [*] Single quotes found but double quotes preferred
    |
126 |                     'name': 'Dictionary-based lemmatization',
127 |                     'description': 'Use WordNet or similar for lookups',
128 |                     'accuracy': '95-98%',
    |                     ^^^^^^^^^^ Q000
129 |                     'speed': 'Fast with caching',
130 |                     'complexity': 'Low'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:128:33: Q000 [*] Single quotes found but double quotes preferred
    |
126 |                     'name': 'Dictionary-based lemmatization',
127 |                     'description': 'Use WordNet or similar for lookups',
128 |                     'accuracy': '95-98%',
    |                                 ^^^^^^^^ Q000
129 |                     'speed': 'Fast with caching',
130 |                     'complexity': 'Low'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:129:21: Q000 [*] Single quotes found but double quotes preferred
    |
127 |                     'description': 'Use WordNet or similar for lookups',
128 |                     'accuracy': '95-98%',
129 |                     'speed': 'Fast with caching',
    |                     ^^^^^^^ Q000
130 |                     'complexity': 'Low'
131 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:129:30: Q000 [*] Single quotes found but double quotes preferred
    |
127 |                     'description': 'Use WordNet or similar for lookups',
128 |                     'accuracy': '95-98%',
129 |                     'speed': 'Fast with caching',
    |                              ^^^^^^^^^^^^^^^^^^^ Q000
130 |                     'complexity': 'Low'
131 |                 },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:130:21: Q000 [*] Single quotes found but double quotes preferred
    |
128 |                     'accuracy': '95-98%',
129 |                     'speed': 'Fast with caching',
130 |                     'complexity': 'Low'
    |                     ^^^^^^^^^^^^ Q000
131 |                 },
132 |                 {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:130:35: Q000 [*] Single quotes found but double quotes preferred
    |
128 |                     'accuracy': '95-98%',
129 |                     'speed': 'Fast with caching',
130 |                     'complexity': 'Low'
    |                                   ^^^^^ Q000
131 |                 },
132 |                 {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:133:21: Q000 [*] Single quotes found but double quotes preferred
    |
131 |                 },
132 |                 {
133 |                     'name': 'Machine learning models',
    |                     ^^^^^^ Q000
134 |                     'description': 'Neural models for complex cases',
135 |                     'accuracy': '98-99%',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:133:29: Q000 [*] Single quotes found but double quotes preferred
    |
131 |                 },
132 |                 {
133 |                     'name': 'Machine learning models',
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
134 |                     'description': 'Neural models for complex cases',
135 |                     'accuracy': '98-99%',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:134:21: Q000 [*] Single quotes found but double quotes preferred
    |
132 |                 {
133 |                     'name': 'Machine learning models',
134 |                     'description': 'Neural models for complex cases',
    |                     ^^^^^^^^^^^^^ Q000
135 |                     'accuracy': '98-99%',
136 |                     'speed': 'Slower',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:134:36: Q000 [*] Single quotes found but double quotes preferred
    |
132 |                 {
133 |                     'name': 'Machine learning models',
134 |                     'description': 'Neural models for complex cases',
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
135 |                     'accuracy': '98-99%',
136 |                     'speed': 'Slower',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:135:21: Q000 [*] Single quotes found but double quotes preferred
    |
133 |                     'name': 'Machine learning models',
134 |                     'description': 'Neural models for complex cases',
135 |                     'accuracy': '98-99%',
    |                     ^^^^^^^^^^ Q000
136 |                     'speed': 'Slower',
137 |                     'complexity': 'High'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:135:33: Q000 [*] Single quotes found but double quotes preferred
    |
133 |                     'name': 'Machine learning models',
134 |                     'description': 'Neural models for complex cases',
135 |                     'accuracy': '98-99%',
    |                                 ^^^^^^^^ Q000
136 |                     'speed': 'Slower',
137 |                     'complexity': 'High'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:136:21: Q000 [*] Single quotes found but double quotes preferred
    |
134 |                     'description': 'Neural models for complex cases',
135 |                     'accuracy': '98-99%',
136 |                     'speed': 'Slower',
    |                     ^^^^^^^ Q000
137 |                     'complexity': 'High'
138 |                 }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:136:30: Q000 [*] Single quotes found but double quotes preferred
    |
134 |                     'description': 'Neural models for complex cases',
135 |                     'accuracy': '98-99%',
136 |                     'speed': 'Slower',
    |                              ^^^^^^^^ Q000
137 |                     'complexity': 'High'
138 |                 }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:137:21: Q000 [*] Single quotes found but double quotes preferred
    |
135 |                     'accuracy': '98-99%',
136 |                     'speed': 'Slower',
137 |                     'complexity': 'High'
    |                     ^^^^^^^^^^^^ Q000
138 |                 }
139 |             ],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:137:35: Q000 [*] Single quotes found but double quotes preferred
    |
135 |                     'accuracy': '98-99%',
136 |                     'speed': 'Slower',
137 |                     'complexity': 'High'
    |                                   ^^^^^^ Q000
138 |                 }
139 |             ],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:140:13: Q000 [*] Single quotes found but double quotes preferred
    |
138 |                 }
139 |             ],
140 |             'recommended_approach': 'Hybrid: Dictionary-based with rule fallbacks'
    |             ^^^^^^^^^^^^^^^^^^^^^^ Q000
141 |         },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:140:37: Q000 [*] Single quotes found but double quotes preferred
    |
138 |                 }
139 |             ],
140 |             'recommended_approach': 'Hybrid: Dictionary-based with rule fallbacks'
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
141 |         },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:143:9: Q000 [*] Single quotes found but double quotes preferred
    |
141 |         },
142 |         
143 |         'duplicate_reduction': {
    |         ^^^^^^^^^^^^^^^^^^^^^ Q000
144 |             'strategies': [
145 |                 'Normalize case (already lowercase)',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:144:13: Q000 [*] Single quotes found but double quotes preferred
    |
143 |         'duplicate_reduction': {
144 |             'strategies': [
    |             ^^^^^^^^^^^^ Q000
145 |                 'Normalize case (already lowercase)',
146 |                 'Remove inflected forms mapping to same base',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:145:17: Q000 [*] Single quotes found but double quotes preferred
    |
143 |         'duplicate_reduction': {
144 |             'strategies': [
145 |                 'Normalize case (already lowercase)',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
146 |                 'Remove inflected forms mapping to same base',
147 |                 'Merge British/American spelling variants',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:146:17: Q000 [*] Single quotes found but double quotes preferred
    |
144 |             'strategies': [
145 |                 'Normalize case (already lowercase)',
146 |                 'Remove inflected forms mapping to same base',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
147 |                 'Merge British/American spelling variants',
148 |                 'Consolidate hyphenated/non-hyphenated forms',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:147:17: Q000 [*] Single quotes found but double quotes preferred
    |
145 |                 'Normalize case (already lowercase)',
146 |                 'Remove inflected forms mapping to same base',
147 |                 'Merge British/American spelling variants',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
148 |                 'Consolidate hyphenated/non-hyphenated forms',
149 |                 'Remove archaic inflections'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:148:17: Q000 [*] Single quotes found but double quotes preferred
    |
146 |                 'Remove inflected forms mapping to same base',
147 |                 'Merge British/American spelling variants',
148 |                 'Consolidate hyphenated/non-hyphenated forms',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
149 |                 'Remove archaic inflections'
150 |             ],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:149:17: Q000 [*] Single quotes found but double quotes preferred
    |
147 |                 'Merge British/American spelling variants',
148 |                 'Consolidate hyphenated/non-hyphenated forms',
149 |                 'Remove archaic inflections'
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
150 |             ],
151 |             'expected_reduction': '15-20% from inflection consolidation alone'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:151:13: Q000 [*] Single quotes found but double quotes preferred
    |
149 |                 'Remove archaic inflections'
150 |             ],
151 |             'expected_reduction': '15-20% from inflection consolidation alone'
    |             ^^^^^^^^^^^^^^^^^^^^ Q000
152 |         },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:151:35: Q000 [*] Single quotes found but double quotes preferred
    |
149 |                 'Remove archaic inflections'
150 |             ],
151 |             'expected_reduction': '15-20% from inflection consolidation alone'
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
152 |         },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:154:9: Q000 [*] Single quotes found but double quotes preferred
    |
152 |         },
153 |         
154 |         'implementation_tools': {
    |         ^^^^^^^^^^^^^^^^^^^^^^ Q000
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:155:13: Q000 [*] Single quotes found but double quotes preferred
    |
154 |         'implementation_tools': {
155 |             'nltk': {
    |             ^^^^^^ Q000
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:156:17: Q000 [*] Single quotes found but double quotes preferred
    |
154 |         'implementation_tools': {
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
    |                 ^^^^^^^^^^^^^ Q000
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:156:32: Q000 [*] Single quotes found but double quotes preferred
    |
154 |         'implementation_tools': {
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:157:17: Q000 [*] Single quotes found but double quotes preferred
    |
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
    |                 ^^^^^^^^^^ Q000
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:157:30: Q000 [*] Single quotes found but double quotes preferred
    |
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
    |                              ^^^^^^^^^^^^^^^^^^^^ Q000
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:157:52: Q000 [*] Single quotes found but double quotes preferred
    |
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
    |                                                    ^^^^^^^^^^^^^ Q000
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:157:67: Q000 [*] Single quotes found but double quotes preferred
    |
155 |             'nltk': {
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^ Q000
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:158:17: Q000 [*] Single quotes found but double quotes preferred
    |
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
    |                 ^^^^^^ Q000
159 |                 'cons': ['Can be slow', 'Large download size'],
160 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:158:26: Q000 [*] Single quotes found but double quotes preferred
    |
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
    |                          ^^^^^^^^^^^^^^^^^ Q000
159 |                 'cons': ['Can be slow', 'Large download size'],
160 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:158:45: Q000 [*] Single quotes found but double quotes preferred
    |
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
    |                                             ^^^^^^^^^^^^^^^ Q000
159 |                 'cons': ['Can be slow', 'Large download size'],
160 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:158:62: Q000 [*] Single quotes found but double quotes preferred
    |
156 |                 'description': 'Natural Language Toolkit',
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
    |                                                              ^^^^^^^^^^^^^^^ Q000
159 |                 'cons': ['Can be slow', 'Large download size'],
160 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:159:17: Q000 [*] Single quotes found but double quotes preferred
    |
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |                 ^^^^^^ Q000
160 |                 'code_example': '''
161 | from nltk.stem import WordNetLemmatizer
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:159:26: Q000 [*] Single quotes found but double quotes preferred
    |
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |                          ^^^^^^^^^^^^^ Q000
160 |                 'code_example': '''
161 | from nltk.stem import WordNetLemmatizer
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:159:41: Q000 [*] Single quotes found but double quotes preferred
    |
157 |                 'features': ['WordNet lemmatizer', 'POS tagging', 'Stemming algorithms'],
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
    |                                         ^^^^^^^^^^^^^^^^^^^^^ Q000
160 |                 'code_example': '''
161 | from nltk.stem import WordNetLemmatizer
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:160:17: Q000 [*] Single quotes found but double quotes preferred
    |
158 |                 'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                 'cons': ['Can be slow', 'Large download size'],
160 |                 'code_example': '''
    |                 ^^^^^^^^^^^^^^ Q000
161 | from nltk.stem import WordNetLemmatizer
162 | from nltk.corpus import wordnet
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:160:33: Q001 [*] Single quote multiline found but double quotes preferred
    |
158 |                   'pros': ['Well-documented', 'Comprehensive', 'Python native'],
159 |                   'cons': ['Can be slow', 'Large download size'],
160 |                   'code_example': '''
    |  _________________________________^
161 | | from nltk.stem import WordNetLemmatizer
162 | | from nltk.corpus import wordnet
163 | |
164 | | lemmatizer = WordNetLemmatizer()
165 | | word = "running"
166 | | lemma = lemmatizer.lemmatize(word, pos='v')  # -> "run"
167 | | '''
    | |___^ Q001
168 |               },
169 |               'spacy': {
    |
    = help: Replace single multiline quotes with double quotes

scripts/corpus_optimization_report.py:169:13: Q000 [*] Single quotes found but double quotes preferred
    |
167 | '''
168 |             },
169 |             'spacy': {
    |             ^^^^^^^ Q000
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:170:17: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             },
169 |             'spacy': {
170 |                 'description': 'Industrial-strength NLP',
    |                 ^^^^^^^^^^^^^ Q000
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:170:32: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             },
169 |             'spacy': {
170 |                 'description': 'Industrial-strength NLP',
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:171:17: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'spacy': {
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
    |                 ^^^^^^^^^^ Q000
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:171:30: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'spacy': {
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
    |                              ^^^^^^^^^^^^^^^^^^^^ Q000
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:171:52: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'spacy': {
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
    |                                                    ^^^^^^^^^^^^^ Q000
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:171:67: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'spacy': {
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^ Q000
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:172:17: Q000 [*] Single quotes found but double quotes preferred
    |
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
    |                 ^^^^^^ Q000
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
174 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:172:26: Q000 [*] Single quotes found but double quotes preferred
    |
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
    |                          ^^^^^^^^^^^ Q000
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
174 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:172:39: Q000 [*] Single quotes found but double quotes preferred
    |
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
    |                                       ^^^^^^^^^^^^^^^^^^ Q000
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
174 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:172:59: Q000 [*] Single quotes found but double quotes preferred
    |
170 |                 'description': 'Industrial-strength NLP',
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
    |                                                           ^^^^^^^^^^^^^^^ Q000
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
174 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:173:17: Q000 [*] Single quotes found but double quotes preferred
    |
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |                 ^^^^^^ Q000
174 |                 'code_example': '''
175 | import spacy
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:173:26: Q000 [*] Single quotes found but double quotes preferred
    |
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
174 |                 'code_example': '''
175 | import spacy
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:173:53: Q000 [*] Single quotes found but double quotes preferred
    |
171 |                 'features': ['Fast lemmatization', 'POS tagging', 'Pipeline processing'],
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
174 |                 'code_example': '''
175 | import spacy
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:174:17: Q000 [*] Single quotes found but double quotes preferred
    |
172 |                 'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                 'cons': ['Larger memory footprint', 'Requires model download'],
174 |                 'code_example': '''
    |                 ^^^^^^^^^^^^^^ Q000
175 | import spacy
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:174:33: Q001 [*] Single quote multiline found but double quotes preferred
    |
172 |                   'pros': ['Very fast', 'Production-ready', 'Good accuracy'],
173 |                   'cons': ['Larger memory footprint', 'Requires model download'],
174 |                   'code_example': '''
    |  _________________________________^
175 | | import spacy
176 | |
177 | | nlp = spacy.load("en_core_web_sm")
178 | | doc = nlp("running")
179 | | lemma = doc[0].lemma_  # -> "run"
180 | | '''
    | |___^ Q001
181 |               },
182 |               'custom_rules': {
    |
    = help: Replace single multiline quotes with double quotes

scripts/corpus_optimization_report.py:182:13: Q000 [*] Single quotes found but double quotes preferred
    |
180 | '''
181 |             },
182 |             'custom_rules': {
    |             ^^^^^^^^^^^^^^ Q000
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:183:17: Q000 [*] Single quotes found but double quotes preferred
    |
181 |             },
182 |             'custom_rules': {
183 |                 'description': 'Lightweight custom implementation',
    |                 ^^^^^^^^^^^^^ Q000
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:183:32: Q000 [*] Single quotes found but double quotes preferred
    |
181 |             },
182 |             'custom_rules': {
183 |                 'description': 'Lightweight custom implementation',
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:184:17: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             'custom_rules': {
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
    |                 ^^^^^^^^^^ Q000
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:184:30: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             'custom_rules': {
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
    |                              ^^^^^^^^^^^^^^^^^^^^^^ Q000
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:184:54: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             'custom_rules': {
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
    |                                                      ^^^^^^ Q000
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:184:62: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             'custom_rules': {
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
    |                                                              ^^^^^^^^^^^^^^^^^^^ Q000
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:185:17: Q000 [*] Single quotes found but double quotes preferred
    |
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
    |                 ^^^^^^ Q000
186 |                 'cons': ['Less accurate', 'More maintenance'],
187 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:185:26: Q000 [*] Single quotes found but double quotes preferred
    |
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
186 |                 'cons': ['Less accurate', 'More maintenance'],
187 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:185:54: Q000 [*] Single quotes found but double quotes preferred
    |
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
    |                                                      ^^^^^^^^^^^ Q000
186 |                 'cons': ['Less accurate', 'More maintenance'],
187 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:185:67: Q000 [*] Single quotes found but double quotes preferred
    |
183 |                 'description': 'Lightweight custom implementation',
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
    |                                                                   ^^^^^^^^^^^^^^ Q000
186 |                 'cons': ['Less accurate', 'More maintenance'],
187 |                 'code_example': '''
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:186:17: Q000 [*] Single quotes found but double quotes preferred
    |
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |                 ^^^^^^ Q000
187 |                 'code_example': '''
188 | def simple_lemmatize(word):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:186:26: Q000 [*] Single quotes found but double quotes preferred
    |
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |                          ^^^^^^^^^^^^^^^ Q000
187 |                 'code_example': '''
188 | def simple_lemmatize(word):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:186:43: Q000 [*] Single quotes found but double quotes preferred
    |
184 |                 'features': ['Minimal dependencies', 'Fast', 'Tailored to needs'],
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
    |                                           ^^^^^^^^^^^^^^^^^^ Q000
187 |                 'code_example': '''
188 | def simple_lemmatize(word):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:187:17: Q000 [*] Single quotes found but double quotes preferred
    |
185 |                 'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                 'cons': ['Less accurate', 'More maintenance'],
187 |                 'code_example': '''
    |                 ^^^^^^^^^^^^^^ Q000
188 | def simple_lemmatize(word):
189 |     rules = [
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:187:33: Q001 [*] Single quote multiline found but double quotes preferred
    |
185 |                   'pros': ['No external dependencies', 'Very fast', 'Full control'],
186 |                   'cons': ['Less accurate', 'More maintenance'],
187 |                   'code_example': '''
    |  _________________________________^
188 | | def simple_lemmatize(word):
189 | |     rules = [
190 | |         ("ies", "y"), ("es", ""), ("s", ""),
191 | |         ("ed", ""), ("ing", ""), ("er", ""),
192 | |         ("est", ""), ("ly", "")
193 | |     ]
194 | |     for suffix, replacement in rules:
195 | |         if word.endswith(suffix):
196 | |             return word[:-len(suffix)] + replacement
197 | |     return word
198 | | '''
    | |___^ Q001
199 |               }
200 |           },
    |
    = help: Replace single multiline quotes with double quotes

scripts/corpus_optimization_report.py:202:9: Q000 [*] Single quotes found but double quotes preferred
    |
200 |         },
201 |         
202 |         'corpus_architecture': {
    |         ^^^^^^^^^^^^^^^^^^^^^ Q000
203 |             'data_structure': '''
204 | class OptimizedCorpus:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:203:13: Q000 [*] Single quotes found but double quotes preferred
    |
202 |         'corpus_architecture': {
203 |             'data_structure': '''
    |             ^^^^^^^^^^^^^^^^ Q000
204 | class OptimizedCorpus:
205 |     def __init__(self):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:217:13: Q000 [*] Single quotes found but double quotes preferred
    |
215 |         return base, inflections
216 | ''',
217 |             'benefits': [
    |             ^^^^^^^^^^ Q000
218 |                 'O(1) lookup for any word form',
219 |                 'Easy expansion of search results',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:218:17: Q000 [*] Single quotes found but double quotes preferred
    |
216 | ''',
217 |             'benefits': [
218 |                 'O(1) lookup for any word form',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
219 |                 'Easy expansion of search results',
220 |                 'Maintains full corpus information',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:219:17: Q000 [*] Single quotes found but double quotes preferred
    |
217 |             'benefits': [
218 |                 'O(1) lookup for any word form',
219 |                 'Easy expansion of search results',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
220 |                 'Maintains full corpus information',
221 |                 'Supports frequency-based ranking'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:220:17: Q000 [*] Single quotes found but double quotes preferred
    |
218 |                 'O(1) lookup for any word form',
219 |                 'Easy expansion of search results',
220 |                 'Maintains full corpus information',
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
221 |                 'Supports frequency-based ranking'
222 |             ]
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:221:17: Q000 [*] Single quotes found but double quotes preferred
    |
219 |                 'Easy expansion of search results',
220 |                 'Maintains full corpus information',
221 |                 'Supports frequency-based ranking'
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
222 |             ]
223 |         },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:225:9: Q000 [*] Single quotes found but double quotes preferred
    |
223 |         },
224 |         
225 |         'expected_metrics': {
    |         ^^^^^^^^^^^^^^^^^^ Q000
226 |             'current_state': {
227 |                 'unique_words': 267751,
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:226:13: Q000 [*] Single quotes found but double quotes preferred
    |
225 |         'expected_metrics': {
226 |             'current_state': {
    |             ^^^^^^^^^^^^^^^ Q000
227 |                 'unique_words': 267751,
228 |                 'memory_usage': '~100MB',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:227:17: Q000 [*] Single quotes found but double quotes preferred
    |
225 |         'expected_metrics': {
226 |             'current_state': {
227 |                 'unique_words': 267751,
    |                 ^^^^^^^^^^^^^^ Q000
228 |                 'memory_usage': '~100MB',
229 |                 'search_time': 'Variable',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:228:17: Q000 [*] Single quotes found but double quotes preferred
    |
226 |             'current_state': {
227 |                 'unique_words': 267751,
228 |                 'memory_usage': '~100MB',
    |                 ^^^^^^^^^^^^^^ Q000
229 |                 'search_time': 'Variable',
230 |                 'false_negatives': 'High for inflected queries'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:228:33: Q000 [*] Single quotes found but double quotes preferred
    |
226 |             'current_state': {
227 |                 'unique_words': 267751,
228 |                 'memory_usage': '~100MB',
    |                                 ^^^^^^^^ Q000
229 |                 'search_time': 'Variable',
230 |                 'false_negatives': 'High for inflected queries'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:229:17: Q000 [*] Single quotes found but double quotes preferred
    |
227 |                 'unique_words': 267751,
228 |                 'memory_usage': '~100MB',
229 |                 'search_time': 'Variable',
    |                 ^^^^^^^^^^^^^ Q000
230 |                 'false_negatives': 'High for inflected queries'
231 |             },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:229:32: Q000 [*] Single quotes found but double quotes preferred
    |
227 |                 'unique_words': 267751,
228 |                 'memory_usage': '~100MB',
229 |                 'search_time': 'Variable',
    |                                ^^^^^^^^^^ Q000
230 |                 'false_negatives': 'High for inflected queries'
231 |             },
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:230:17: Q000 [*] Single quotes found but double quotes preferred
    |
228 |                 'memory_usage': '~100MB',
229 |                 'search_time': 'Variable',
230 |                 'false_negatives': 'High for inflected queries'
    |                 ^^^^^^^^^^^^^^^^^ Q000
231 |             },
232 |             'optimized_state': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:230:36: Q000 [*] Single quotes found but double quotes preferred
    |
228 |                 'memory_usage': '~100MB',
229 |                 'search_time': 'Variable',
230 |                 'false_negatives': 'High for inflected queries'
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
231 |             },
232 |             'optimized_state': {
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:232:13: Q000 [*] Single quotes found but double quotes preferred
    |
230 |                 'false_negatives': 'High for inflected queries'
231 |             },
232 |             'optimized_state': {
    |             ^^^^^^^^^^^^^^^^^ Q000
233 |                 'base_forms': 55000,
234 |                 'total_mappings': 212751,
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:233:17: Q000 [*] Single quotes found but double quotes preferred
    |
231 |             },
232 |             'optimized_state': {
233 |                 'base_forms': 55000,
    |                 ^^^^^^^^^^^^ Q000
234 |                 'total_mappings': 212751,
235 |                 'memory_usage': '~60MB',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:234:17: Q000 [*] Single quotes found but double quotes preferred
    |
232 |             'optimized_state': {
233 |                 'base_forms': 55000,
234 |                 'total_mappings': 212751,
    |                 ^^^^^^^^^^^^^^^^ Q000
235 |                 'memory_usage': '~60MB',
236 |                 'search_time': '2-3x faster',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:235:17: Q000 [*] Single quotes found but double quotes preferred
    |
233 |                 'base_forms': 55000,
234 |                 'total_mappings': 212751,
235 |                 'memory_usage': '~60MB',
    |                 ^^^^^^^^^^^^^^ Q000
236 |                 'search_time': '2-3x faster',
237 |                 'false_negatives': 'Near zero',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:235:33: Q000 [*] Single quotes found but double quotes preferred
    |
233 |                 'base_forms': 55000,
234 |                 'total_mappings': 212751,
235 |                 'memory_usage': '~60MB',
    |                                 ^^^^^^^ Q000
236 |                 'search_time': '2-3x faster',
237 |                 'false_negatives': 'Near zero',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:236:17: Q000 [*] Single quotes found but double quotes preferred
    |
234 |                 'total_mappings': 212751,
235 |                 'memory_usage': '~60MB',
236 |                 'search_time': '2-3x faster',
    |                 ^^^^^^^^^^^^^ Q000
237 |                 'false_negatives': 'Near zero',
238 |                 'benefits': [
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:236:32: Q000 [*] Single quotes found but double quotes preferred
    |
234 |                 'total_mappings': 212751,
235 |                 'memory_usage': '~60MB',
236 |                 'search_time': '2-3x faster',
    |                                ^^^^^^^^^^^^^ Q000
237 |                 'false_negatives': 'Near zero',
238 |                 'benefits': [
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:237:17: Q000 [*] Single quotes found but double quotes preferred
    |
235 |                 'memory_usage': '~60MB',
236 |                 'search_time': '2-3x faster',
237 |                 'false_negatives': 'Near zero',
    |                 ^^^^^^^^^^^^^^^^^ Q000
238 |                 'benefits': [
239 |                     'Faster exact match searches',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:237:36: Q000 [*] Single quotes found but double quotes preferred
    |
235 |                 'memory_usage': '~60MB',
236 |                 'search_time': '2-3x faster',
237 |                 'false_negatives': 'Near zero',
    |                                    ^^^^^^^^^^^ Q000
238 |                 'benefits': [
239 |                     'Faster exact match searches',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:238:17: Q000 [*] Single quotes found but double quotes preferred
    |
236 |                 'search_time': '2-3x faster',
237 |                 'false_negatives': 'Near zero',
238 |                 'benefits': [
    |                 ^^^^^^^^^^ Q000
239 |                     'Faster exact match searches',
240 |                     'Better fuzzy matching',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:239:21: Q000 [*] Single quotes found but double quotes preferred
    |
237 |                 'false_negatives': 'Near zero',
238 |                 'benefits': [
239 |                     'Faster exact match searches',
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
240 |                     'Better fuzzy matching',
241 |                     'Improved semantic search',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:240:21: Q000 [*] Single quotes found but double quotes preferred
    |
238 |                 'benefits': [
239 |                     'Faster exact match searches',
240 |                     'Better fuzzy matching',
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ Q000
241 |                     'Improved semantic search',
242 |                     'Consistent results'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:241:21: Q000 [*] Single quotes found but double quotes preferred
    |
239 |                     'Faster exact match searches',
240 |                     'Better fuzzy matching',
241 |                     'Improved semantic search',
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
242 |                     'Consistent results'
243 |                 ]
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:242:21: Q000 [*] Single quotes found but double quotes preferred
    |
240 |                     'Better fuzzy matching',
241 |                     'Improved semantic search',
242 |                     'Consistent results'
    |                     ^^^^^^^^^^^^^^^^^^^^ Q000
243 |                 ]
244 |             }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:249:5: PLR0915 Too many statements (60 > 50)
    |
249 | def main():
    |     ^^^^ PLR0915
250 |     """Generate comprehensive optimization report."""
251 |     print("="*80)
    |

scripts/corpus_optimization_report.py:249:5: ANN201 Missing return type annotation for public function `main`
    |
249 | def main():
    |     ^^^^ ANN201
250 |     """Generate comprehensive optimization report."""
251 |     print("="*80)
    |
    = help: Add return type annotation: `None`

scripts/corpus_optimization_report.py:251:5: T201 `print` found
    |
249 | def main():
250 |     """Generate comprehensive optimization report."""
251 |     print("="*80)
    |     ^^^^^ T201
252 |     print("CORPUS OPTIMIZATION RESEARCH REPORT")
253 |     print("English Language Dictionary Project - Target: ~55k Base Forms")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:252:5: T201 `print` found
    |
250 |     """Generate comprehensive optimization report."""
251 |     print("="*80)
252 |     print("CORPUS OPTIMIZATION RESEARCH REPORT")
    |     ^^^^^ T201
253 |     print("English Language Dictionary Project - Target: ~55k Base Forms")
254 |     print("="*80)
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:253:5: T201 `print` found
    |
251 |     print("="*80)
252 |     print("CORPUS OPTIMIZATION RESEARCH REPORT")
253 |     print("English Language Dictionary Project - Target: ~55k Base Forms")
    |     ^^^^^ T201
254 |     print("="*80)
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:254:5: T201 `print` found
    |
252 |     print("CORPUS OPTIMIZATION RESEARCH REPORT")
253 |     print("English Language Dictionary Project - Target: ~55k Base Forms")
254 |     print("="*80)
    |     ^^^^^ T201
255 |     
256 |     # Load and analyze corpus
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:263:9: T201 `print` found
    |
261 |         analysis = analyze_corpus(words)
262 |         
263 |         print(f"\n1. CURRENT CORPUS ANALYSIS")
    |         ^^^^^ T201
264 |         print("-"*40)
265 |         print(f"Total words: {analysis['total_words']:,}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:264:9: T201 `print` found
    |
263 |         print(f"\n1. CURRENT CORPUS ANALYSIS")
264 |         print("-"*40)
    |         ^^^^^ T201
265 |         print(f"Total words: {analysis['total_words']:,}")
266 |         print(f"Unique words: {analysis['unique_words']:,}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:265:9: T201 `print` found
    |
263 |         print(f"\n1. CURRENT CORPUS ANALYSIS")
264 |         print("-"*40)
265 |         print(f"Total words: {analysis['total_words']:,}")
    |         ^^^^^ T201
266 |         print(f"Unique words: {analysis['unique_words']:,}")
267 |         print(f"Potential inflection groups: {len(analysis['potential_inflections']):,}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:266:9: T201 `print` found
    |
264 |         print("-"*40)
265 |         print(f"Total words: {analysis['total_words']:,}")
266 |         print(f"Unique words: {analysis['unique_words']:,}")
    |         ^^^^^ T201
267 |         print(f"Potential inflection groups: {len(analysis['potential_inflections']):,}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:267:9: T201 `print` found
    |
265 |         print(f"Total words: {analysis['total_words']:,}")
266 |         print(f"Unique words: {analysis['unique_words']:,}")
267 |         print(f"Potential inflection groups: {len(analysis['potential_inflections']):,}")
    |         ^^^^^ T201
268 |         
269 |         # Show most common endings
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:270:9: T201 `print` found
    |
269 |         # Show most common endings
270 |         print("\nMost common word endings:")
    |         ^^^^^ T201
271 |         for ending, count in analysis['common_endings'].most_common(10):
272 |             print(f"  -{ending}: {count:,} words ({count/analysis['unique_words']*100:.1f}%)")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:271:39: Q000 [*] Single quotes found but double quotes preferred
    |
269 |         # Show most common endings
270 |         print("\nMost common word endings:")
271 |         for ending, count in analysis['common_endings'].most_common(10):
    |                                       ^^^^^^^^^^^^^^^^ Q000
272 |             print(f"  -{ending}: {count:,} words ({count/analysis['unique_words']*100:.1f}%)")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:272:13: T201 `print` found
    |
270 |         print("\nMost common word endings:")
271 |         for ending, count in analysis['common_endings'].most_common(10):
272 |             print(f"  -{ending}: {count:,} words ({count/analysis['unique_words']*100:.1f}%)")
    |             ^^^^^ T201
273 |             
274 |         # Calculate optimization potential
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:277:9: T201 `print` found
    |
275 |         strategies = calculate_optimization_potential(analysis)
276 |         
277 |         print(f"\n2. OPTIMIZATION STRATEGIES")
    |         ^^^^^ T201
278 |         print("-"*40)
279 |         for name, strategy in strategies.items():
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:278:9: T201 `print` found
    |
277 |         print(f"\n2. OPTIMIZATION STRATEGIES")
278 |         print("-"*40)
    |         ^^^^^ T201
279 |         for name, strategy in strategies.items():
280 |             print(f"\n{name.replace('_', ' ').title()}:")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:280:13: T201 `print` found
    |
278 |         print("-"*40)
279 |         for name, strategy in strategies.items():
280 |             print(f"\n{name.replace('_', ' ').title()}:")
    |             ^^^^^ T201
281 |             print(f"  {strategy['description']}")
282 |             print(f"  Estimated final size: {strategy['estimated_final_size']:,} words")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:281:13: T201 `print` found
    |
279 |         for name, strategy in strategies.items():
280 |             print(f"\n{name.replace('_', ' ').title()}:")
281 |             print(f"  {strategy['description']}")
    |             ^^^^^ T201
282 |             print(f"  Estimated final size: {strategy['estimated_final_size']:,} words")
283 |             print(f"  Reduction: {strategy['reduction_percentage']:.1f}%")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:282:13: T201 `print` found
    |
280 |             print(f"\n{name.replace('_', ' ').title()}:")
281 |             print(f"  {strategy['description']}")
282 |             print(f"  Estimated final size: {strategy['estimated_final_size']:,} words")
    |             ^^^^^ T201
283 |             print(f"  Reduction: {strategy['reduction_percentage']:.1f}%")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:283:13: T201 `print` found
    |
281 |             print(f"  {strategy['description']}")
282 |             print(f"  Estimated final size: {strategy['estimated_final_size']:,} words")
283 |             print(f"  Reduction: {strategy['reduction_percentage']:.1f}%")
    |             ^^^^^ T201
284 |     
285 |     # Generate recommendations
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:288:5: T201 `print` found
    |
286 |     recommendations = generate_recommendations()
287 |     
288 |     print(f"\n3. STEMMING VS LEMMATIZATION")
    |     ^^^^^ T201
289 |     print("-"*40)
290 |     rec = recommendations['stemming_vs_lemmatization']
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:289:5: T201 `print` found
    |
288 |     print(f"\n3. STEMMING VS LEMMATIZATION")
289 |     print("-"*40)
    |     ^^^^^ T201
290 |     rec = recommendations['stemming_vs_lemmatization']
291 |     print(f"Recommendation: {rec['recommendation']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:290:27: Q000 [*] Single quotes found but double quotes preferred
    |
288 |     print(f"\n3. STEMMING VS LEMMATIZATION")
289 |     print("-"*40)
290 |     rec = recommendations['stemming_vs_lemmatization']
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
291 |     print(f"Recommendation: {rec['recommendation']}")
292 |     print("\nReasoning:")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:291:5: T201 `print` found
    |
289 |     print("-"*40)
290 |     rec = recommendations['stemming_vs_lemmatization']
291 |     print(f"Recommendation: {rec['recommendation']}")
    |     ^^^^^ T201
292 |     print("\nReasoning:")
293 |     for reason in rec['reasoning']:
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:292:5: T201 `print` found
    |
290 |     rec = recommendations['stemming_vs_lemmatization']
291 |     print(f"Recommendation: {rec['recommendation']}")
292 |     print("\nReasoning:")
    |     ^^^^^ T201
293 |     for reason in rec['reasoning']:
294 |         print(f"  • {reason}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:293:23: Q000 [*] Single quotes found but double quotes preferred
    |
291 |     print(f"Recommendation: {rec['recommendation']}")
292 |     print("\nReasoning:")
293 |     for reason in rec['reasoning']:
    |                       ^^^^^^^^^^^ Q000
294 |         print(f"  • {reason}")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:294:9: T201 `print` found
    |
292 |     print("\nReasoning:")
293 |     for reason in rec['reasoning']:
294 |         print(f"  • {reason}")
    |         ^^^^^ T201
295 |         
296 |     print(f"\n4. MORPHOLOGICAL ANALYSIS TECHNIQUES")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:296:5: T201 `print` found
    |
294 |         print(f"  • {reason}")
295 |         
296 |     print(f"\n4. MORPHOLOGICAL ANALYSIS TECHNIQUES")
    |     ^^^^^ T201
297 |     print("-"*40)
298 |     for technique in recommendations['morphological_analysis']['techniques']:
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:297:5: T201 `print` found
    |
296 |     print(f"\n4. MORPHOLOGICAL ANALYSIS TECHNIQUES")
297 |     print("-"*40)
    |     ^^^^^ T201
298 |     for technique in recommendations['morphological_analysis']['techniques']:
299 |         print(f"\n{technique['name']}:")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:298:38: Q000 [*] Single quotes found but double quotes preferred
    |
296 |     print(f"\n4. MORPHOLOGICAL ANALYSIS TECHNIQUES")
297 |     print("-"*40)
298 |     for technique in recommendations['morphological_analysis']['techniques']:
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ Q000
299 |         print(f"\n{technique['name']}:")
300 |         print(f"  Description: {technique['description']}")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:298:64: Q000 [*] Single quotes found but double quotes preferred
    |
296 |     print(f"\n4. MORPHOLOGICAL ANALYSIS TECHNIQUES")
297 |     print("-"*40)
298 |     for technique in recommendations['morphological_analysis']['techniques']:
    |                                                                ^^^^^^^^^^^^ Q000
299 |         print(f"\n{technique['name']}:")
300 |         print(f"  Description: {technique['description']}")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:299:9: T201 `print` found
    |
297 |     print("-"*40)
298 |     for technique in recommendations['morphological_analysis']['techniques']:
299 |         print(f"\n{technique['name']}:")
    |         ^^^^^ T201
300 |         print(f"  Description: {technique['description']}")
301 |         print(f"  Accuracy: {technique['accuracy']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:300:9: T201 `print` found
    |
298 |     for technique in recommendations['morphological_analysis']['techniques']:
299 |         print(f"\n{technique['name']}:")
300 |         print(f"  Description: {technique['description']}")
    |         ^^^^^ T201
301 |         print(f"  Accuracy: {technique['accuracy']}")
302 |         print(f"  Speed: {technique['speed']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:301:9: T201 `print` found
    |
299 |         print(f"\n{technique['name']}:")
300 |         print(f"  Description: {technique['description']}")
301 |         print(f"  Accuracy: {technique['accuracy']}")
    |         ^^^^^ T201
302 |         print(f"  Speed: {technique['speed']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:302:9: T201 `print` found
    |
300 |         print(f"  Description: {technique['description']}")
301 |         print(f"  Accuracy: {technique['accuracy']}")
302 |         print(f"  Speed: {technique['speed']}")
    |         ^^^^^ T201
303 |         
304 |     print(f"\nRecommended: {recommendations['morphological_analysis']['recommended_approach']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:304:5: T201 `print` found
    |
302 |         print(f"  Speed: {technique['speed']}")
303 |         
304 |     print(f"\nRecommended: {recommendations['morphological_analysis']['recommended_approach']}")
    |     ^^^^^ T201
305 |     
306 |     print(f"\n5. RECOMMENDED TOOLS AND LIBRARIES")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:306:5: T201 `print` found
    |
304 |     print(f"\nRecommended: {recommendations['morphological_analysis']['recommended_approach']}")
305 |     
306 |     print(f"\n5. RECOMMENDED TOOLS AND LIBRARIES")
    |     ^^^^^ T201
307 |     print("-"*40)
308 |     for tool_name, tool_info in recommendations['implementation_tools'].items():
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:307:5: T201 `print` found
    |
306 |     print(f"\n5. RECOMMENDED TOOLS AND LIBRARIES")
307 |     print("-"*40)
    |     ^^^^^ T201
308 |     for tool_name, tool_info in recommendations['implementation_tools'].items():
309 |         print(f"\n{tool_name.upper()}:")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:308:49: Q000 [*] Single quotes found but double quotes preferred
    |
306 |     print(f"\n5. RECOMMENDED TOOLS AND LIBRARIES")
307 |     print("-"*40)
308 |     for tool_name, tool_info in recommendations['implementation_tools'].items():
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^ Q000
309 |         print(f"\n{tool_name.upper()}:")
310 |         print(f"  {tool_info['description']}")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:309:9: T201 `print` found
    |
307 |     print("-"*40)
308 |     for tool_name, tool_info in recommendations['implementation_tools'].items():
309 |         print(f"\n{tool_name.upper()}:")
    |         ^^^^^ T201
310 |         print(f"  {tool_info['description']}")
311 |         print(f"  Pros: {', '.join(tool_info['pros'])}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:310:9: T201 `print` found
    |
308 |     for tool_name, tool_info in recommendations['implementation_tools'].items():
309 |         print(f"\n{tool_name.upper()}:")
310 |         print(f"  {tool_info['description']}")
    |         ^^^^^ T201
311 |         print(f"  Pros: {', '.join(tool_info['pros'])}")
312 |         print(f"  Cons: {', '.join(tool_info['cons'])}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:311:9: T201 `print` found
    |
309 |         print(f"\n{tool_name.upper()}:")
310 |         print(f"  {tool_info['description']}")
311 |         print(f"  Pros: {', '.join(tool_info['pros'])}")
    |         ^^^^^ T201
312 |         print(f"  Cons: {', '.join(tool_info['cons'])}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:312:9: T201 `print` found
    |
310 |         print(f"  {tool_info['description']}")
311 |         print(f"  Pros: {', '.join(tool_info['pros'])}")
312 |         print(f"  Cons: {', '.join(tool_info['cons'])}")
    |         ^^^^^ T201
313 |         
314 |     print(f"\n6. EXPECTED RESULTS")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:314:5: T201 `print` found
    |
312 |         print(f"  Cons: {', '.join(tool_info['cons'])}")
313 |         
314 |     print(f"\n6. EXPECTED RESULTS")
    |     ^^^^^ T201
315 |     print("-"*40)
316 |     metrics = recommendations['expected_metrics']
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:315:5: T201 `print` found
    |
314 |     print(f"\n6. EXPECTED RESULTS")
315 |     print("-"*40)
    |     ^^^^^ T201
316 |     metrics = recommendations['expected_metrics']
317 |     print(f"\nCurrent State:")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:316:31: Q000 [*] Single quotes found but double quotes preferred
    |
314 |     print(f"\n6. EXPECTED RESULTS")
315 |     print("-"*40)
316 |     metrics = recommendations['expected_metrics']
    |                               ^^^^^^^^^^^^^^^^^^ Q000
317 |     print(f"\nCurrent State:")
318 |     print(f"  Words: {metrics['current_state']['unique_words']:,}")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_report.py:317:5: T201 `print` found
    |
315 |     print("-"*40)
316 |     metrics = recommendations['expected_metrics']
317 |     print(f"\nCurrent State:")
    |     ^^^^^ T201
318 |     print(f"  Words: {metrics['current_state']['unique_words']:,}")
319 |     print(f"  Memory: {metrics['current_state']['memory_usage']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:318:5: T201 `print` found
    |
316 |     metrics = recommendations['expected_metrics']
317 |     print(f"\nCurrent State:")
318 |     print(f"  Words: {metrics['current_state']['unique_words']:,}")
    |     ^^^^^ T201
319 |     print(f"  Memory: {metrics['current_state']['memory_usage']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:319:5: T201 `print` found
    |
317 |     print(f"\nCurrent State:")
318 |     print(f"  Words: {metrics['current_state']['unique_words']:,}")
319 |     print(f"  Memory: {metrics['current_state']['memory_usage']}")
    |     ^^^^^ T201
320 |     
321 |     print(f"\nOptimized State:")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:321:5: T201 `print` found
    |
319 |     print(f"  Memory: {metrics['current_state']['memory_usage']}")
320 |     
321 |     print(f"\nOptimized State:")
    |     ^^^^^ T201
322 |     print(f"  Base forms: {metrics['optimized_state']['base_forms']:,}")
323 |     print(f"  Total mappings: {metrics['optimized_state']['total_mappings']:,}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:322:5: T201 `print` found
    |
321 |     print(f"\nOptimized State:")
322 |     print(f"  Base forms: {metrics['optimized_state']['base_forms']:,}")
    |     ^^^^^ T201
323 |     print(f"  Total mappings: {metrics['optimized_state']['total_mappings']:,}")
324 |     print(f"  Memory: {metrics['optimized_state']['memory_usage']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:323:5: T201 `print` found
    |
321 |     print(f"\nOptimized State:")
322 |     print(f"  Base forms: {metrics['optimized_state']['base_forms']:,}")
323 |     print(f"  Total mappings: {metrics['optimized_state']['total_mappings']:,}")
    |     ^^^^^ T201
324 |     print(f"  Memory: {metrics['optimized_state']['memory_usage']}")
325 |     print(f"  Performance: {metrics['optimized_state']['search_time']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:324:5: T201 `print` found
    |
322 |     print(f"  Base forms: {metrics['optimized_state']['base_forms']:,}")
323 |     print(f"  Total mappings: {metrics['optimized_state']['total_mappings']:,}")
324 |     print(f"  Memory: {metrics['optimized_state']['memory_usage']}")
    |     ^^^^^ T201
325 |     print(f"  Performance: {metrics['optimized_state']['search_time']}")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:325:5: T201 `print` found
    |
323 |     print(f"  Total mappings: {metrics['optimized_state']['total_mappings']:,}")
324 |     print(f"  Memory: {metrics['optimized_state']['memory_usage']}")
325 |     print(f"  Performance: {metrics['optimized_state']['search_time']}")
    |     ^^^^^ T201
326 |     
327 |     print(f"\n7. IMPLEMENTATION ROADMAP")
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:327:5: T201 `print` found
    |
325 |     print(f"  Performance: {metrics['optimized_state']['search_time']}")
326 |     
327 |     print(f"\n7. IMPLEMENTATION ROADMAP")
    |     ^^^^^ T201
328 |     print("-"*40)
329 |     print("""
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:328:5: T201 `print` found
    |
327 |     print(f"\n7. IMPLEMENTATION ROADMAP")
328 |     print("-"*40)
    |     ^^^^^ T201
329 |     print("""
330 | Week 1: Research & Design
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:329:5: T201 `print` found
    |
327 |     print(f"\n7. IMPLEMENTATION ROADMAP")
328 |     print("-"*40)
329 |     print("""
    |     ^^^^^ T201
330 | Week 1: Research & Design
331 |   • Evaluate NLTK vs spaCy for the project
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:356:5: T201 `print` found
    |
354 | """)
355 |
356 |     print(f"\n8. CONCLUSION")
    |     ^^^^^ T201
357 |     print("-"*40)
358 |     print("""
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:357:5: T201 `print` found
    |
356 |     print(f"\n8. CONCLUSION")
357 |     print("-"*40)
    |     ^^^^^ T201
358 |     print("""
359 | The optimization from 267,751 words to ~55,000 base forms is achievable
    |
    = help: Remove `print`

scripts/corpus_optimization_report.py:358:5: T201 `print` found
    |
356 |     print(f"\n8. CONCLUSION")
357 |     print("-"*40)
358 |     print("""
    |     ^^^^^ T201
359 | The optimization from 267,751 words to ~55,000 base forms is achievable
360 | and will provide significant benefits:
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env python3
  | ^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | """
3 | Comprehensive Corpus Optimization Strategy for Floridify
  |

scripts/corpus_optimization_strategy.py:14:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
12 | from pathlib import Path
13 | from collections import Counter, defaultdict
14 | from typing import Dict, List, Set, Tuple, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 |
16 | # Add the backend src to path
   |

scripts/corpus_optimization_strategy.py:14:1: UP035 `typing.List` is deprecated, use `list` instead
   |
12 | from pathlib import Path
13 | from collections import Counter, defaultdict
14 | from typing import Dict, List, Set, Tuple, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 |
16 | # Add the backend src to path
   |

scripts/corpus_optimization_strategy.py:14:1: UP035 `typing.Set` is deprecated, use `set` instead
   |
12 | from pathlib import Path
13 | from collections import Counter, defaultdict
14 | from typing import Dict, List, Set, Tuple, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 |
16 | # Add the backend src to path
   |

scripts/corpus_optimization_strategy.py:14:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
12 | from pathlib import Path
13 | from collections import Counter, defaultdict
14 | from typing import Dict, List, Set, Tuple, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 |
16 | # Add the backend src to path
   |

scripts/corpus_optimization_strategy.py:29:9: ANN204 Missing return type annotation for special method `__init__`
   |
27 |     """Comprehensive corpus optimization analysis and recommendations."""
28 |     
29 |     def __init__(self):
   |         ^^^^^^^^ ANN204
30 |         self.text_processor = get_text_processor()
31 |         self.corpus_path = Path(__file__).parent.parent / "data/search/lexicons/sowpods_scrabble_words.txt"
   |
   = help: Add return type annotation: `None`

scripts/corpus_optimization_strategy.py:32:21: UP006 [*] Use `list` instead of `List` for type annotation
   |
30 |         self.text_processor = get_text_processor()
31 |         self.corpus_path = Path(__file__).parent.parent / "data/search/lexicons/sowpods_scrabble_words.txt"
32 |         self.words: List[str] = []
   |                     ^^^^ UP006
33 |         self.analysis_results: Dict = {}
   |
   = help: Replace with `list`

scripts/corpus_optimization_strategy.py:33:32: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
31 |         self.corpus_path = Path(__file__).parent.parent / "data/search/lexicons/sowpods_scrabble_words.txt"
32 |         self.words: List[str] = []
33 |         self.analysis_results: Dict = {}
   |                                ^^^^ UP006
34 |         
35 |     def load_corpus(self) -> None:
   |
   = help: Replace with `dict`

scripts/corpus_optimization_strategy.py:37:21: G004 Logging statement uses f-string
   |
35 |     def load_corpus(self) -> None:
36 |         """Load the SOWPODS corpus."""
37 |         logger.info(f"Loading corpus from {self.corpus_path}")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
38 |         with open(self.corpus_path, 'r', encoding='utf-8') as f:
39 |             self.words = [line.strip().lower() for line in f if line.strip()]
   |

scripts/corpus_optimization_strategy.py:38:37: Q000 [*] Single quotes found but double quotes preferred
   |
36 |         """Load the SOWPODS corpus."""
37 |         logger.info(f"Loading corpus from {self.corpus_path}")
38 |         with open(self.corpus_path, 'r', encoding='utf-8') as f:
   |                                     ^^^ Q000
39 |             self.words = [line.strip().lower() for line in f if line.strip()]
40 |         logger.info(f"Loaded {len(self.words):,} words")
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:38:37: UP015 [*] Unnecessary mode argument
   |
36 |         """Load the SOWPODS corpus."""
37 |         logger.info(f"Loading corpus from {self.corpus_path}")
38 |         with open(self.corpus_path, 'r', encoding='utf-8') as f:
   |                                     ^^^ UP015
39 |             self.words = [line.strip().lower() for line in f if line.strip()]
40 |         logger.info(f"Loaded {len(self.words):,} words")
   |
   = help: Remove mode argument

scripts/corpus_optimization_strategy.py:38:51: Q000 [*] Single quotes found but double quotes preferred
   |
36 |         """Load the SOWPODS corpus."""
37 |         logger.info(f"Loading corpus from {self.corpus_path}")
38 |         with open(self.corpus_path, 'r', encoding='utf-8') as f:
   |                                                   ^^^^^^^ Q000
39 |             self.words = [line.strip().lower() for line in f if line.strip()]
40 |         logger.info(f"Loaded {len(self.words):,} words")
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:40:21: G004 Logging statement uses f-string
   |
38 |         with open(self.corpus_path, 'r', encoding='utf-8') as f:
39 |             self.words = [line.strip().lower() for line in f if line.strip()]
40 |         logger.info(f"Loaded {len(self.words):,} words")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
41 |         
42 |     def analyze_inflection_patterns(self) -> Dict[str, int]:
   |

scripts/corpus_optimization_strategy.py:42:9: PLR0912 Too many branches (13 > 12)
   |
40 |         logger.info(f"Loaded {len(self.words):,} words")
41 |         
42 |     def analyze_inflection_patterns(self) -> Dict[str, int]:
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
43 |         """Analyze common inflection patterns in English."""
44 |         patterns = {
   |

scripts/corpus_optimization_strategy.py:42:46: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
40 |         logger.info(f"Loaded {len(self.words):,} words")
41 |         
42 |     def analyze_inflection_patterns(self) -> Dict[str, int]:
   |                                              ^^^^ UP006
43 |         """Analyze common inflection patterns in English."""
44 |         patterns = {
   |
   = help: Replace with `dict`

scripts/corpus_optimization_strategy.py:46:13: Q000 [*] Single quotes found but double quotes preferred
   |
44 |         patterns = {
45 |             # Plurals
46 |             'plural_s': 0,
   |             ^^^^^^^^^^ Q000
47 |             'plural_es': 0,
48 |             'plural_ies': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:47:13: Q000 [*] Single quotes found but double quotes preferred
   |
45 |             # Plurals
46 |             'plural_s': 0,
47 |             'plural_es': 0,
   |             ^^^^^^^^^^^ Q000
48 |             'plural_ies': 0,
49 |             'plural_ves': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:48:13: Q000 [*] Single quotes found but double quotes preferred
   |
46 |             'plural_s': 0,
47 |             'plural_es': 0,
48 |             'plural_ies': 0,
   |             ^^^^^^^^^^^^ Q000
49 |             'plural_ves': 0,
50 |             'plural_irregular': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:49:13: Q000 [*] Single quotes found but double quotes preferred
   |
47 |             'plural_es': 0,
48 |             'plural_ies': 0,
49 |             'plural_ves': 0,
   |             ^^^^^^^^^^^^ Q000
50 |             'plural_irregular': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:50:13: Q000 [*] Single quotes found but double quotes preferred
   |
48 |             'plural_ies': 0,
49 |             'plural_ves': 0,
50 |             'plural_irregular': 0,
   |             ^^^^^^^^^^^^^^^^^^ Q000
51 |             
52 |             # Verb forms
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:53:13: Q000 [*] Single quotes found but double quotes preferred
   |
52 |             # Verb forms
53 |             'verb_ed': 0,
   |             ^^^^^^^^^ Q000
54 |             'verb_ing': 0,
55 |             'verb_s': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:54:13: Q000 [*] Single quotes found but double quotes preferred
   |
52 |             # Verb forms
53 |             'verb_ed': 0,
54 |             'verb_ing': 0,
   |             ^^^^^^^^^^ Q000
55 |             'verb_s': 0,
56 |             'verb_ies': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:55:13: Q000 [*] Single quotes found but double quotes preferred
   |
53 |             'verb_ed': 0,
54 |             'verb_ing': 0,
55 |             'verb_s': 0,
   |             ^^^^^^^^ Q000
56 |             'verb_ies': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:56:13: Q000 [*] Single quotes found but double quotes preferred
   |
54 |             'verb_ing': 0,
55 |             'verb_s': 0,
56 |             'verb_ies': 0,
   |             ^^^^^^^^^^ Q000
57 |             
58 |             # Comparatives/Superlatives
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:59:13: Q000 [*] Single quotes found but double quotes preferred
   |
58 |             # Comparatives/Superlatives
59 |             'comp_er': 0,
   |             ^^^^^^^^^ Q000
60 |             'super_est': 0,
61 |             'comp_ier': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:60:13: Q000 [*] Single quotes found but double quotes preferred
   |
58 |             # Comparatives/Superlatives
59 |             'comp_er': 0,
60 |             'super_est': 0,
   |             ^^^^^^^^^^^ Q000
61 |             'comp_ier': 0,
62 |             'super_iest': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:61:13: Q000 [*] Single quotes found but double quotes preferred
   |
59 |             'comp_er': 0,
60 |             'super_est': 0,
61 |             'comp_ier': 0,
   |             ^^^^^^^^^^ Q000
62 |             'super_iest': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:62:13: Q000 [*] Single quotes found but double quotes preferred
   |
60 |             'super_est': 0,
61 |             'comp_ier': 0,
62 |             'super_iest': 0,
   |             ^^^^^^^^^^^^ Q000
63 |             
64 |             # Derivations
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:65:13: Q000 [*] Single quotes found but double quotes preferred
   |
64 |             # Derivations
65 |             'adverb_ly': 0,
   |             ^^^^^^^^^^^ Q000
66 |             'noun_ness': 0,
67 |             'noun_ment': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:66:13: Q000 [*] Single quotes found but double quotes preferred
   |
64 |             # Derivations
65 |             'adverb_ly': 0,
66 |             'noun_ness': 0,
   |             ^^^^^^^^^^^ Q000
67 |             'noun_ment': 0,
68 |             'noun_tion': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:67:13: Q000 [*] Single quotes found but double quotes preferred
   |
65 |             'adverb_ly': 0,
66 |             'noun_ness': 0,
67 |             'noun_ment': 0,
   |             ^^^^^^^^^^^ Q000
68 |             'noun_tion': 0,
69 |             'adj_able': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:68:13: Q000 [*] Single quotes found but double quotes preferred
   |
66 |             'noun_ness': 0,
67 |             'noun_ment': 0,
68 |             'noun_tion': 0,
   |             ^^^^^^^^^^^ Q000
69 |             'adj_able': 0,
70 |             'adj_ful': 0,
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:69:13: Q000 [*] Single quotes found but double quotes preferred
   |
67 |             'noun_ment': 0,
68 |             'noun_tion': 0,
69 |             'adj_able': 0,
   |             ^^^^^^^^^^ Q000
70 |             'adj_ful': 0,
71 |             'adj_less': 0
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:70:13: Q000 [*] Single quotes found but double quotes preferred
   |
68 |             'noun_tion': 0,
69 |             'adj_able': 0,
70 |             'adj_ful': 0,
   |             ^^^^^^^^^ Q000
71 |             'adj_less': 0
72 |         }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:71:13: Q000 [*] Single quotes found but double quotes preferred
   |
69 |             'adj_able': 0,
70 |             'adj_ful': 0,
71 |             'adj_less': 0
   |             ^^^^^^^^^^ Q000
72 |         }
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:76:30: Q000 [*] Single quotes found but double quotes preferred
   |
74 |         for word in self.words:
75 |             # Plural patterns
76 |             if word.endswith('s') and not word.endswith('ss'):
   |                              ^^^ Q000
77 |                 patterns['plural_s'] += 1
78 |             elif word.endswith('es'):
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:76:57: Q000 [*] Single quotes found but double quotes preferred
   |
74 |         for word in self.words:
75 |             # Plural patterns
76 |             if word.endswith('s') and not word.endswith('ss'):
   |                                                         ^^^^ Q000
77 |                 patterns['plural_s'] += 1
78 |             elif word.endswith('es'):
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:77:26: Q000 [*] Single quotes found but double quotes preferred
   |
75 |             # Plural patterns
76 |             if word.endswith('s') and not word.endswith('ss'):
77 |                 patterns['plural_s'] += 1
   |                          ^^^^^^^^^^ Q000
78 |             elif word.endswith('es'):
79 |                 patterns['plural_es'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:78:32: Q000 [*] Single quotes found but double quotes preferred
   |
76 |             if word.endswith('s') and not word.endswith('ss'):
77 |                 patterns['plural_s'] += 1
78 |             elif word.endswith('es'):
   |                                ^^^^ Q000
79 |                 patterns['plural_es'] += 1
80 |             elif word.endswith('ies') and len(word) > 3:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:79:26: Q000 [*] Single quotes found but double quotes preferred
   |
77 |                 patterns['plural_s'] += 1
78 |             elif word.endswith('es'):
79 |                 patterns['plural_es'] += 1
   |                          ^^^^^^^^^^^ Q000
80 |             elif word.endswith('ies') and len(word) > 3:
81 |                 patterns['plural_ies'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:80:32: Q000 [*] Single quotes found but double quotes preferred
   |
78 |             elif word.endswith('es'):
79 |                 patterns['plural_es'] += 1
80 |             elif word.endswith('ies') and len(word) > 3:
   |                                ^^^^^ Q000
81 |                 patterns['plural_ies'] += 1
82 |             elif word.endswith('ves'):
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:80:55: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
78 |             elif word.endswith('es'):
79 |                 patterns['plural_es'] += 1
80 |             elif word.endswith('ies') and len(word) > 3:
   |                                                       ^ PLR2004
81 |                 patterns['plural_ies'] += 1
82 |             elif word.endswith('ves'):
   |

scripts/corpus_optimization_strategy.py:81:26: Q000 [*] Single quotes found but double quotes preferred
   |
79 |                 patterns['plural_es'] += 1
80 |             elif word.endswith('ies') and len(word) > 3:
81 |                 patterns['plural_ies'] += 1
   |                          ^^^^^^^^^^^^ Q000
82 |             elif word.endswith('ves'):
83 |                 patterns['plural_ves'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:82:32: Q000 [*] Single quotes found but double quotes preferred
   |
80 |             elif word.endswith('ies') and len(word) > 3:
81 |                 patterns['plural_ies'] += 1
82 |             elif word.endswith('ves'):
   |                                ^^^^^ Q000
83 |                 patterns['plural_ves'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:83:26: Q000 [*] Single quotes found but double quotes preferred
   |
81 |                 patterns['plural_ies'] += 1
82 |             elif word.endswith('ves'):
83 |                 patterns['plural_ves'] += 1
   |                          ^^^^^^^^^^^^ Q000
84 |                 
85 |             # Verb patterns
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:86:30: Q000 [*] Single quotes found but double quotes preferred
   |
85 |             # Verb patterns
86 |             if word.endswith('ed') and len(word) > 3:
   |                              ^^^^ Q000
87 |                 patterns['verb_ed'] += 1
88 |             elif word.endswith('ing') and len(word) > 4:
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:86:52: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
85 |             # Verb patterns
86 |             if word.endswith('ed') and len(word) > 3:
   |                                                    ^ PLR2004
87 |                 patterns['verb_ed'] += 1
88 |             elif word.endswith('ing') and len(word) > 4:
   |

scripts/corpus_optimization_strategy.py:87:26: Q000 [*] Single quotes found but double quotes preferred
   |
85 |             # Verb patterns
86 |             if word.endswith('ed') and len(word) > 3:
87 |                 patterns['verb_ed'] += 1
   |                          ^^^^^^^^^ Q000
88 |             elif word.endswith('ing') and len(word) > 4:
89 |                 patterns['verb_ing'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:88:32: Q000 [*] Single quotes found but double quotes preferred
   |
86 |             if word.endswith('ed') and len(word) > 3:
87 |                 patterns['verb_ed'] += 1
88 |             elif word.endswith('ing') and len(word) > 4:
   |                                ^^^^^ Q000
89 |                 patterns['verb_ing'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:88:55: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
   |
86 |             if word.endswith('ed') and len(word) > 3:
87 |                 patterns['verb_ed'] += 1
88 |             elif word.endswith('ing') and len(word) > 4:
   |                                                       ^ PLR2004
89 |                 patterns['verb_ing'] += 1
   |

scripts/corpus_optimization_strategy.py:89:26: Q000 [*] Single quotes found but double quotes preferred
   |
87 |                 patterns['verb_ed'] += 1
88 |             elif word.endswith('ing') and len(word) > 4:
89 |                 patterns['verb_ing'] += 1
   |                          ^^^^^^^^^^ Q000
90 |                 
91 |             # Comparative/Superlative
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:92:30: Q000 [*] Single quotes found but double quotes preferred
   |
91 |             # Comparative/Superlative
92 |             if word.endswith('er') and not word.endswith('eer'):
   |                              ^^^^ Q000
93 |                 patterns['comp_er'] += 1
94 |             elif word.endswith('est'):
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:92:58: Q000 [*] Single quotes found but double quotes preferred
   |
91 |             # Comparative/Superlative
92 |             if word.endswith('er') and not word.endswith('eer'):
   |                                                          ^^^^^ Q000
93 |                 patterns['comp_er'] += 1
94 |             elif word.endswith('est'):
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:93:26: Q000 [*] Single quotes found but double quotes preferred
   |
91 |             # Comparative/Superlative
92 |             if word.endswith('er') and not word.endswith('eer'):
93 |                 patterns['comp_er'] += 1
   |                          ^^^^^^^^^ Q000
94 |             elif word.endswith('est'):
95 |                 patterns['super_est'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:94:32: Q000 [*] Single quotes found but double quotes preferred
   |
92 |             if word.endswith('er') and not word.endswith('eer'):
93 |                 patterns['comp_er'] += 1
94 |             elif word.endswith('est'):
   |                                ^^^^^ Q000
95 |                 patterns['super_est'] += 1
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:95:26: Q000 [*] Single quotes found but double quotes preferred
   |
93 |                 patterns['comp_er'] += 1
94 |             elif word.endswith('est'):
95 |                 patterns['super_est'] += 1
   |                          ^^^^^^^^^^^ Q000
96 |                 
97 |             # Derivations
   |
   = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:98:30: Q000 [*] Single quotes found but double quotes preferred
    |
 97 |             # Derivations
 98 |             if word.endswith('ly') and len(word) > 3:
    |                              ^^^^ Q000
 99 |                 patterns['adverb_ly'] += 1
100 |             elif word.endswith('ness'):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:98:52: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
 97 |             # Derivations
 98 |             if word.endswith('ly') and len(word) > 3:
    |                                                    ^ PLR2004
 99 |                 patterns['adverb_ly'] += 1
100 |             elif word.endswith('ness'):
    |

scripts/corpus_optimization_strategy.py:99:26: Q000 [*] Single quotes found but double quotes preferred
    |
 97 |             # Derivations
 98 |             if word.endswith('ly') and len(word) > 3:
 99 |                 patterns['adverb_ly'] += 1
    |                          ^^^^^^^^^^^ Q000
100 |             elif word.endswith('ness'):
101 |                 patterns['noun_ness'] += 1
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:100:32: Q000 [*] Single quotes found but double quotes preferred
    |
 98 |             if word.endswith('ly') and len(word) > 3:
 99 |                 patterns['adverb_ly'] += 1
100 |             elif word.endswith('ness'):
    |                                ^^^^^^ Q000
101 |                 patterns['noun_ness'] += 1
102 |             elif word.endswith('ment'):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:101:26: Q000 [*] Single quotes found but double quotes preferred
    |
 99 |                 patterns['adverb_ly'] += 1
100 |             elif word.endswith('ness'):
101 |                 patterns['noun_ness'] += 1
    |                          ^^^^^^^^^^^ Q000
102 |             elif word.endswith('ment'):
103 |                 patterns['noun_ment'] += 1
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:102:32: Q000 [*] Single quotes found but double quotes preferred
    |
100 |             elif word.endswith('ness'):
101 |                 patterns['noun_ness'] += 1
102 |             elif word.endswith('ment'):
    |                                ^^^^^^ Q000
103 |                 patterns['noun_ment'] += 1
104 |             elif word.endswith('tion'):
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:103:26: Q000 [*] Single quotes found but double quotes preferred
    |
101 |                 patterns['noun_ness'] += 1
102 |             elif word.endswith('ment'):
103 |                 patterns['noun_ment'] += 1
    |                          ^^^^^^^^^^^ Q000
104 |             elif word.endswith('tion'):
105 |                 patterns['noun_tion'] += 1
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:104:32: Q000 [*] Single quotes found but double quotes preferred
    |
102 |             elif word.endswith('ment'):
103 |                 patterns['noun_ment'] += 1
104 |             elif word.endswith('tion'):
    |                                ^^^^^^ Q000
105 |                 patterns['noun_tion'] += 1
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:105:26: Q000 [*] Single quotes found but double quotes preferred
    |
103 |                 patterns['noun_ment'] += 1
104 |             elif word.endswith('tion'):
105 |                 patterns['noun_tion'] += 1
    |                          ^^^^^^^^^^^ Q000
106 |                 
107 |         return patterns
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:109:38: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
107 |         return patterns
108 |         
109 |     def estimate_base_forms(self) -> Dict[str, any]:
    |                                      ^^^^ UP006
110 |         """Estimate the number of unique base forms using various methods."""
111 |         estimates = {}
    |
    = help: Replace with `dict`

scripts/corpus_optimization_strategy.py:117:28: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                            ^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:33: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                 ^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:39: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                       ^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:45: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                             ^^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:52: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                                    ^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:58: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                                          ^^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:65: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                                                 ^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:71: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                                                       ^^^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:79: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                                                               ^^^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:117:87: Q000 [*] Single quotes found but double quotes preferred
    |
115 |         suffix_map = defaultdict(list)
116 |         
117 |         common_suffixes = ['s', 'es', 'ed', 'ing', 'er', 'est', 'ly', 'ness', 'ment', 'tion']
    |                                                                                       ^^^^^^ Q000
118 |         
119 |         for word in self.words:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:130:19: Q000 [*] Single quotes found but double quotes preferred
    |
128 |             simple_bases.add(base)
129 |             
130 |         estimates['simple_suffix_stripping'] = {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ Q000
131 |             'base_forms': len(simple_bases),
132 |             'reduction': len(self.words) - len(simple_bases),
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:131:13: Q000 [*] Single quotes found but double quotes preferred
    |
130 |         estimates['simple_suffix_stripping'] = {
131 |             'base_forms': len(simple_bases),
    |             ^^^^^^^^^^^^ Q000
132 |             'reduction': len(self.words) - len(simple_bases),
133 |             'reduction_pct': ((len(self.words) - len(simple_bases)) / len(self.words)) * 100,
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:132:13: Q000 [*] Single quotes found but double quotes preferred
    |
130 |         estimates['simple_suffix_stripping'] = {
131 |             'base_forms': len(simple_bases),
132 |             'reduction': len(self.words) - len(simple_bases),
    |             ^^^^^^^^^^^ Q000
133 |             'reduction_pct': ((len(self.words) - len(simple_bases)) / len(self.words)) * 100,
134 |             'sample_mappings': dict(list(suffix_map.items())[:10])
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:133:13: Q000 [*] Single quotes found but double quotes preferred
    |
131 |             'base_forms': len(simple_bases),
132 |             'reduction': len(self.words) - len(simple_bases),
133 |             'reduction_pct': ((len(self.words) - len(simple_bases)) / len(self.words)) * 100,
    |             ^^^^^^^^^^^^^^^ Q000
134 |             'sample_mappings': dict(list(suffix_map.items())[:10])
135 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:134:13: Q000 [*] Single quotes found but double quotes preferred
    |
132 |             'reduction': len(self.words) - len(simple_bases),
133 |             'reduction_pct': ((len(self.words) - len(simple_bases)) / len(self.words)) * 100,
134 |             'sample_mappings': dict(list(suffix_map.items())[:10])
    |             ^^^^^^^^^^^^^^^^^ Q000
135 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:144:19: Q000 [*] Single quotes found but double quotes preferred
    |
142 |             linguistic_bases.add(base)
143 |             
144 |         estimates['linguistic_rules'] = {
    |                   ^^^^^^^^^^^^^^^^^^ Q000
145 |             'base_forms': len(linguistic_bases),
146 |             'reduction': len(self.words) - len(linguistic_bases),
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:145:13: Q000 [*] Single quotes found but double quotes preferred
    |
144 |         estimates['linguistic_rules'] = {
145 |             'base_forms': len(linguistic_bases),
    |             ^^^^^^^^^^^^ Q000
146 |             'reduction': len(self.words) - len(linguistic_bases),
147 |             'reduction_pct': ((len(self.words) - len(linguistic_bases)) / len(self.words)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:146:13: Q000 [*] Single quotes found but double quotes preferred
    |
144 |         estimates['linguistic_rules'] = {
145 |             'base_forms': len(linguistic_bases),
146 |             'reduction': len(self.words) - len(linguistic_bases),
    |             ^^^^^^^^^^^ Q000
147 |             'reduction_pct': ((len(self.words) - len(linguistic_bases)) / len(self.words)) * 100
148 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:147:13: Q000 [*] Single quotes found but double quotes preferred
    |
145 |             'base_forms': len(linguistic_bases),
146 |             'reduction': len(self.words) - len(linguistic_bases),
147 |             'reduction_pct': ((len(self.words) - len(linguistic_bases)) / len(self.words)) * 100
    |             ^^^^^^^^^^^^^^^ Q000
148 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:154:19: Q000 [*] Single quotes found but double quotes preferred
    |
152 |         cluster_bases = self.frequency_based_clustering()
153 |         
154 |         estimates['frequency_clustering'] = {
    |                   ^^^^^^^^^^^^^^^^^^^^^^ Q000
155 |             'base_forms': len(cluster_bases),
156 |             'reduction': len(self.words) - len(cluster_bases),
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:155:13: Q000 [*] Single quotes found but double quotes preferred
    |
154 |         estimates['frequency_clustering'] = {
155 |             'base_forms': len(cluster_bases),
    |             ^^^^^^^^^^^^ Q000
156 |             'reduction': len(self.words) - len(cluster_bases),
157 |             'reduction_pct': ((len(self.words) - len(cluster_bases)) / len(self.words)) * 100
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:156:13: Q000 [*] Single quotes found but double quotes preferred
    |
154 |         estimates['frequency_clustering'] = {
155 |             'base_forms': len(cluster_bases),
156 |             'reduction': len(self.words) - len(cluster_bases),
    |             ^^^^^^^^^^^ Q000
157 |             'reduction_pct': ((len(self.words) - len(cluster_bases)) / len(self.words)) * 100
158 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:157:13: Q000 [*] Single quotes found but double quotes preferred
    |
155 |             'base_forms': len(cluster_bases),
156 |             'reduction': len(self.words) - len(cluster_bases),
157 |             'reduction_pct': ((len(self.words) - len(cluster_bases)) / len(self.words)) * 100
    |             ^^^^^^^^^^^^^^^ Q000
158 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:13: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |             ^^^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:21: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                     ^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:27: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                           ^^^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:35: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                                   ^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:41: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                                         ^^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:48: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                                                ^^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:55: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                                                       ^^^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:168:63: Q000 [*] Single quotes found but double quotes preferred
    |
166 |         # Handle special cases first
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
    |                                                               ^^^^^ Q000
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:13: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |             ^^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:20: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                    ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:26: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                          ^^^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:34: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                  ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:40: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                        ^^^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:48: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:54: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                      ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:60: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                            ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:66: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                                  ^^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:73: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                                         ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:79: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                                               ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:169:85: Q000 [*] Single quotes found but double quotes preferred
    |
167 |         irregular_verbs = {
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
    |                                                                                     ^^^^ Q000
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:13: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |             ^^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:20: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                    ^^^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:28: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                            ^^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:35: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                                   ^^^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:43: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                                           ^^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:50: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                                                  ^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:56: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                                                        ^^^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:170:64: Q000 [*] Single quotes found but double quotes preferred
    |
168 |             'went': 'go', 'gone': 'go', 'saw': 'see', 'seen': 'see',
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
    |                                                                ^^^^ Q000
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:13: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |             ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:21: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                     ^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:28: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                            ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:36: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                    ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:44: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                            ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:52: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                                    ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:60: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                                            ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:68: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                                                    ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:76: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                                                            ^^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:171:85: Q000 [*] Single quotes found but double quotes preferred
    |
169 |             'was': 'be', 'were': 'be', 'been': 'be', 'am': 'be', 'are': 'be', 'is': 'be',
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
    |                                                                                     ^^^^^^ Q000
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:13: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |             ^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:21: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                     ^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:29: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                             ^^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:38: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                                      ^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:46: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                                              ^^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:55: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                                                       ^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:63: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                                                               ^^^^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:172:74: Q000 [*] Single quotes found but double quotes preferred
    |
170 |             'had': 'have', 'has': 'have', 'did': 'do', 'does': 'do',
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
    |                                                                          ^^^^^^^ Q000
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:13: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |             ^^^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:24: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                        ^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:33: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                                 ^^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:43: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                                           ^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:50: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                                                  ^^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:60: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                                                            ^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:69: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                                                                     ^^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:173:79: Q000 [*] Single quotes found but double quotes preferred
    |
171 |             'said': 'say', 'made': 'make', 'came': 'come', 'took': 'take', 'taken': 'take',
172 |             'gave': 'give', 'given': 'give', 'found': 'find', 'thought': 'think',
173 |             'brought': 'bring', 'bought': 'buy', 'caught': 'catch', 'taught': 'teach'
    |                                                                               ^^^^^^^ Q000
174 |         }
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:182:14: Q000 [*] Single quotes found but double quotes preferred
    |
180 |         rules = [
181 |             # Verb inflections
182 |             ('ied', 'y'),      # studied -> study
    |              ^^^^^ Q000
183 |             ('ying', 'y'),     # studying -> study  
184 |             ('ies', 'y'),      # studies -> study
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:182:21: Q000 [*] Single quotes found but double quotes preferred
    |
180 |         rules = [
181 |             # Verb inflections
182 |             ('ied', 'y'),      # studied -> study
    |                     ^^^ Q000
183 |             ('ying', 'y'),     # studying -> study  
184 |             ('ies', 'y'),      # studies -> study
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:183:14: Q000 [*] Single quotes found but double quotes preferred
    |
181 |             # Verb inflections
182 |             ('ied', 'y'),      # studied -> study
183 |             ('ying', 'y'),     # studying -> study  
    |              ^^^^^^ Q000
184 |             ('ies', 'y'),      # studies -> study
185 |             ('ied', 'y'),      # cried -> cry
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:183:22: Q000 [*] Single quotes found but double quotes preferred
    |
181 |             # Verb inflections
182 |             ('ied', 'y'),      # studied -> study
183 |             ('ying', 'y'),     # studying -> study  
    |                      ^^^ Q000
184 |             ('ies', 'y'),      # studies -> study
185 |             ('ied', 'y'),      # cried -> cry
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:184:14: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             ('ied', 'y'),      # studied -> study
183 |             ('ying', 'y'),     # studying -> study  
184 |             ('ies', 'y'),      # studies -> study
    |              ^^^^^ Q000
185 |             ('ied', 'y'),      # cried -> cry
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:184:21: Q000 [*] Single quotes found but double quotes preferred
    |
182 |             ('ied', 'y'),      # studied -> study
183 |             ('ying', 'y'),     # studying -> study  
184 |             ('ies', 'y'),      # studies -> study
    |                     ^^^ Q000
185 |             ('ied', 'y'),      # cried -> cry
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:185:14: Q000 [*] Single quotes found but double quotes preferred
    |
183 |             ('ying', 'y'),     # studying -> study  
184 |             ('ies', 'y'),      # studies -> study
185 |             ('ied', 'y'),      # cried -> cry
    |              ^^^^^ Q000
186 |             
187 |             # Double consonant + ed/ing
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:185:21: Q000 [*] Single quotes found but double quotes preferred
    |
183 |             ('ying', 'y'),     # studying -> study  
184 |             ('ies', 'y'),      # studies -> study
185 |             ('ied', 'y'),      # cried -> cry
    |                     ^^^ Q000
186 |             
187 |             # Double consonant + ed/ing
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:188:14: Q000 [*] Single quotes found but double quotes preferred
    |
187 |             # Double consonant + ed/ing
188 |             ('tted', 't'),     # submitted -> submit
    |              ^^^^^^ Q000
189 |             ('tting', 't'),    # submitting -> submit
190 |             ('pped', 'p'),     # stopped -> stop
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:188:22: Q000 [*] Single quotes found but double quotes preferred
    |
187 |             # Double consonant + ed/ing
188 |             ('tted', 't'),     # submitted -> submit
    |                      ^^^ Q000
189 |             ('tting', 't'),    # submitting -> submit
190 |             ('pped', 'p'),     # stopped -> stop
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:189:14: Q000 [*] Single quotes found but double quotes preferred
    |
187 |             # Double consonant + ed/ing
188 |             ('tted', 't'),     # submitted -> submit
189 |             ('tting', 't'),    # submitting -> submit
    |              ^^^^^^^ Q000
190 |             ('pped', 'p'),     # stopped -> stop
191 |             ('pping', 'p'),    # stopping -> stop
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:189:23: Q000 [*] Single quotes found but double quotes preferred
    |
187 |             # Double consonant + ed/ing
188 |             ('tted', 't'),     # submitted -> submit
189 |             ('tting', 't'),    # submitting -> submit
    |                       ^^^ Q000
190 |             ('pped', 'p'),     # stopped -> stop
191 |             ('pping', 'p'),    # stopping -> stop
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:190:14: Q000 [*] Single quotes found but double quotes preferred
    |
188 |             ('tted', 't'),     # submitted -> submit
189 |             ('tting', 't'),    # submitting -> submit
190 |             ('pped', 'p'),     # stopped -> stop
    |              ^^^^^^ Q000
191 |             ('pping', 'p'),    # stopping -> stop
192 |             ('nned', 'n'),     # planned -> plan
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:190:22: Q000 [*] Single quotes found but double quotes preferred
    |
188 |             ('tted', 't'),     # submitted -> submit
189 |             ('tting', 't'),    # submitting -> submit
190 |             ('pped', 'p'),     # stopped -> stop
    |                      ^^^ Q000
191 |             ('pping', 'p'),    # stopping -> stop
192 |             ('nned', 'n'),     # planned -> plan
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:191:14: Q000 [*] Single quotes found but double quotes preferred
    |
189 |             ('tting', 't'),    # submitting -> submit
190 |             ('pped', 'p'),     # stopped -> stop
191 |             ('pping', 'p'),    # stopping -> stop
    |              ^^^^^^^ Q000
192 |             ('nned', 'n'),     # planned -> plan
193 |             ('nning', 'n'),    # planning -> plan
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:191:23: Q000 [*] Single quotes found but double quotes preferred
    |
189 |             ('tting', 't'),    # submitting -> submit
190 |             ('pped', 'p'),     # stopped -> stop
191 |             ('pping', 'p'),    # stopping -> stop
    |                       ^^^ Q000
192 |             ('nned', 'n'),     # planned -> plan
193 |             ('nning', 'n'),    # planning -> plan
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:192:14: Q000 [*] Single quotes found but double quotes preferred
    |
190 |             ('pped', 'p'),     # stopped -> stop
191 |             ('pping', 'p'),    # stopping -> stop
192 |             ('nned', 'n'),     # planned -> plan
    |              ^^^^^^ Q000
193 |             ('nning', 'n'),    # planning -> plan
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:192:22: Q000 [*] Single quotes found but double quotes preferred
    |
190 |             ('pped', 'p'),     # stopped -> stop
191 |             ('pping', 'p'),    # stopping -> stop
192 |             ('nned', 'n'),     # planned -> plan
    |                      ^^^ Q000
193 |             ('nning', 'n'),    # planning -> plan
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:193:14: Q000 [*] Single quotes found but double quotes preferred
    |
191 |             ('pping', 'p'),    # stopping -> stop
192 |             ('nned', 'n'),     # planned -> plan
193 |             ('nning', 'n'),    # planning -> plan
    |              ^^^^^^^ Q000
194 |             
195 |             # Standard verb forms
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:193:23: Q000 [*] Single quotes found but double quotes preferred
    |
191 |             ('pping', 'p'),    # stopping -> stop
192 |             ('nned', 'n'),     # planned -> plan
193 |             ('nning', 'n'),    # planning -> plan
    |                       ^^^ Q000
194 |             
195 |             # Standard verb forms
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:196:14: Q000 [*] Single quotes found but double quotes preferred
    |
195 |             # Standard verb forms
196 |             ('ing', ''),       # walking -> walk
    |              ^^^^^ Q000
197 |             ('ed', ''),        # walked -> walk
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:196:21: Q000 [*] Single quotes found but double quotes preferred
    |
195 |             # Standard verb forms
196 |             ('ing', ''),       # walking -> walk
    |                     ^^ Q000
197 |             ('ed', ''),        # walked -> walk
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:197:14: Q000 [*] Single quotes found but double quotes preferred
    |
195 |             # Standard verb forms
196 |             ('ing', ''),       # walking -> walk
197 |             ('ed', ''),        # walked -> walk
    |              ^^^^ Q000
198 |             
199 |             # Plural forms
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:197:20: Q000 [*] Single quotes found but double quotes preferred
    |
195 |             # Standard verb forms
196 |             ('ing', ''),       # walking -> walk
197 |             ('ed', ''),        # walked -> walk
    |                    ^^ Q000
198 |             
199 |             # Plural forms
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:200:14: Q000 [*] Single quotes found but double quotes preferred
    |
199 |             # Plural forms
200 |             ('ves', 'f'),      # leaves -> leaf, knives -> knife
    |              ^^^^^ Q000
201 |             ('ves', 'fe'),     # lives -> life
202 |             ('ies', 'y'),      # cities -> city
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:200:21: Q000 [*] Single quotes found but double quotes preferred
    |
199 |             # Plural forms
200 |             ('ves', 'f'),      # leaves -> leaf, knives -> knife
    |                     ^^^ Q000
201 |             ('ves', 'fe'),     # lives -> life
202 |             ('ies', 'y'),      # cities -> city
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:201:14: Q000 [*] Single quotes found but double quotes preferred
    |
199 |             # Plural forms
200 |             ('ves', 'f'),      # leaves -> leaf, knives -> knife
201 |             ('ves', 'fe'),     # lives -> life
    |              ^^^^^ Q000
202 |             ('ies', 'y'),      # cities -> city
203 |             ('oes', 'o'),      # tomatoes -> tomato
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:201:21: Q000 [*] Single quotes found but double quotes preferred
    |
199 |             # Plural forms
200 |             ('ves', 'f'),      # leaves -> leaf, knives -> knife
201 |             ('ves', 'fe'),     # lives -> life
    |                     ^^^^ Q000
202 |             ('ies', 'y'),      # cities -> city
203 |             ('oes', 'o'),      # tomatoes -> tomato
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:202:14: Q000 [*] Single quotes found but double quotes preferred
    |
200 |             ('ves', 'f'),      # leaves -> leaf, knives -> knife
201 |             ('ves', 'fe'),     # lives -> life
202 |             ('ies', 'y'),      # cities -> city
    |              ^^^^^ Q000
203 |             ('oes', 'o'),      # tomatoes -> tomato
204 |             ('xes', 'x'),      # boxes -> box
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:202:21: Q000 [*] Single quotes found but double quotes preferred
    |
200 |             ('ves', 'f'),      # leaves -> leaf, knives -> knife
201 |             ('ves', 'fe'),     # lives -> life
202 |             ('ies', 'y'),      # cities -> city
    |                     ^^^ Q000
203 |             ('oes', 'o'),      # tomatoes -> tomato
204 |             ('xes', 'x'),      # boxes -> box
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:203:14: Q000 [*] Single quotes found but double quotes preferred
    |
201 |             ('ves', 'fe'),     # lives -> life
202 |             ('ies', 'y'),      # cities -> city
203 |             ('oes', 'o'),      # tomatoes -> tomato
    |              ^^^^^ Q000
204 |             ('xes', 'x'),      # boxes -> box
205 |             ('zes', 'z'),      # buzzes -> buzz
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:203:21: Q000 [*] Single quotes found but double quotes preferred
    |
201 |             ('ves', 'fe'),     # lives -> life
202 |             ('ies', 'y'),      # cities -> city
203 |             ('oes', 'o'),      # tomatoes -> tomato
    |                     ^^^ Q000
204 |             ('xes', 'x'),      # boxes -> box
205 |             ('zes', 'z'),      # buzzes -> buzz
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:204:14: Q000 [*] Single quotes found but double quotes preferred
    |
202 |             ('ies', 'y'),      # cities -> city
203 |             ('oes', 'o'),      # tomatoes -> tomato
204 |             ('xes', 'x'),      # boxes -> box
    |              ^^^^^ Q000
205 |             ('zes', 'z'),      # buzzes -> buzz
206 |             ('ses', 's'),      # glasses -> glass
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:204:21: Q000 [*] Single quotes found but double quotes preferred
    |
202 |             ('ies', 'y'),      # cities -> city
203 |             ('oes', 'o'),      # tomatoes -> tomato
204 |             ('xes', 'x'),      # boxes -> box
    |                     ^^^ Q000
205 |             ('zes', 'z'),      # buzzes -> buzz
206 |             ('ses', 's'),      # glasses -> glass
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:205:14: Q000 [*] Single quotes found but double quotes preferred
    |
203 |             ('oes', 'o'),      # tomatoes -> tomato
204 |             ('xes', 'x'),      # boxes -> box
205 |             ('zes', 'z'),      # buzzes -> buzz
    |              ^^^^^ Q000
206 |             ('ses', 's'),      # glasses -> glass
207 |             ('shes', 'sh'),    # brushes -> brush
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:205:21: Q000 [*] Single quotes found but double quotes preferred
    |
203 |             ('oes', 'o'),      # tomatoes -> tomato
204 |             ('xes', 'x'),      # boxes -> box
205 |             ('zes', 'z'),      # buzzes -> buzz
    |                     ^^^ Q000
206 |             ('ses', 's'),      # glasses -> glass
207 |             ('shes', 'sh'),    # brushes -> brush
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:206:14: Q000 [*] Single quotes found but double quotes preferred
    |
204 |             ('xes', 'x'),      # boxes -> box
205 |             ('zes', 'z'),      # buzzes -> buzz
206 |             ('ses', 's'),      # glasses -> glass
    |              ^^^^^ Q000
207 |             ('shes', 'sh'),    # brushes -> brush
208 |             ('ches', 'ch'),    # churches -> church
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:206:21: Q000 [*] Single quotes found but double quotes preferred
    |
204 |             ('xes', 'x'),      # boxes -> box
205 |             ('zes', 'z'),      # buzzes -> buzz
206 |             ('ses', 's'),      # glasses -> glass
    |                     ^^^ Q000
207 |             ('shes', 'sh'),    # brushes -> brush
208 |             ('ches', 'ch'),    # churches -> church
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:207:14: Q000 [*] Single quotes found but double quotes preferred
    |
205 |             ('zes', 'z'),      # buzzes -> buzz
206 |             ('ses', 's'),      # glasses -> glass
207 |             ('shes', 'sh'),    # brushes -> brush
    |              ^^^^^^ Q000
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('es', ''),        # dishes -> dish
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:207:22: Q000 [*] Single quotes found but double quotes preferred
    |
205 |             ('zes', 'z'),      # buzzes -> buzz
206 |             ('ses', 's'),      # glasses -> glass
207 |             ('shes', 'sh'),    # brushes -> brush
    |                      ^^^^ Q000
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('es', ''),        # dishes -> dish
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:208:14: Q000 [*] Single quotes found but double quotes preferred
    |
206 |             ('ses', 's'),      # glasses -> glass
207 |             ('shes', 'sh'),    # brushes -> brush
208 |             ('ches', 'ch'),    # churches -> church
    |              ^^^^^^ Q000
209 |             ('es', ''),        # dishes -> dish
210 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:208:22: Q000 [*] Single quotes found but double quotes preferred
    |
206 |             ('ses', 's'),      # glasses -> glass
207 |             ('shes', 'sh'),    # brushes -> brush
208 |             ('ches', 'ch'),    # churches -> church
    |                      ^^^^ Q000
209 |             ('es', ''),        # dishes -> dish
210 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:209:14: Q000 [*] Single quotes found but double quotes preferred
    |
207 |             ('shes', 'sh'),    # brushes -> brush
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('es', ''),        # dishes -> dish
    |              ^^^^ Q000
210 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:209:20: Q000 [*] Single quotes found but double quotes preferred
    |
207 |             ('shes', 'sh'),    # brushes -> brush
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('es', ''),        # dishes -> dish
    |                    ^^ Q000
210 |             ('s', ''),         # cats -> cat
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:210:14: Q000 [*] Single quotes found but double quotes preferred
    |
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('es', ''),        # dishes -> dish
210 |             ('s', ''),         # cats -> cat
    |              ^^^ Q000
211 |             
212 |             # Comparatives/Superlatives
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:210:19: Q000 [*] Single quotes found but double quotes preferred
    |
208 |             ('ches', 'ch'),    # churches -> church
209 |             ('es', ''),        # dishes -> dish
210 |             ('s', ''),         # cats -> cat
    |                   ^^ Q000
211 |             
212 |             # Comparatives/Superlatives
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:213:14: Q000 [*] Single quotes found but double quotes preferred
    |
212 |             # Comparatives/Superlatives
213 |             ('iest', 'y'),     # happiest -> happy
    |              ^^^^^^ Q000
214 |             ('ier', 'y'),      # happier -> happy
215 |             ('est', ''),       # fastest -> fast
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:213:22: Q000 [*] Single quotes found but double quotes preferred
    |
212 |             # Comparatives/Superlatives
213 |             ('iest', 'y'),     # happiest -> happy
    |                      ^^^ Q000
214 |             ('ier', 'y'),      # happier -> happy
215 |             ('est', ''),       # fastest -> fast
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:214:14: Q000 [*] Single quotes found but double quotes preferred
    |
212 |             # Comparatives/Superlatives
213 |             ('iest', 'y'),     # happiest -> happy
214 |             ('ier', 'y'),      # happier -> happy
    |              ^^^^^ Q000
215 |             ('est', ''),       # fastest -> fast
216 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:214:21: Q000 [*] Single quotes found but double quotes preferred
    |
212 |             # Comparatives/Superlatives
213 |             ('iest', 'y'),     # happiest -> happy
214 |             ('ier', 'y'),      # happier -> happy
    |                     ^^^ Q000
215 |             ('est', ''),       # fastest -> fast
216 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:215:14: Q000 [*] Single quotes found but double quotes preferred
    |
213 |             ('iest', 'y'),     # happiest -> happy
214 |             ('ier', 'y'),      # happier -> happy
215 |             ('est', ''),       # fastest -> fast
    |              ^^^^^ Q000
216 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:215:21: Q000 [*] Single quotes found but double quotes preferred
    |
213 |             ('iest', 'y'),     # happiest -> happy
214 |             ('ier', 'y'),      # happier -> happy
215 |             ('est', ''),       # fastest -> fast
    |                     ^^ Q000
216 |             ('er', ''),        # faster -> fast
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:216:14: Q000 [*] Single quotes found but double quotes preferred
    |
214 |             ('ier', 'y'),      # happier -> happy
215 |             ('est', ''),       # fastest -> fast
216 |             ('er', ''),        # faster -> fast
    |              ^^^^ Q000
217 |             
218 |             # Adverbs and derivations
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:216:20: Q000 [*] Single quotes found but double quotes preferred
    |
214 |             ('ier', 'y'),      # happier -> happy
215 |             ('est', ''),       # fastest -> fast
216 |             ('er', ''),        # faster -> fast
    |                    ^^ Q000
217 |             
218 |             # Adverbs and derivations
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:219:14: Q000 [*] Single quotes found but double quotes preferred
    |
218 |             # Adverbs and derivations
219 |             ('ly', ''),        # quickly -> quick
    |              ^^^^ Q000
220 |             ('ness', ''),      # happiness -> happy
221 |             ('ment', ''),      # management -> manage
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:219:20: Q000 [*] Single quotes found but double quotes preferred
    |
218 |             # Adverbs and derivations
219 |             ('ly', ''),        # quickly -> quick
    |                    ^^ Q000
220 |             ('ness', ''),      # happiness -> happy
221 |             ('ment', ''),      # management -> manage
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:220:14: Q000 [*] Single quotes found but double quotes preferred
    |
218 |             # Adverbs and derivations
219 |             ('ly', ''),        # quickly -> quick
220 |             ('ness', ''),      # happiness -> happy
    |              ^^^^^^ Q000
221 |             ('ment', ''),      # management -> manage
222 |             ('ful', ''),       # beautiful -> beauty
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:220:22: Q000 [*] Single quotes found but double quotes preferred
    |
218 |             # Adverbs and derivations
219 |             ('ly', ''),        # quickly -> quick
220 |             ('ness', ''),      # happiness -> happy
    |                      ^^ Q000
221 |             ('ment', ''),      # management -> manage
222 |             ('ful', ''),       # beautiful -> beauty
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:221:14: Q000 [*] Single quotes found but double quotes preferred
    |
219 |             ('ly', ''),        # quickly -> quick
220 |             ('ness', ''),      # happiness -> happy
221 |             ('ment', ''),      # management -> manage
    |              ^^^^^^ Q000
222 |             ('ful', ''),       # beautiful -> beauty
223 |             ('less', ''),      # helpless -> help
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:221:22: Q000 [*] Single quotes found but double quotes preferred
    |
219 |             ('ly', ''),        # quickly -> quick
220 |             ('ness', ''),      # happiness -> happy
221 |             ('ment', ''),      # management -> manage
    |                      ^^ Q000
222 |             ('ful', ''),       # beautiful -> beauty
223 |             ('less', ''),      # helpless -> help
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:222:14: Q000 [*] Single quotes found but double quotes preferred
    |
220 |             ('ness', ''),      # happiness -> happy
221 |             ('ment', ''),      # management -> manage
222 |             ('ful', ''),       # beautiful -> beauty
    |              ^^^^^ Q000
223 |             ('less', ''),      # helpless -> help
224 |         ]
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:222:21: Q000 [*] Single quotes found but double quotes preferred
    |
220 |             ('ness', ''),      # happiness -> happy
221 |             ('ment', ''),      # management -> manage
222 |             ('ful', ''),       # beautiful -> beauty
    |                     ^^ Q000
223 |             ('less', ''),      # helpless -> help
224 |         ]
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:223:14: Q000 [*] Single quotes found but double quotes preferred
    |
221 |             ('ment', ''),      # management -> manage
222 |             ('ful', ''),       # beautiful -> beauty
223 |             ('less', ''),      # helpless -> help
    |              ^^^^^^ Q000
224 |         ]
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:223:22: Q000 [*] Single quotes found but double quotes preferred
    |
221 |             ('ment', ''),      # management -> manage
222 |             ('ful', ''),       # beautiful -> beauty
223 |             ('less', ''),      # helpless -> help
    |                      ^^ Q000
224 |         ]
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:230:33: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
228 |                 base = word[:-len(suffix)] + replacement
229 |                 # Check if it's a valid reduction
230 |                 if len(base) >= 3:
    |                                 ^ PLR2004
231 |                     return base
    |

scripts/corpus_optimization_strategy.py:235:45: UP006 [*] Use `set` instead of `Set` for type annotation
    |
233 |         return original
234 |         
235 |     def frequency_based_clustering(self) -> Set[str]:
    |                                             ^^^ UP006
236 |         """Cluster words based on common patterns and frequency."""
237 |         clusters = defaultdict(set)
    |
    = help: Replace with `set`

scripts/corpus_optimization_strategy.py:241:29: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
    |
239 |         # Group words by their first 3-4 characters
240 |         for word in self.words:
241 |             if len(word) >= 4:
    |                             ^ PLR2004
242 |                 prefix = word[:4]
243 |                 clusters[prefix].add(word)
    |

scripts/corpus_optimization_strategy.py:244:31: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
242 |                 prefix = word[:4]
243 |                 clusters[prefix].add(word)
244 |             elif len(word) == 3:
    |                               ^ PLR2004
245 |                 prefix = word
246 |                 clusters[prefix].add(word)
    |

scripts/corpus_optimization_strategy.py:251:13: B007 Loop control variable `prefix` not used within loop body
    |
249 |         base_forms = set()
250 |         
251 |         for prefix, word_set in clusters.items():
    |             ^^^^^^ B007
252 |             if len(word_set) > 1:
253 |                 # Find the shortest word as potential base
    |
    = help: Rename unused `prefix` to `_prefix`

scripts/corpus_optimization_strategy.py:269:9: T201 `print` found
    |
267 |     def generate_optimization_plan(self) -> None:
268 |         """Generate a comprehensive optimization plan."""
269 |         print("\n" + "="*80)
    |         ^^^^^ T201
270 |         print("CORPUS OPTIMIZATION STRATEGY FOR FLORIDIFY")
271 |         print("="*80)
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:270:9: T201 `print` found
    |
268 |         """Generate a comprehensive optimization plan."""
269 |         print("\n" + "="*80)
270 |         print("CORPUS OPTIMIZATION STRATEGY FOR FLORIDIFY")
    |         ^^^^^ T201
271 |         print("="*80)
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:271:9: T201 `print` found
    |
269 |         print("\n" + "="*80)
270 |         print("CORPUS OPTIMIZATION STRATEGY FOR FLORIDIFY")
271 |         print("="*80)
    |         ^^^^^ T201
272 |         
273 |         print("\n1. CURRENT STATE ANALYSIS")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:273:9: T201 `print` found
    |
271 |         print("="*80)
272 |         
273 |         print("\n1. CURRENT STATE ANALYSIS")
    |         ^^^^^ T201
274 |         print("-" * 40)
275 |         print(f"Total words in SOWPODS: {len(self.words):,}")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:274:9: T201 `print` found
    |
273 |         print("\n1. CURRENT STATE ANALYSIS")
274 |         print("-" * 40)
    |         ^^^^^ T201
275 |         print(f"Total words in SOWPODS: {len(self.words):,}")
276 |         print(f"Target corpus size: ~55,000 base forms")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:275:9: T201 `print` found
    |
273 |         print("\n1. CURRENT STATE ANALYSIS")
274 |         print("-" * 40)
275 |         print(f"Total words in SOWPODS: {len(self.words):,}")
    |         ^^^^^ T201
276 |         print(f"Target corpus size: ~55,000 base forms")
277 |         print(f"Required reduction: ~{((len(self.words) - 55000) / len(self.words) * 100):.1f}%")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:276:9: T201 `print` found
    |
274 |         print("-" * 40)
275 |         print(f"Total words in SOWPODS: {len(self.words):,}")
276 |         print(f"Target corpus size: ~55,000 base forms")
    |         ^^^^^ T201
277 |         print(f"Required reduction: ~{((len(self.words) - 55000) / len(self.words) * 100):.1f}%")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:277:9: T201 `print` found
    |
275 |         print(f"Total words in SOWPODS: {len(self.words):,}")
276 |         print(f"Target corpus size: ~55,000 base forms")
277 |         print(f"Required reduction: ~{((len(self.words) - 55000) / len(self.words) * 100):.1f}%")
    |         ^^^^^ T201
278 |         
279 |         # Analyze patterns
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:281:9: T201 `print` found
    |
279 |         # Analyze patterns
280 |         patterns = self.analyze_inflection_patterns()
281 |         print("\n2. INFLECTION PATTERN ANALYSIS")
    |         ^^^^^ T201
282 |         print("-" * 40)
283 |         total_inflected = sum(patterns.values())
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:282:9: T201 `print` found
    |
280 |         patterns = self.analyze_inflection_patterns()
281 |         print("\n2. INFLECTION PATTERN ANALYSIS")
282 |         print("-" * 40)
    |         ^^^^^ T201
283 |         total_inflected = sum(patterns.values())
284 |         print(f"Total potentially inflected forms: {total_inflected:,} ({total_inflected/len(self.words)*100:.1f}%)")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:284:9: T201 `print` found
    |
282 |         print("-" * 40)
283 |         total_inflected = sum(patterns.values())
284 |         print(f"Total potentially inflected forms: {total_inflected:,} ({total_inflected/len(self.words)*100:.1f}%)")
    |         ^^^^^ T201
285 |         print("\nTop inflection patterns:")
286 |         for pattern, count in sorted(patterns.items(), key=lambda x: x[1], reverse=True)[:10]:
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:285:9: T201 `print` found
    |
283 |         total_inflected = sum(patterns.values())
284 |         print(f"Total potentially inflected forms: {total_inflected:,} ({total_inflected/len(self.words)*100:.1f}%)")
285 |         print("\nTop inflection patterns:")
    |         ^^^^^ T201
286 |         for pattern, count in sorted(patterns.items(), key=lambda x: x[1], reverse=True)[:10]:
287 |             print(f"  {pattern}: {count:,} words ({count/len(self.words)*100:.1f}%)")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:287:13: T201 `print` found
    |
285 |         print("\nTop inflection patterns:")
286 |         for pattern, count in sorted(patterns.items(), key=lambda x: x[1], reverse=True)[:10]:
287 |             print(f"  {pattern}: {count:,} words ({count/len(self.words)*100:.1f}%)")
    |             ^^^^^ T201
288 |             
289 |         # Estimate base forms
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:291:9: T201 `print` found
    |
289 |         # Estimate base forms
290 |         estimates = self.estimate_base_forms()
291 |         print("\n3. BASE FORM ESTIMATION")
    |         ^^^^^ T201
292 |         print("-" * 40)
293 |         for method, results in estimates.items():
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:292:9: T201 `print` found
    |
290 |         estimates = self.estimate_base_forms()
291 |         print("\n3. BASE FORM ESTIMATION")
292 |         print("-" * 40)
    |         ^^^^^ T201
293 |         for method, results in estimates.items():
294 |             print(f"\n{method.replace('_', ' ').title()}:")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:294:13: T201 `print` found
    |
292 |         print("-" * 40)
293 |         for method, results in estimates.items():
294 |             print(f"\n{method.replace('_', ' ').title()}:")
    |             ^^^^^ T201
295 |             print(f"  Estimated base forms: {results['base_forms']:,}")
296 |             print(f"  Reduction: {results['reduction_pct']:.1f}%")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:295:13: T201 `print` found
    |
293 |         for method, results in estimates.items():
294 |             print(f"\n{method.replace('_', ' ').title()}:")
295 |             print(f"  Estimated base forms: {results['base_forms']:,}")
    |             ^^^^^ T201
296 |             print(f"  Reduction: {results['reduction_pct']:.1f}%")
297 |             if 'sample_mappings' in results:
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:296:13: T201 `print` found
    |
294 |             print(f"\n{method.replace('_', ' ').title()}:")
295 |             print(f"  Estimated base forms: {results['base_forms']:,}")
296 |             print(f"  Reduction: {results['reduction_pct']:.1f}%")
    |             ^^^^^ T201
297 |             if 'sample_mappings' in results:
298 |                 print("  Sample mappings:")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:297:16: Q000 [*] Single quotes found but double quotes preferred
    |
295 |             print(f"  Estimated base forms: {results['base_forms']:,}")
296 |             print(f"  Reduction: {results['reduction_pct']:.1f}%")
297 |             if 'sample_mappings' in results:
    |                ^^^^^^^^^^^^^^^^^ Q000
298 |                 print("  Sample mappings:")
299 |                 for base, inflections in list(results['sample_mappings'].items())[:5]:
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:298:17: T201 `print` found
    |
296 |             print(f"  Reduction: {results['reduction_pct']:.1f}%")
297 |             if 'sample_mappings' in results:
298 |                 print("  Sample mappings:")
    |                 ^^^^^ T201
299 |                 for base, inflections in list(results['sample_mappings'].items())[:5]:
300 |                     forms = [f"{word} ({suffix})" for word, suffix in inflections[:3]]
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:299:55: Q000 [*] Single quotes found but double quotes preferred
    |
297 |             if 'sample_mappings' in results:
298 |                 print("  Sample mappings:")
299 |                 for base, inflections in list(results['sample_mappings'].items())[:5]:
    |                                                       ^^^^^^^^^^^^^^^^^ Q000
300 |                     forms = [f"{word} ({suffix})" for word, suffix in inflections[:3]]
301 |                     print(f"    {base} -> {', '.join(forms)}")
    |
    = help: Replace single quotes with double quotes

scripts/corpus_optimization_strategy.py:301:21: T201 `print` found
    |
299 |                 for base, inflections in list(results['sample_mappings'].items())[:5]:
300 |                     forms = [f"{word} ({suffix})" for word, suffix in inflections[:3]]
301 |                     print(f"    {base} -> {', '.join(forms)}")
    |                     ^^^^^ T201
302 |                     
303 |         print("\n4. RECOMMENDED IMPLEMENTATION STRATEGY")
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:303:9: T201 `print` found
    |
301 |                     print(f"    {base} -> {', '.join(forms)}")
302 |                     
303 |         print("\n4. RECOMMENDED IMPLEMENTATION STRATEGY")
    |         ^^^^^ T201
304 |         print("-" * 40)
305 |         print("""
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:304:9: T201 `print` found
    |
303 |         print("\n4. RECOMMENDED IMPLEMENTATION STRATEGY")
304 |         print("-" * 40)
    |         ^^^^^ T201
305 |         print("""
306 | Phase 1: Infrastructure Setup (Week 1)
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:305:9: T201 `print` found
    |
303 |         print("\n4. RECOMMENDED IMPLEMENTATION STRATEGY")
304 |         print("-" * 40)
305 |         print("""
    |         ^^^^^ T201
306 | Phase 1: Infrastructure Setup (Week 1)
307 |   - Create CorpusOptimizer class in search/lexicon/optimizer.py
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:335:9: T201 `print` found
    |
333 | 5. TECHNICAL IMPLEMENTATION DETAILS
334 | """)
335 |         print("-" * 40)
    |         ^^^^^ T201
336 |         print("""
337 | a) Data Structure:
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:336:9: T201 `print` found
    |
334 | """)
335 |         print("-" * 40)
336 |         print("""
    |         ^^^^^ T201
337 | a) Data Structure:
338 |    ```python
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:361:9: T201 `print` found
    |
359 | 6. EXPECTED BENEFITS
360 | """)
361 |         print("-" * 40)
    |         ^^^^^ T201
362 |         print("""
363 | - Memory usage: 40-50% reduction
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:362:9: T201 `print` found
    |
360 | """)
361 |         print("-" * 40)
362 |         print("""
    |         ^^^^^ T201
363 | - Memory usage: 40-50% reduction
364 | - Search speed: 2-3x improvement
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:372:9: T201 `print` found
    |
370 | 7. QUALITY ASSURANCE
371 | """)
372 |         print("-" * 40)
    |         ^^^^^ T201
373 |         print("""
374 | - Create test corpus with known inflections
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:373:9: T201 `print` found
    |
371 | """)
372 |         print("-" * 40)
373 |         print("""
    |         ^^^^^ T201
374 | - Create test corpus with known inflections
375 | - Validate all mappings preserve searchability  
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:383:9: T201 `print` found
    |
381 | 8. RECOMMENDED LIBRARIES
382 | """)
383 |         print("-" * 40)
    |         ^^^^^ T201
384 |         print("""
385 | Primary: NLTK (already integrated)
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:384:9: T201 `print` found
    |
382 | """)
383 |         print("-" * 40)
384 |         print("""
    |         ^^^^^ T201
385 | Primary: NLTK (already integrated)
386 |   - WordNet lemmatizer for accuracy
    |
    = help: Remove `print`

scripts/corpus_optimization_strategy.py:402:11: ANN201 Missing return type annotation for public function `main`
    |
402 | async def main():
    |           ^^^^ ANN201
403 |     """Run the corpus optimization analysis."""
404 |     strategy = CorpusOptimizationStrategy()
    |
    = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:15:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
13 | from collections import defaultdict
14 | from pathlib import Path
15 | from typing import Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | from urllib.parse import urlparse
   |

scripts/frequency_analyzer.py:15:1: UP035 `typing.List` is deprecated, use `list` instead
   |
13 | from collections import defaultdict
14 | from pathlib import Path
15 | from typing import Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | from urllib.parse import urlparse
   |

scripts/frequency_analyzer.py:15:1: UP035 `typing.Set` is deprecated, use `set` instead
   |
13 | from collections import defaultdict
14 | from pathlib import Path
15 | from typing import Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | from urllib.parse import urlparse
   |

scripts/frequency_analyzer.py:15:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
13 | from collections import defaultdict
14 | from pathlib import Path
15 | from typing import Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | from urllib.parse import urlparse
   |

scripts/frequency_analyzer.py:52:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
50 |     """Configuration for a frequency data source."""
51 |     
52 |     def __init__(
   |         ^^^^^^^^ PLR0913
53 |         self,
54 |         name: str,
   |

scripts/frequency_analyzer.py:52:9: ANN204 Missing return type annotation for special method `__init__`
   |
50 |     """Configuration for a frequency data source."""
51 |     
52 |     def __init__(
   |         ^^^^^^^^ ANN204
53 |         self,
54 |         name: str,
   |
   = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:59:20: UP045 [*] Use `X | None` for type annotations
   |
57 |         weight: float = 1.0,
58 |         description: str = "",
59 |         max_words: Optional[int] = None,
   |                    ^^^^^^^^^^^^^ UP045
60 |     ):
61 |         self.name = name
   |
   = help: Convert to `X | None`

scripts/frequency_analyzer.py:117:9: ANN204 Missing return type annotation for special method `__init__`
    |
115 |     """Analyzes word frequency from multiple sources and generates prioritized lists."""
116 |     
117 |     def __init__(self, data_dir: Path, output_dir: Path):
    |         ^^^^^^^^ ANN204
118 |         self.data_dir = data_dir
119 |         self.output_dir = output_dir
    |
    = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:129:32: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
128 |         self.lemmatizer = WordNetLemmatizer()
129 |         self.word_frequencies: Dict[str, float] = defaultdict(float)
    |                                ^^^^ UP006
130 |         self.source_data: Dict[str, Dict[str, int]] = {}
131 |         self.lemma_map: Dict[str, Set[str]] = defaultdict(set)
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:130:27: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
128 |         self.lemmatizer = WordNetLemmatizer()
129 |         self.word_frequencies: Dict[str, float] = defaultdict(float)
130 |         self.source_data: Dict[str, Dict[str, int]] = {}
    |                           ^^^^ UP006
131 |         self.lemma_map: Dict[str, Set[str]] = defaultdict(set)
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:130:37: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
128 |         self.lemmatizer = WordNetLemmatizer()
129 |         self.word_frequencies: Dict[str, float] = defaultdict(float)
130 |         self.source_data: Dict[str, Dict[str, int]] = {}
    |                                     ^^^^ UP006
131 |         self.lemma_map: Dict[str, Set[str]] = defaultdict(set)
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:131:25: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
129 |         self.word_frequencies: Dict[str, float] = defaultdict(float)
130 |         self.source_data: Dict[str, Dict[str, int]] = {}
131 |         self.lemma_map: Dict[str, Set[str]] = defaultdict(set)
    |                         ^^^^ UP006
132 |         
133 |     async def download_source(self, source: FrequencySource) -> Optional[Path]:
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:131:35: UP006 [*] Use `set` instead of `Set` for type annotation
    |
129 |         self.word_frequencies: Dict[str, float] = defaultdict(float)
130 |         self.source_data: Dict[str, Dict[str, int]] = {}
131 |         self.lemma_map: Dict[str, Set[str]] = defaultdict(set)
    |                                   ^^^ UP006
132 |         
133 |     async def download_source(self, source: FrequencySource) -> Optional[Path]:
    |
    = help: Replace with `set`

scripts/frequency_analyzer.py:133:65: UP045 [*] Use `X | None` for type annotations
    |
131 |         self.lemma_map: Dict[str, Set[str]] = defaultdict(set)
132 |         
133 |     async def download_source(self, source: FrequencySource) -> Optional[Path]:
    |                                                                 ^^^^^^^^^^^^^^ UP045
134 |         """Download frequency data from a source."""
135 |         filename = Path(urlparse(source.url).path).name
    |
    = help: Convert to `X | None`

scripts/frequency_analyzer.py:149:13: SIM117 Use a single `with` statement with multiple contexts instead of nested `with` statements
    |
148 |           try:
149 | /             async with aiohttp.ClientSession() as session:
150 | |                 async with session.get(source.url) as response:
    | |_______________________________________________________________^ SIM117
151 |                       if response.status == 200:
152 |                           content = await response.text()
    |
    = help: Combine `with` statements

scripts/frequency_analyzer.py:151:43: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
149 |             async with aiohttp.ClientSession() as session:
150 |                 async with session.get(source.url) as response:
151 |                     if response.status == 200:
    |                                           ^^^ PLR2004
152 |                         content = await response.text()
153 |                         filepath.write_text(content)
    |

scripts/frequency_analyzer.py:156:21: RET505 [*] Unnecessary `else` after `return` statement
    |
154 |                         console.print(f"[green]Downloaded {source.name}[/green]")
155 |                         return filepath
156 |                     else:
    |                     ^^^^ RET505
157 |                         console.print(f"[red]Failed to download {source.name}: {response.status}[/red]")
158 |                         return None
    |
    = help: Remove unnecessary `else`

scripts/frequency_analyzer.py:163:9: PLR0912 Too many branches (19 > 12)
    |
161 |             return None
162 |     
163 |     def parse_frequency_data(self, filepath: Path, source: FrequencySource) -> Dict[str, int]:
    |         ^^^^^^^^^^^^^^^^^^^^ PLR0912
164 |         """Parse frequency data based on source format."""
165 |         frequencies = {}
    |

scripts/frequency_analyzer.py:163:80: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
161 |             return None
162 |     
163 |     def parse_frequency_data(self, filepath: Path, source: FrequencySource) -> Dict[str, int]:
    |                                                                                ^^^^ UP006
164 |         """Parse frequency data based on source format."""
165 |         frequencies = {}
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:179:34: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
177 |             for line in content.split("\n"):
178 |                 parts = line.strip().split()
179 |                 if len(parts) >= 2:
    |                                  ^ PLR2004
180 |                     word = parts[0].lower()
181 |                     try:
    |

scripts/frequency_analyzer.py:228:61: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
226 |         return frequencies
227 |     
228 |     def process_literary_corpus(self, corpus_path: Path) -> Dict[str, int]:
    |                                                             ^^^^ UP006
229 |         """Process a literary corpus to extract word frequencies."""
230 |         frequencies = defaultdict(int)
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:244:21: PLW2901 `for` loop variable `word` overwritten by assignment target
    |
242 |                 for word in words:
243 |                     # Basic cleaning
244 |                     word = word.strip(".,!?;:\"'()[]{}").lower()
    |                     ^^^^ PLW2901
245 |                     if word and word.isalpha() and len(word) > 1:
246 |                         frequencies[word] += 1
    |

scripts/frequency_analyzer.py:256:33: PLW2901 `for` loop variable `word` overwritten by assignment target
    |
254 | …                     words = item.lower().split()
255 | …                     for word in words:
256 | …                         word = word.strip(".,!?;:\"'()[]{}").lower()
    |                           ^^^^ PLW2901
257 | …                         if word and word.isalpha() and len(word) > 1:
258 | …                             frequencies[word] += 1
    |

scripts/frequency_analyzer.py:265:51: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
263 |         return dict(frequencies)
264 |     
265 |     def combine_frequencies(self, sources_weight: Dict[str, float]) -> Dict[str, float]:
    |                                                   ^^^^ UP006
266 |         """Combine frequencies from multiple sources with weights."""
267 |         combined = defaultdict(float)
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:265:72: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
263 |         return dict(frequencies)
264 |     
265 |     def combine_frequencies(self, sources_weight: Dict[str, float]) -> Dict[str, float]:
    |                                                                        ^^^^ UP006
266 |         """Combine frequencies from multiple sources with weights."""
267 |         combined = defaultdict(float)
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:291:48: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
289 |         return dict(combined)
290 |     
291 |     def generate_word_lists(self, frequencies: Dict[str, float], sizes: List[int]) -> Dict[int, List[str]]:
    |                                                ^^^^ UP006
292 |         """Generate word lists of various sizes."""
293 |         # Sort by frequency
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:291:73: UP006 [*] Use `list` instead of `List` for type annotation
    |
289 |         return dict(combined)
290 |     
291 |     def generate_word_lists(self, frequencies: Dict[str, float], sizes: List[int]) -> Dict[int, List[str]]:
    |                                                                         ^^^^ UP006
292 |         """Generate word lists of various sizes."""
293 |         # Sort by frequency
    |
    = help: Replace with `list`

scripts/frequency_analyzer.py:291:87: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
289 |         return dict(combined)
290 |     
291 |     def generate_word_lists(self, frequencies: Dict[str, float], sizes: List[int]) -> Dict[int, List[str]]:
    |                                                                                       ^^^^ UP006
292 |         """Generate word lists of various sizes."""
293 |         # Sort by frequency
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:291:97: UP006 [*] Use `list` instead of `List` for type annotation
    |
289 |         return dict(combined)
290 |     
291 |     def generate_word_lists(self, frequencies: Dict[str, float], sizes: List[int]) -> Dict[int, List[str]]:
    |                                                                                                 ^^^^ UP006
292 |         """Generate word lists of various sizes."""
293 |         # Sort by frequency
    |
    = help: Replace with `list`

scripts/frequency_analyzer.py:302:15: ANN201 Missing return type annotation for public function `analyze`
    |
300 |         return word_lists
301 |     
302 |     async def analyze(self, custom_weights: Optional[Dict[str, float]] = None):
    |               ^^^^^^^ ANN201
303 |         """Main analysis pipeline."""
304 |         console.print("[bold cyan]Starting frequency analysis...[/bold cyan]\n")
    |
    = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:302:45: UP045 [*] Use `X | None` for type annotations
    |
300 |         return word_lists
301 |     
302 |     async def analyze(self, custom_weights: Optional[Dict[str, float]] = None):
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP045
303 |         """Main analysis pipeline."""
304 |         console.print("[bold cyan]Starting frequency analysis...[/bold cyan]\n")
    |
    = help: Convert to `X | None`

scripts/frequency_analyzer.py:302:54: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
300 |         return word_lists
301 |     
302 |     async def analyze(self, custom_weights: Optional[Dict[str, float]] = None):
    |                                                      ^^^^ UP006
303 |         """Main analysis pipeline."""
304 |         console.print("[bold cyan]Starting frequency analysis...[/bold cyan]\n")
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:376:9: ANN201 Missing return type annotation for public function `display_statistics`
    |
374 |         self.display_statistics(combined_frequencies, word_lists)
375 |     
376 |     def display_statistics(self, frequencies: Dict[str, float], word_lists: Dict[int, List[str]]):
    |         ^^^^^^^^^^^^^^^^^^ ANN201
377 |         """Display analysis statistics."""
378 |         # Overall statistics
    |
    = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:376:47: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
374 |         self.display_statistics(combined_frequencies, word_lists)
375 |     
376 |     def display_statistics(self, frequencies: Dict[str, float], word_lists: Dict[int, List[str]]):
    |                                               ^^^^ UP006
377 |         """Display analysis statistics."""
378 |         # Overall statistics
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:376:77: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
374 |         self.display_statistics(combined_frequencies, word_lists)
375 |     
376 |     def display_statistics(self, frequencies: Dict[str, float], word_lists: Dict[int, List[str]]):
    |                                                                             ^^^^ UP006
377 |         """Display analysis statistics."""
378 |         # Overall statistics
    |
    = help: Replace with `dict`

scripts/frequency_analyzer.py:376:87: UP006 [*] Use `list` instead of `List` for type annotation
    |
374 |         self.display_statistics(combined_frequencies, word_lists)
375 |     
376 |     def display_statistics(self, frequencies: Dict[str, float], word_lists: Dict[int, List[str]]):
    |                                                                                       ^^^^ UP006
377 |         """Display analysis statistics."""
378 |         # Overall statistics
    |
    = help: Replace with `list`

scripts/frequency_analyzer.py:418:9: ANN201 Missing return type annotation for public function `integrate_with_corpus_processor`
    |
416 |         console.print("\n", sample_table)
417 |     
418 |     def integrate_with_corpus_processor(self, corpus_processor_output: Path):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
419 |         """Integrate frequency data with existing corpus processor output."""
420 |         console.print("\n[cyan]Integrating with corpus processor...[/cyan]")
    |
    = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:441:11: ANN201 Missing return type annotation for public function `main`
    |
441 | async def main():
    |           ^^^^ ANN201
442 |     """Main entry point."""
443 |     import argparse
    |
    = help: Add return type annotation: `None`

scripts/frequency_analyzer.py:443:5: PLC0415 `import` should be at the top-level of a file
    |
441 | async def main():
442 |     """Main entry point."""
443 |     import argparse
    |     ^^^^^^^^^^^^^^^ PLC0415
444 |     
445 |     parser = argparse.ArgumentParser(description="Analyze word frequencies from multiple sources")
    |

scripts/process_corpus.py:8:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
 6 | from collections import defaultdict
 7 | from pathlib import Path
 8 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
 9 |
10 | import nltk
   |

scripts/process_corpus.py:8:1: UP035 `typing.List` is deprecated, use `list` instead
   |
 6 | from collections import defaultdict
 7 | from pathlib import Path
 8 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
 9 |
10 | import nltk
   |

scripts/process_corpus.py:8:1: UP035 `typing.Set` is deprecated, use `set` instead
   |
 6 | from collections import defaultdict
 7 | from pathlib import Path
 8 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
 9 |
10 | import nltk
   |

scripts/process_corpus.py:8:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
 6 | from collections import defaultdict
 7 | from pathlib import Path
 8 | from typing import Dict, List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
 9 |
10 | import nltk
   |

scripts/process_corpus.py:38:9: ANN204 Missing return type annotation for special method `__init__`
   |
36 |     """Process word corpus with lemmatization and inflection mapping."""
37 |     
38 |     def __init__(self, corpus_path: Path, output_dir: Path):
   |         ^^^^^^^^ ANN204
39 |         self.corpus_path = corpus_path
40 |         self.output_dir = output_dir
   |
   = help: Add return type annotation: `None`

scripts/process_corpus.py:44:26: UP006 [*] Use `set` instead of `Set` for type annotation
   |
43 |         self.lemmatizer = WordNetLemmatizer()
44 |         self.base_forms: Set[str] = set()
   |                          ^^^ UP006
45 |         self.inflection_map: Dict[str, List[str]] = defaultdict(list)
46 |         self.stats = {
   |
   = help: Replace with `set`

scripts/process_corpus.py:45:30: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
43 |         self.lemmatizer = WordNetLemmatizer()
44 |         self.base_forms: Set[str] = set()
45 |         self.inflection_map: Dict[str, List[str]] = defaultdict(list)
   |                              ^^^^ UP006
46 |         self.stats = {
47 |             "total_words": 0,
   |
   = help: Replace with `dict`

scripts/process_corpus.py:45:40: UP006 [*] Use `list` instead of `List` for type annotation
   |
43 |         self.lemmatizer = WordNetLemmatizer()
44 |         self.base_forms: Set[str] = set()
45 |         self.inflection_map: Dict[str, List[str]] = defaultdict(list)
   |                                        ^^^^ UP006
46 |         self.stats = {
47 |             "total_words": 0,
   |
   = help: Replace with `list`

scripts/process_corpus.py:56:12: PIE810 Call `endswith` once with a `tuple`
   |
54 |         """Get WordNet POS tag for better lemmatization."""
55 |         # Simple heuristic - can be improved with actual POS tagging
56 |         if word.endswith("ing") or word.endswith("ed"):
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PIE810
57 |             return wordnet.VERB
58 |         elif word.endswith("ly"):
   |
   = help: Merge into a single `endswith` call

scripts/process_corpus.py:58:9: RET505 [*] Unnecessary `elif` after `return` statement
   |
56 |         if word.endswith("ing") or word.endswith("ed"):
57 |             return wordnet.VERB
58 |         elif word.endswith("ly"):
   |         ^^^^ RET505
59 |             return wordnet.ADV
60 |         elif word.endswith("er") or word.endswith("est"):
   |
   = help: Remove unnecessary `elif`

scripts/process_corpus.py:60:14: PIE810 Call `endswith` once with a `tuple`
   |
58 |         elif word.endswith("ly"):
59 |             return wordnet.ADV
60 |         elif word.endswith("er") or word.endswith("est"):
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PIE810
61 |             return wordnet.ADJ
62 |         else:
   |
   = help: Merge into a single `endswith` call

scripts/process_corpus.py:65:44: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   |
63 |             return wordnet.NOUN
64 |     
65 |     def lemmatize_word(self, word: str) -> Tuple[str, str]:
   |                                            ^^^^^ UP006
66 |         """Lemmatize a word and determine inflection type."""
67 |         word_lower = word.lower()
   |
   = help: Replace with `tuple`

scripts/process_corpus.py:101:15: ANN201 Missing return type annotation for public function `process_corpus`
    |
 99 |         return best_lemma, inflection_type
100 |     
101 |     async def process_corpus(self):
    |               ^^^^^^^^^^^^^^ ANN201
102 |         """Process the entire corpus with progress tracking."""
103 |         # Load all words
    |
    = help: Add return type annotation: `None`

scripts/process_corpus.py:105:37: UP015 [*] Unnecessary mode argument
    |
103 |         # Load all words
104 |         console.print("[cyan]Loading corpus...[/cyan]")
105 |         with open(self.corpus_path, "r") as f:
    |                                     ^^^ UP015
106 |             all_words = [line.strip() for line in f if line.strip()]
    |
    = help: Remove mode argument

scripts/process_corpus.py:141:9: ANN201 Missing return type annotation for public function `save_results`
    |
139 |         )
140 |     
141 |     def save_results(self):
    |         ^^^^^^^^^^^^ ANN201
142 |         """Save processed corpus and mappings."""
143 |         # Save base forms
    |
    = help: Add return type annotation: `None`

scripts/process_corpus.py:146:13: FURB122 [*] Use of `f.write` in a for loop
    |
144 |           base_forms_path = self.output_dir / "base_forms.txt"
145 |           with open(base_forms_path, "w") as f:
146 | /             for word in sorted(self.base_forms):
147 | |                 f.write(f"{word}\n")
    | |____________________________________^ FURB122
148 |           
149 |           # Save inflection mappings
    |
    = help: Replace with `f.writelines`

scripts/process_corpus.py:163:9: ANN201 Missing return type annotation for public function `display_statistics`
    |
161 |         console.print(f"\n[green]Results saved to {self.output_dir}[/green]")
162 |     
163 |     def display_statistics(self):
    |         ^^^^^^^^^^^^^^^^^^ ANN201
164 |         """Display processing statistics."""
165 |         # Create statistics table
    |
    = help: Add return type annotation: `None`

scripts/process_corpus.py:203:11: ANN201 Missing return type annotation for public function `main`
    |
203 | async def main():
    |           ^^^^ ANN201
204 |     """Main entry point."""
205 |     # Paths
    |
    = help: Add return type annotation: `None`

src/floridify/ai/__init__.py:16:11: RUF022 [*] `__all__` is not sorted
   |
14 |   from .synthesizer import DefinitionSynthesizer
15 |
16 |   __all__ = [
   |  ___________^
17 | |     "OpenAIConnector",
18 | |     "create_ai_system",
19 | |     "get_definition_synthesizer",
20 | |     "get_openai_connector",
21 | |     "reset_ai_singletons",
22 | |     "DefinitionSynthesizer",
23 | |     "AIGeneratedProviderData",
24 | |     "SynthesisResponse",
25 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/ai/batch_processor.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from pydantic import BaseModel
21 |
22 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from .connector import OpenAIConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/batch_processor.py:49:71: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
48 |     def add_request(
49 |         self, prompt: str, response_model: type[BaseModel], **kwargs: Any
   |                                                                       ^^^ ANN401
50 |     ) -> asyncio.Future[Any]:
51 |         """Add a request to the batch and return a future for the result."""
   |

src/floridify/ai/batch_processor.py:71:47: Q000 [*] Single quotes found but double quotes preferred
   |
70 |         # Create temporary file
71 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.jsonl', delete=False) as f:
   |                                               ^^^ Q000
72 |             for req in self.requests:
73 |                 # Build messages
   |
   = help: Replace single quotes with double quotes

src/floridify/ai/batch_processor.py:71:59: Q000 [*] Single quotes found but double quotes preferred
   |
70 |         # Create temporary file
71 |         with tempfile.NamedTemporaryFile(mode='w', suffix='.jsonl', delete=False) as f:
   |                                                           ^^^^^^^^ Q000
72 |             for req in self.requests:
73 |                 # Build messages
   |
   = help: Replace single quotes with double quotes

src/floridify/ai/batch_processor.py:124:25: G004 Logging statement uses f-string
    |
122 |         try:
123 |             # Upload file
124 |             logger.info(f"📎 Uploading batch file: {batch_file}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
125 |             with open(batch_file, 'rb') as f:
126 |                 uploaded_file = await self.client.files.create(file=f, purpose="batch")
    |

src/floridify/ai/batch_processor.py:125:35: Q000 [*] Single quotes found but double quotes preferred
    |
123 |             # Upload file
124 |             logger.info(f"📎 Uploading batch file: {batch_file}")
125 |             with open(batch_file, 'rb') as f:
    |                                   ^^^^ Q000
126 |                 uploaded_file = await self.client.files.create(file=f, purpose="batch")
127 |             logger.info(f"✅ File uploaded: {uploaded_file.id}")
    |
    = help: Replace single quotes with double quotes

src/floridify/ai/batch_processor.py:127:25: G004 Logging statement uses f-string
    |
125 |             with open(batch_file, 'rb') as f:
126 |                 uploaded_file = await self.client.files.create(file=f, purpose="batch")
127 |             logger.info(f"✅ File uploaded: {uploaded_file.id}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
128 |
129 |             # Create batch job
    |

src/floridify/ai/batch_processor.py:138:25: G004 Logging statement uses f-string
    |
137 |             # Wait for completion
138 |             logger.info(f"🎫 Batch job created: {batch_job.id}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
139 |             logger.info(
140 |                 f"⏳ Waiting for batch completion (checking every {check_interval}s)"
    |

src/floridify/ai/batch_processor.py:140:17: G004 Logging statement uses f-string
    |
138 |             logger.info(f"🎫 Batch job created: {batch_job.id}")
139 |             logger.info(
140 |                 f"⏳ Waiting for batch completion (checking every {check_interval}s)"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
141 |             )
142 |             completed_job = await self._wait_for_completion(
    |

src/floridify/ai/batch_processor.py:151:13: RET505 [*] Unnecessary `else` after `return` statement
    |
149 |                 results = await self._download_results(completed_job.output_file_id)
150 |                 return self._map_results_by_id(results)
151 |             else:
    |             ^^^^ RET505
152 |                 logger.error(f"Batch job {batch_job.id} completed without output file")
153 |                 return {}
    |
    = help: Remove unnecessary `else`

src/floridify/ai/batch_processor.py:152:30: G004 Logging statement uses f-string
    |
150 |                 return self._map_results_by_id(results)
151 |             else:
152 |                 logger.error(f"Batch job {batch_job.id} completed without output file")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
153 |                 return {}
    |

src/floridify/ai/batch_processor.py:160:81: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_wait_for_completion`
    |
158 |                 batch_file.unlink()
159 |
160 |     async def _wait_for_completion(self, batch_id: str, check_interval: int) -> Any:
    |                                                                                 ^^^ ANN401
161 |         """Wait for batch job to complete."""
162 |         start_time = time.time()
    |

src/floridify/ai/batch_processor.py:170:17: G004 Logging statement uses f-string
    |
168 |             elapsed = time.time() - start_time
169 |             logger.info(
170 |                 f"🔄 Check #{check_count} - Batch {batch_id} status: {batch_job.status} (elapsed: {elapsed:.1f}s)"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
171 |             )
    |

src/floridify/ai/batch_processor.py:175:13: RET505 [*] Unnecessary `elif` after `return` statement
    |
173 |             if batch_job.status == "completed":
174 |                 return batch_job
175 |             elif batch_job.status in ["failed", "expired", "cancelled"]:
    |             ^^^^ RET505
176 |                 raise Exception(f"Batch job failed: {batch_job.status}")
    |
    = help: Remove unnecessary `elif`

src/floridify/ai/batch_processor.py:176:23: TRY002 Create your own exception
    |
174 |                 return batch_job
175 |             elif batch_job.status in ["failed", "expired", "cancelled"]:
176 |                 raise Exception(f"Batch job failed: {batch_job.status}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY002
177 |
178 |             await asyncio.sleep(check_interval)
    |

src/floridify/ai/batch_processor.py:176:23: TRY003 Avoid specifying long messages outside the exception class
    |
174 |                 return batch_job
175 |             elif batch_job.status in ["failed", "expired", "cancelled"]:
176 |                 raise Exception(f"Batch job failed: {batch_job.status}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
177 |
178 |             await asyncio.sleep(check_interval)
    |

src/floridify/ai/batch_processor.py:176:33: EM102 Exception must not use an f-string literal, assign to variable first
    |
174 |                 return batch_job
175 |             elif batch_job.status in ["failed", "expired", "cancelled"]:
176 |                 raise Exception(f"Batch job failed: {batch_job.status}")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
177 |
178 |             await asyncio.sleep(check_interval)
    |
    = help: Assign to variable; remove f-string literal

src/floridify/ai/batch_processor.py:185:44: Q000 [*] Single quotes found but double quotes preferred
    |
184 |         results = []
185 |         for line in content.content.decode('utf-8').strip().split('\n'):
    |                                            ^^^^^^^ Q000
186 |             if line:
187 |                 results.append(json.loads(line))
    |
    = help: Replace single quotes with double quotes

src/floridify/ai/batch_processor.py:185:67: Q000 [*] Single quotes found but double quotes preferred
    |
184 |         results = []
185 |         for line in content.content.decode('utf-8').strip().split('\n'):
    |                                                                   ^^^^ Q000
186 |             if line:
187 |                 results.append(json.loads(line))
    |
    = help: Replace single quotes with double quotes

src/floridify/ai/batch_processor.py:187:17: PERF401 Use a list comprehension to create a transformed list
    |
185 |         for line in content.content.decode('utf-8').strip().split('\n'):
186 |             if line:
187 |                 results.append(json.loads(line))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
188 |
189 |         return results
    |
    = help: Replace for loop with list comprehension

src/floridify/ai/batch_processor.py:206:9: ANN204 Missing return type annotation for special method `__init__`
    |
204 |     """Context manager for batch processing OpenAI requests."""
205 |
206 |     def __init__(self, connector: OpenAIConnector):
    |         ^^^^^^^^ ANN204
207 |         self.connector = connector
208 |         self.collector = BatchCollector()
    |
    = help: Add return type annotation: `None`

src/floridify/ai/batch_processor.py:215:33: SLF001 Private member accessed: `_make_structured_request`
    |
213 |         """Enter batch mode by patching the connector."""
214 |         logger.info("🚀 Entering batch synthesis context")
215 |         self._original_method = self.connector._make_structured_request
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
216 |
217 |         # Store reference to self for the wrapper
    |

src/floridify/ai/batch_processor.py:222:69: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
220 |         # Create wrapper that collects requests
221 |         def batch_wrapper(
222 |             prompt: str, response_model: type[BaseModel], **kwargs: Any
    |                                                                     ^^^ ANN401
223 |         ) -> Any:
224 |             # Add to batch and return future
    |

src/floridify/ai/batch_processor.py:223:14: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `batch_wrapper`
    |
221 |         def batch_wrapper(
222 |             prompt: str, response_model: type[BaseModel], **kwargs: Any
223 |         ) -> Any:
    |              ^^^ ANN401
224 |             # Add to batch and return future
225 |             future = batch_context.collector.add_request(
    |

src/floridify/ai/batch_processor.py:229:17: G004 Logging statement uses f-string
    |
227 |             )
228 |             logger.debug(
229 |                 f"📥 Collected request #{len(batch_context.collector.requests)}: {response_model.__name__}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
230 |             )
231 |             # Return a task that will be resolved when batch executes
    |

src/floridify/ai/batch_processor.py:232:40: SLF001 Private member accessed: `_await_future`
    |
230 |             )
231 |             # Return a task that will be resolved when batch executes
232 |             return asyncio.create_task(batch_context._await_future(future))
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
233 |
234 |         # Patch the method
    |

src/floridify/ai/batch_processor.py:235:9: SLF001 Private member accessed: `_make_structured_request`
    |
234 |         # Patch the method
235 |         self.connector._make_structured_request = batch_wrapper  # type: ignore[assignment]
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
236 |         logger.info("✅ Batch mode activated - collecting API requests")
237 |         return self
    |

src/floridify/ai/batch_processor.py:239:62: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_await_future`
    |
237 |         return self
238 |
239 |     async def _await_future(self, future: asyncio.Future) -> Any:
    |                                                              ^^^ ANN401
240 |         """Helper to await a future."""
241 |         return await future
    |

src/floridify/ai/batch_processor.py:243:41: PYI036 The first argument in `__aexit__` should be annotated with `object` or `type[BaseException] | None`
    |
241 |         return await future
242 |
243 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                         ^^^ PYI036
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
    |

src/floridify/ai/batch_processor.py:243:41: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_type`
    |
241 |         return await future
242 |
243 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                         ^^^ ANN401
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
    |

src/floridify/ai/batch_processor.py:243:55: PYI036 The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`
    |
241 |         return await future
242 |
243 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                       ^^^ PYI036
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
    |

src/floridify/ai/batch_processor.py:243:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_val`
    |
241 |         return await future
242 |
243 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                       ^^^ ANN401
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
    |

src/floridify/ai/batch_processor.py:243:68: PYI036 The third argument in `__aexit__` should be annotated with `object` or `types.TracebackType | None`
    |
241 |         return await future
242 |
243 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                                    ^^^ PYI036
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
    |

src/floridify/ai/batch_processor.py:243:68: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_tb`
    |
241 |         return await future
242 |
243 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                                    ^^^ ANN401
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
    |

src/floridify/ai/batch_processor.py:246:13: G004 Logging statement uses f-string
    |
244 |         """Exit batch mode and execute collected requests."""
245 |         logger.info(
246 |             f"🏁 Exiting batch context with {len(self.collector.requests)} requests"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
247 |         )
    |

src/floridify/ai/batch_processor.py:251:13: SLF001 Private member accessed: `_make_structured_request`
    |
249 |         # Restore original method
250 |         if self._original_method:
251 |             self.connector._make_structured_request = self._original_method
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
252 |             logger.debug("🔄 Restored original API method")
    |

src/floridify/ai/batch_processor.py:259:17: G004 Logging statement uses f-string
    |
257 |         else:
258 |             logger.error(
259 |                 f"❌ Batch context exited with error: {exc_type.__name__}: {exc_val}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
260 |             )
    |

src/floridify/ai/batch_processor.py:262:15: PLR0912 Too many branches (13 > 12)
    |
260 |             )
261 |
262 |     async def execute(self) -> None:
    |               ^^^^^^^ PLR0912
263 |         """Execute all collected requests as a batch."""
264 |         if not self.collector.requests:
    |

src/floridify/ai/batch_processor.py:268:21: G004 Logging statement uses f-string
    |
266 |             return
267 |
268 |         logger.info(f"🎯 Executing batch with {len(self.collector.requests)} requests")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
269 |
270 |         # Log request types
    |

src/floridify/ai/batch_processor.py:275:21: G004 Logging statement uses f-string
    |
273 |             model_name = req.response_model.__name__
274 |             request_types[model_name] = request_types.get(model_name, 0) + 1
275 |         logger.info(f"📊 Request breakdown: {request_types}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
276 |
277 |         # Prepare batch file
    |

src/floridify/ai/batch_processor.py:287:25: G004 Logging statement uses f-string
    |
285 |             logger.info("📤 Submitting batch to OpenAI API")
286 |             results = await self.executor.execute_batch(batch_file)
287 |             logger.info(f"📥 Received {len(results)} results from batch")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
288 |
289 |             # Resolve futures with results
    |

src/floridify/ai/batch_processor.py:293:80: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
291 |                 result = results.get(request.custom_id)
292 |
293 |                 if result and result.get("response", {}).get("status_code") == 200:
    |                                                                                ^^^ PLR2004
294 |                     try:
295 |                         # Extract content from response
    |

src/floridify/ai/batch_processor.py:307:25: TRY400 Use `logging.exception` instead of `logging.error`
    |
305 |                               request.future.set_result(content)
306 |                       except Exception as e:
307 | /                         logger.error(
308 | |                             f"Failed to parse result for {request.custom_id}: {e}"
309 | |                         )
    | |_________________________^ TRY400
310 |                           request.future.set_exception(e)
311 |                   else:
    |
    = help: Replace with `exception`

src/floridify/ai/batch_processor.py:308:29: G004 Logging statement uses f-string
    |
306 |                     except Exception as e:
307 |                         logger.error(
308 |                             f"Failed to parse result for {request.custom_id}: {e}"
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
309 |                         )
310 |                         request.future.set_exception(e)
    |

src/floridify/ai/batch_processor.py:317:34: G004 Logging statement uses f-string
    |
315 |                         else "No result found"
316 |                     )
317 |                     logger.error(f"Request {request.custom_id} failed: {error}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
318 |                     request.future.set_exception(
319 |                         Exception(f"Batch request failed: {error}")
    |

src/floridify/ai/batch_processor.py:324:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
322 |         except Exception as e:
323 |             # Set exception on all futures
324 |             logger.error(f"Batch execution failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
325 |             for request in self.collector.requests:
326 |                 if not request.future.done():
    |
    = help: Replace with `exception`

src/floridify/ai/batch_processor.py:324:26: G004 Logging statement uses f-string
    |
322 |         except Exception as e:
323 |             # Set exception on all futures
324 |             logger.error(f"Batch execution failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
325 |             for request in self.collector.requests:
326 |                 if not request.future.done():
    |

src/floridify/ai/connector.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from pydantic import BaseModel
11 |
12 | from ..caching.decorators import cached_api_call
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..models import Definition
14 | from ..utils.logging import get_logger, log_metrics
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/connector.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..caching.decorators import cached_api_call
13 | from ..models import Definition
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..utils.logging import get_logger, log_metrics
15 | from .models import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/connector.py:13:22: TC001 Move application import `..models.Definition` into a type-checking block
   |
12 | from ..caching.decorators import cached_api_call
13 | from ..models import Definition
   |                      ^^^^^^^^^^ TC001
14 | from ..utils.logging import get_logger, log_metrics
15 | from .models import (
   |
   = help: Move into type-checking block

src/floridify/ai/connector.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..caching.decorators import cached_api_call
13 | from ..models import Definition
14 | from ..utils.logging import get_logger, log_metrics
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from .models import (
16 |     AnkiFillBlankResponse,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/connector.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..caching.decorators import cached_api_call
13 | from ..models import Definition
14 | from ..utils.logging import get_logger, log_metrics
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from .models import (
16 |     AnkiFillBlankResponse,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/connector.py:81:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
79 |         prompt: str,
80 |         response_model: type[T],
81 |         **kwargs: Any,
   |                   ^^^ ANN401
82 |     ) -> T:
83 |         """Make a structured request to OpenAI with caching."""
   |

src/floridify/ai/connector.py:104:21: G004 Logging statement uses f-string
    |
102 |                   # Log API call details
103 |                   logger.debug(
104 | /                     f"🤖 OpenAI API call: model={self.model_name}, "
105 | |                     f"response_type={response_model.__name__}, "
106 | |                     f"prompt_length={len(prompt)}, retry={retry_count}"
    | |_______________________________________________________________________^ G004
107 |                   )
    |

src/floridify/ai/connector.py:143:21: TRY301 Abstract `raise` to an inner function
    |
141 |                         result.token_usage = token_usage
142 |                 else:
143 |                     raise ValueError("No content in response")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
144 |
145 |                 total_duration = time.perf_counter() - start_time
    |

src/floridify/ai/connector.py:143:27: TRY003 Avoid specifying long messages outside the exception class
    |
141 |                         result.token_usage = token_usage
142 |                 else:
143 |                     raise ValueError("No content in response")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
144 |
145 |                 total_duration = time.perf_counter() - start_time
    |

src/floridify/ai/connector.py:143:38: EM101 Exception must not use a string literal, assign to variable first
    |
141 |                         result.token_usage = token_usage
142 |                 else:
143 |                     raise ValueError("No content in response")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ EM101
144 |
145 |                 total_duration = time.perf_counter() - start_time
    |
    = help: Assign to variable; remove string literal

src/floridify/ai/connector.py:147:21: G004 Logging statement uses f-string
    |
145 |                   total_duration = time.perf_counter() - start_time
146 |                   logger.info(
147 | /                     f"✅ OpenAI API success: {response_model.__name__} "
148 | |                     f"in {total_duration:.2f}s (tokens: {token_usage.get('total_tokens', 'N/A')})"
    | |__________________________________________________________________________________________________^ G004
149 |                   )
    |

src/floridify/ai/connector.py:151:29: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
149 |                 )
150 |
151 |                 return cast(T, result)
    |                             ^ TC006
152 |
153 |             except Exception as e:
    |
    = help: Add quotes

src/floridify/ai/connector.py:160:25: G004 Logging statement uses f-string
    |
158 |                       wait_time = retry_count * 2  # Exponential backoff
159 |                       logger.warning(
160 | /                         f"⚠️  OpenAI API error (attempt {retry_count}/{max_retries}): {e}. "
161 | |                         f"Retrying in {wait_time}s..."
    | |______________________________________________________^ G004
162 |                       )
163 |                       await asyncio.sleep(wait_time)
    |

src/floridify/ai/connector.py:165:21: TRY400 Use `logging.exception` instead of `logging.error`
    |
163 |                       await asyncio.sleep(wait_time)
164 |                   else:
165 | /                     logger.error(
166 | |                         f"❌ OpenAI API failed after {max_retries} attempts "
167 | |                         f"({duration:.2f}s total): {e}"
168 | |                     )
    | |_____________________^ TRY400
169 |                       log_metrics(
170 |                           api_call="openai_error",
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:166:25: G004 Logging statement uses f-string
    |
164 |                   else:
165 |                       logger.error(
166 | /                         f"❌ OpenAI API failed after {max_retries} attempts "
167 | |                         f"({duration:.2f}s total): {e}"
    | |_______________________________________________________^ G004
168 |                       )
169 |                       log_metrics(
    |

src/floridify/ai/connector.py:180:15: TRY003 Avoid specifying long messages outside the exception class
    |
179 |         # This should never be reached, but satisfies type checker
180 |         raise RuntimeError(f"Failed to get response after {max_retries} retries")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
181 |
182 |     async def synthesize_definitions(
    |

src/floridify/ai/connector.py:180:28: EM102 Exception must not use an f-string literal, assign to variable first
    |
179 |         # This should never be reached, but satisfies type checker
180 |         raise RuntimeError(f"Failed to get response after {max_retries} retries")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
181 |
182 |     async def synthesize_definitions(
    |
    = help: Assign to variable; remove f-string literal

src/floridify/ai/connector.py:205:13: TRY300 Consider moving this statement to an `else` block
    |
203 |             result = await self._make_structured_request(prompt, SynthesisResponse)
204 |             # Success logging handled by synthesizer context
205 |             return result
    |             ^^^^^^^^^^^^^ TRY300
206 |         except Exception as e:
207 |             logger.error(f"❌ Definition synthesis failed for '{word}' ({meaning_cluster}): {e}")
    |

src/floridify/ai/connector.py:205:20: RET504 Unnecessary assignment to `result` before `return` statement
    |
203 |             result = await self._make_structured_request(prompt, SynthesisResponse)
204 |             # Success logging handled by synthesizer context
205 |             return result
    |                    ^^^^^^ RET504
206 |         except Exception as e:
207 |             logger.error(f"❌ Definition synthesis failed for '{word}' ({meaning_cluster}): {e}")
    |
    = help: Remove unnecessary assignment

src/floridify/ai/connector.py:207:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
205 |             return result
206 |         except Exception as e:
207 |             logger.error(f"❌ Definition synthesis failed for '{word}' ({meaning_cluster}): {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
208 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:207:26: G004 Logging statement uses f-string
    |
205 |             return result
206 |         except Exception as e:
207 |             logger.error(f"❌ Definition synthesis failed for '{word}' ({meaning_cluster}): {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
208 |             raise
    |

src/floridify/ai/connector.py:218:22: G004 Logging statement uses f-string
    |
216 |     ) -> ExampleGenerationResponse:
217 |         """Generate modern usage examples."""
218 |         logger.debug(f"📝 Generating {count} example sentence(s) for '{word}' ({part_of_speech})")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
219 |
220 |         prompt = self.template_manager.get_generate_examples_prompt(
    |

src/floridify/ai/connector.py:228:80: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
226 |             if result.example_sentences:
227 |                 first_example = result.example_sentences[0]
228 |                 truncated = first_example[:50] + "..." if len(first_example) > 50 else first_example
    |                                                                                ^^ PLR2004
229 |                 logger.debug(f"✏️  Generated example for '{word}': \"{truncated}\"")
230 |             return result
    |

src/floridify/ai/connector.py:229:30: G004 Logging statement uses f-string
    |
227 |                 first_example = result.example_sentences[0]
228 |                 truncated = first_example[:50] + "..." if len(first_example) > 50 else first_example
229 |                 logger.debug(f"✏️  Generated example for '{word}': \"{truncated}\"")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
230 |             return result
231 |         except Exception as e:
    |

src/floridify/ai/connector.py:230:13: TRY300 Consider moving this statement to an `else` block
    |
228 |                 truncated = first_example[:50] + "..." if len(first_example) > 50 else first_example
229 |                 logger.debug(f"✏️  Generated example for '{word}': \"{truncated}\"")
230 |             return result
    |             ^^^^^^^^^^^^^ TRY300
231 |         except Exception as e:
232 |             logger.error(f"❌ Example generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:232:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
230 |             return result
231 |         except Exception as e:
232 |             logger.error(f"❌ Example generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
233 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:232:26: G004 Logging statement uses f-string
    |
230 |             return result
231 |         except Exception as e:
232 |             logger.error(f"❌ Example generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
233 |             raise
    |

src/floridify/ai/connector.py:243:21: G004 Logging statement uses f-string
    |
241 |     async def lookup_fallback(self, word: str) -> DictionaryEntryResponse | None:
242 |         """Generate AI fallback provider data."""
243 |         logger.info(f"🤖 Generating AI fallback definition for '{word}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
244 |
245 |         prompt = self.template_manager.get_lookup_prompt(word)
    |

src/floridify/ai/connector.py:251:29: G004 Logging statement uses f-string
    |
250 |             if result.provider_data is None:
251 |                 logger.info(f"🚫 AI identified '{word}' as nonsense/invalid")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
252 |                 return None
253 |             elif result.provider_data:
    |

src/floridify/ai/connector.py:253:13: RET505 [*] Unnecessary `elif` after `return` statement
    |
251 |                 logger.info(f"🚫 AI identified '{word}' as nonsense/invalid")
252 |                 return None
253 |             elif result.provider_data:
    |             ^^^^ RET505
254 |                 def_count = len(result.provider_data.definitions)
255 |                 logger.success(
    |
    = help: Remove unnecessary `elif`

src/floridify/ai/connector.py:260:32: G004 Logging statement uses f-string
    |
258 |                 )
259 |             else:
260 |                 logger.warning(f"⚠️  AI generated empty response for '{word}'")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
261 |
262 |             return result
    |

src/floridify/ai/connector.py:262:13: TRY300 Consider moving this statement to an `else` block
    |
260 |                 logger.warning(f"⚠️  AI generated empty response for '{word}'")
261 |
262 |             return result
    |             ^^^^^^^^^^^^^ TRY300
263 |         except Exception as e:
264 |             logger.error(f"❌ AI fallback generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:264:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
262 |             return result
263 |         except Exception as e:
264 |             logger.error(f"❌ AI fallback generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
265 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:264:26: G004 Logging statement uses f-string
    |
262 |             return result
263 |         except Exception as e:
264 |             logger.error(f"❌ AI fallback generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
265 |             raise
    |

src/floridify/ai/connector.py:279:21: G004 Logging statement uses f-string
    |
277 |         def_count = len(definitions)
278 |
279 |         logger.info(f"🔢 Extracting cluster mappings for '{word}' from {def_count} definitions")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
280 |
281 |         prompt = self.template_manager.get_meaning_extraction_prompt(word, definitions)
    |

src/floridify/ai/connector.py:297:21: G004 Logging statement uses f-string
    |
295 |               for cluster in result.cluster_mappings:
296 |                   logger.debug(
297 | /                     f"  • Cluster '{cluster.cluster_id}': {cluster.cluster_description} "
298 | |                     f"({len(cluster.definition_indices)} definitions)"
    | |______________________________________________________________________^ G004
299 |                   )
    |

src/floridify/ai/connector.py:310:13: TRY300 Consider moving this statement to an `else` block
    |
308 |                 duration=duration,
309 |             )
310 |             return result
    |             ^^^^^^^^^^^^^ TRY300
311 |         except Exception as e:
312 |             logger.error(f"❌ Cluster mapping extraction failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:312:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
310 |             return result
311 |         except Exception as e:
312 |             logger.error(f"❌ Cluster mapping extraction failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
313 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:312:26: G004 Logging statement uses f-string
    |
310 |             return result
311 |         except Exception as e:
312 |             logger.error(f"❌ Cluster mapping extraction failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
313 |             raise
    |

src/floridify/ai/connector.py:328:26: G004 Logging statement uses f-string
    |
326 |         try:
327 |             result = await self._make_structured_request(prompt, AnkiFillBlankResponse)
328 |             logger.debug(f"Generated fill-blank card for '{word}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
329 |             return result
330 |         except Exception as e:
    |

src/floridify/ai/connector.py:329:13: TRY300 Consider moving this statement to an `else` block
    |
327 |             result = await self._make_structured_request(prompt, AnkiFillBlankResponse)
328 |             logger.debug(f"Generated fill-blank card for '{word}'")
329 |             return result
    |             ^^^^^^^^^^^^^ TRY300
330 |         except Exception as e:
331 |             logger.error(f"❌ Fill-blank generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:331:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
329 |             return result
330 |         except Exception as e:
331 |             logger.error(f"❌ Fill-blank generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
332 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:331:26: G004 Logging statement uses f-string
    |
329 |             return result
330 |         except Exception as e:
331 |             logger.error(f"❌ Fill-blank generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
332 |             raise
    |

src/floridify/ai/connector.py:347:26: G004 Logging statement uses f-string
    |
345 |         try:
346 |             result = await self._make_structured_request(prompt, AnkiMultipleChoiceResponse)
347 |             logger.debug(f"Generated best describes card for '{word}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
348 |             return result
349 |         except Exception as e:
    |

src/floridify/ai/connector.py:348:13: TRY300 Consider moving this statement to an `else` block
    |
346 |             result = await self._make_structured_request(prompt, AnkiMultipleChoiceResponse)
347 |             logger.debug(f"Generated best describes card for '{word}'")
348 |             return result
    |             ^^^^^^^^^^^^^ TRY300
349 |         except Exception as e:
350 |             logger.error(f"❌ Best describes generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:350:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
348 |             return result
349 |         except Exception as e:
350 |             logger.error(f"❌ Best describes generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
351 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:350:26: G004 Logging statement uses f-string
    |
348 |             return result
349 |         except Exception as e:
350 |             logger.error(f"❌ Best describes generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
351 |             raise
    |

src/floridify/ai/connector.py:357:22: G004 Logging statement uses f-string
    |
355 |     ) -> SynonymGenerationResponse:
356 |         """Generate synonyms with efflorescence ranking."""
357 |         logger.debug(f"🔗 Generating {count} synonyms for '{word}' ({part_of_speech})")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
358 |
359 |         prompt = self.template_manager.get_synthesize_synonyms_prompt(
    |

src/floridify/ai/connector.py:374:13: TRY300 Consider moving this statement to an `else` block
    |
372 |                 f"✨ Generated {synonym_count} synonyms for '{word}' (confidence: {result.confidence:.1%})"
373 |             )
374 |             return result
    |             ^^^^^^^^^^^^^ TRY300
375 |         except Exception as e:
376 |             logger.error(f"❌ Synonym generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:376:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
374 |             return result
375 |         except Exception as e:
376 |             logger.error(f"❌ Synonym generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
377 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:376:26: G004 Logging statement uses f-string
    |
374 |             return result
375 |         except Exception as e:
376 |             logger.error(f"❌ Synonym generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
377 |             raise
    |

src/floridify/ai/connector.py:395:13: G004 Logging statement uses f-string
    |
394 |         logger.info(
395 |             f"🌸 Generating {suggestion_count} suggestions from {len(limited_words) if limited_words else 0} words"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
396 |         )
    |

src/floridify/ai/connector.py:410:13: TRY300 Consider moving this statement to an `else` block
    |
408 |                 f"✨ Generated {suggestions_count} suggestions (confidence: {result.confidence:.1%})"
409 |             )
410 |             return result
    |             ^^^^^^^^^^^^^ TRY300
411 |         except Exception as e:
412 |             logger.error(f"❌ Suggestions generation failed: {e}")
    |

src/floridify/ai/connector.py:412:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
410 |             return result
411 |         except Exception as e:
412 |             logger.error(f"❌ Suggestions generation failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
413 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:412:26: G004 Logging statement uses f-string
    |
410 |             return result
411 |         except Exception as e:
412 |             logger.error(f"❌ Suggestions generation failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
413 |             raise
    |

src/floridify/ai/connector.py:437:13: G004 Logging statement uses f-string
    |
436 |         logger.info(
437 |             f"📚 Generating {fact_count} facts for '{word}' with {len(limited_previous)} previous words"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
438 |         )
    |

src/floridify/ai/connector.py:456:13: TRY300 Consider moving this statement to an `else` block
    |
454 |                 f"({categories_str}, confidence: {result.confidence:.1%})"
455 |             )
456 |             return result
    |             ^^^^^^^^^^^^^ TRY300
457 |         except Exception as e:
458 |             logger.error(f"❌ Fact generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:458:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
456 |             return result
457 |         except Exception as e:
458 |             logger.error(f"❌ Fact generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
459 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:458:26: G004 Logging statement uses f-string
    |
456 |             return result
457 |         except Exception as e:
458 |             logger.error(f"❌ Fact generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
459 |             raise
    |

src/floridify/ai/connector.py:489:25: G004 Logging statement uses f-string
    |
487 |         try:
488 |             result = await self._make_structured_request(prompt, AntonymResponse)
489 |             logger.info(f"Generated {len(result.antonyms)} antonyms for '{word}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
490 |             return result
491 |         except Exception as e:
    |

src/floridify/ai/connector.py:490:13: TRY300 Consider moving this statement to an `else` block
    |
488 |             result = await self._make_structured_request(prompt, AntonymResponse)
489 |             logger.info(f"Generated {len(result.antonyms)} antonyms for '{word}'")
490 |             return result
    |             ^^^^^^^^^^^^^ TRY300
491 |         except Exception as e:
492 |             logger.error(f"Antonym generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:492:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
490 |             return result
491 |         except Exception as e:
492 |             logger.error(f"Antonym generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
493 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:492:26: G004 Logging statement uses f-string
    |
490 |             return result
491 |         except Exception as e:
492 |             logger.error(f"Antonym generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
493 |             raise
    |

src/floridify/ai/connector.py:516:25: G004 Logging statement uses f-string
    |
514 |         try:
515 |             result = await self._make_structured_request(prompt, EtymologyResponse)
516 |             logger.info(f"Extracted etymology for '{word}' (origin: {result.origin_language})")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
517 |             return result
518 |         except Exception as e:
    |

src/floridify/ai/connector.py:517:13: TRY300 Consider moving this statement to an `else` block
    |
515 |             result = await self._make_structured_request(prompt, EtymologyResponse)
516 |             logger.info(f"Extracted etymology for '{word}' (origin: {result.origin_language})")
517 |             return result
    |             ^^^^^^^^^^^^^ TRY300
518 |         except Exception as e:
519 |             logger.error(f"Etymology extraction failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:519:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
517 |             return result
518 |         except Exception as e:
519 |             logger.error(f"Etymology extraction failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
520 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:519:26: G004 Logging statement uses f-string
    |
517 |             return result
518 |         except Exception as e:
519 |             logger.error(f"Etymology extraction failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
520 |             raise
    |

src/floridify/ai/connector.py:543:25: G004 Logging statement uses f-string
    |
541 |         try:
542 |             result = await self._make_structured_request(prompt, WordFormResponse)
543 |             logger.info(f"Identified {len(result.forms)} word forms for '{word}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
544 |             return result
545 |         except Exception as e:
    |

src/floridify/ai/connector.py:544:13: TRY300 Consider moving this statement to an `else` block
    |
542 |             result = await self._make_structured_request(prompt, WordFormResponse)
543 |             logger.info(f"Identified {len(result.forms)} word forms for '{word}'")
544 |             return result
    |             ^^^^^^^^^^^^^ TRY300
545 |         except Exception as e:
546 |             logger.error(f"Word form identification failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:546:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
544 |             return result
545 |         except Exception as e:
546 |             logger.error(f"Word form identification failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
547 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:546:26: G004 Logging statement uses f-string
    |
544 |             return result
545 |         except Exception as e:
546 |             logger.error(f"Word form identification failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
547 |             raise
    |

src/floridify/ai/connector.py:570:25: G004 Logging statement uses f-string
    |
568 |         try:
569 |             result = await self._make_structured_request(prompt, FrequencyBandResponse)
570 |             logger.info(f"Assessed frequency band {result.band} for '{word}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
571 |             return result
572 |         except Exception as e:
    |

src/floridify/ai/connector.py:571:13: TRY300 Consider moving this statement to an `else` block
    |
569 |             result = await self._make_structured_request(prompt, FrequencyBandResponse)
570 |             logger.info(f"Assessed frequency band {result.band} for '{word}'")
571 |             return result
    |             ^^^^^^^^^^^^^ TRY300
572 |         except Exception as e:
573 |             logger.error(f"Frequency assessment failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:573:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
571 |             return result
572 |         except Exception as e:
573 |             logger.error(f"Frequency assessment failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
574 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:573:26: G004 Logging statement uses f-string
    |
571 |             return result
572 |         except Exception as e:
573 |             logger.error(f"Frequency assessment failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
574 |             raise
    |

src/floridify/ai/connector.py:592:25: G004 Logging statement uses f-string
    |
590 |         try:
591 |             result = await self._make_structured_request(prompt, RegisterClassificationResponse)
592 |             logger.info(f"Classified register as '{result.language_register}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
593 |             return result
594 |         except Exception as e:
    |

src/floridify/ai/connector.py:593:13: TRY300 Consider moving this statement to an `else` block
    |
591 |             result = await self._make_structured_request(prompt, RegisterClassificationResponse)
592 |             logger.info(f"Classified register as '{result.language_register}'")
593 |             return result
    |             ^^^^^^^^^^^^^ TRY300
594 |         except Exception as e:
595 |             logger.error(f"Register classification failed: {e}")
    |

src/floridify/ai/connector.py:595:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
593 |             return result
594 |         except Exception as e:
595 |             logger.error(f"Register classification failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
596 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:595:26: G004 Logging statement uses f-string
    |
593 |             return result
594 |         except Exception as e:
595 |             logger.error(f"Register classification failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
596 |             raise
    |

src/floridify/ai/connector.py:614:25: G004 Logging statement uses f-string
    |
612 |         try:
613 |             result = await self._make_structured_request(prompt, DomainIdentificationResponse)
614 |             logger.info(f"Identified domain as '{result.domain}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
615 |             return result
616 |         except Exception as e:
    |

src/floridify/ai/connector.py:615:13: TRY300 Consider moving this statement to an `else` block
    |
613 |             result = await self._make_structured_request(prompt, DomainIdentificationResponse)
614 |             logger.info(f"Identified domain as '{result.domain}'")
615 |             return result
    |             ^^^^^^^^^^^^^ TRY300
616 |         except Exception as e:
617 |             logger.error(f"Domain identification failed: {e}")
    |

src/floridify/ai/connector.py:617:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
615 |             return result
616 |         except Exception as e:
617 |             logger.error(f"Domain identification failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
618 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:617:26: G004 Logging statement uses f-string
    |
615 |             return result
616 |         except Exception as e:
617 |             logger.error(f"Domain identification failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
618 |             raise
    |

src/floridify/ai/connector.py:641:25: G004 Logging statement uses f-string
    |
639 |         try:
640 |             result = await self._make_structured_request(prompt, CEFRLevelResponse)
641 |             logger.info(f"Assessed CEFR level {result.level} for '{word}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
642 |             return result
643 |         except Exception as e:
    |

src/floridify/ai/connector.py:642:13: TRY300 Consider moving this statement to an `else` block
    |
640 |             result = await self._make_structured_request(prompt, CEFRLevelResponse)
641 |             logger.info(f"Assessed CEFR level {result.level} for '{word}'")
642 |             return result
    |             ^^^^^^^^^^^^^ TRY300
643 |         except Exception as e:
644 |             logger.error(f"CEFR assessment failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:644:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
642 |             return result
643 |         except Exception as e:
644 |             logger.error(f"CEFR assessment failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
645 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:644:26: G004 Logging statement uses f-string
    |
642 |             return result
643 |         except Exception as e:
644 |             logger.error(f"CEFR assessment failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
645 |             raise
    |

src/floridify/ai/connector.py:668:25: G004 Logging statement uses f-string
    |
666 |         try:
667 |             result = await self._make_structured_request(prompt, GrammarPatternResponse)
668 |             logger.info(f"Extracted {len(result.patterns)} grammar patterns")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
669 |             return result
670 |         except Exception as e:
    |

src/floridify/ai/connector.py:669:13: TRY300 Consider moving this statement to an `else` block
    |
667 |             result = await self._make_structured_request(prompt, GrammarPatternResponse)
668 |             logger.info(f"Extracted {len(result.patterns)} grammar patterns")
669 |             return result
    |             ^^^^^^^^^^^^^ TRY300
670 |         except Exception as e:
671 |             logger.error(f"Grammar pattern extraction failed: {e}")
    |

src/floridify/ai/connector.py:671:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
669 |             return result
670 |         except Exception as e:
671 |             logger.error(f"Grammar pattern extraction failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
672 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:671:26: G004 Logging statement uses f-string
    |
669 |             return result
670 |         except Exception as e:
671 |             logger.error(f"Grammar pattern extraction failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
672 |             raise
    |

src/floridify/ai/connector.py:698:25: G004 Logging statement uses f-string
    |
696 |         try:
697 |             result = await self._make_structured_request(prompt, CollocationResponse)
698 |             logger.info(f"Identified {len(result.collocations)} collocations for '{word}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
699 |             return result
700 |         except Exception as e:
    |

src/floridify/ai/connector.py:699:13: TRY300 Consider moving this statement to an `else` block
    |
697 |             result = await self._make_structured_request(prompt, CollocationResponse)
698 |             logger.info(f"Identified {len(result.collocations)} collocations for '{word}'")
699 |             return result
    |             ^^^^^^^^^^^^^ TRY300
700 |         except Exception as e:
701 |             logger.error(f"Collocation identification failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:701:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
699 |             return result
700 |         except Exception as e:
701 |             logger.error(f"Collocation identification failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
702 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:701:26: G004 Logging statement uses f-string
    |
699 |             return result
700 |         except Exception as e:
701 |             logger.error(f"Collocation identification failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
702 |             raise
    |

src/floridify/ai/connector.py:725:25: G004 Logging statement uses f-string
    |
723 |         try:
724 |             result = await self._make_structured_request(prompt, UsageNoteResponse)
725 |             logger.info(f"Generated {len(result.notes)} usage notes for '{word}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
726 |             return result
727 |         except Exception as e:
    |

src/floridify/ai/connector.py:726:13: TRY300 Consider moving this statement to an `else` block
    |
724 |             result = await self._make_structured_request(prompt, UsageNoteResponse)
725 |             logger.info(f"Generated {len(result.notes)} usage notes for '{word}'")
726 |             return result
    |             ^^^^^^^^^^^^^ TRY300
727 |         except Exception as e:
728 |             logger.error(f"Usage note generation failed for '{word}': {e}")
    |

src/floridify/ai/connector.py:728:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
726 |             return result
727 |         except Exception as e:
728 |             logger.error(f"Usage note generation failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
729 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:728:26: G004 Logging statement uses f-string
    |
726 |             return result
727 |         except Exception as e:
728 |             logger.error(f"Usage note generation failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
729 |             raise
    |

src/floridify/ai/connector.py:747:25: G004 Logging statement uses f-string
    |
745 |         try:
746 |             result = await self._make_structured_request(prompt, RegionalVariantResponse)
747 |             logger.info(f"Detected regional variants: {', '.join(result.regions)}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
748 |             return result
749 |         except Exception as e:
    |

src/floridify/ai/connector.py:748:13: TRY300 Consider moving this statement to an `else` block
    |
746 |             result = await self._make_structured_request(prompt, RegionalVariantResponse)
747 |             logger.info(f"Detected regional variants: {', '.join(result.regions)}")
748 |             return result
    |             ^^^^^^^^^^^^^ TRY300
749 |         except Exception as e:
750 |             logger.error(f"Regional variant detection failed: {e}")
    |

src/floridify/ai/connector.py:750:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
748 |             return result
749 |         except Exception as e:
750 |             logger.error(f"Regional variant detection failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
751 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:750:26: G004 Logging statement uses f-string
    |
748 |             return result
749 |         except Exception as e:
750 |             logger.error(f"Regional variant detection failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
751 |             raise
    |

src/floridify/ai/connector.py:769:25: G004 Logging statement uses f-string
    |
767 |         try:
768 |             result = await self._make_structured_request(prompt, QueryValidationResponse)
769 |             logger.info(f"Query validation: {result.is_valid} - {result.reason}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
770 |             return result
771 |         except Exception as e:
    |

src/floridify/ai/connector.py:770:13: TRY300 Consider moving this statement to an `else` block
    |
768 |             result = await self._make_structured_request(prompt, QueryValidationResponse)
769 |             logger.info(f"Query validation: {result.is_valid} - {result.reason}")
770 |             return result
    |             ^^^^^^^^^^^^^ TRY300
771 |         except Exception as e:
772 |             logger.error(f"Query validation failed: {e}")
    |

src/floridify/ai/connector.py:772:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
770 |             return result
771 |         except Exception as e:
772 |             logger.error(f"Query validation failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
773 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:772:26: G004 Logging statement uses f-string
    |
770 |             return result
771 |         except Exception as e:
772 |             logger.error(f"Query validation failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
773 |             raise
    |

src/floridify/ai/connector.py:804:25: G004 Logging statement uses f-string
    |
802 |                 max_tokens=max_tokens
803 |             )
804 |             logger.info(f"Generated {len(result.suggestions)} word suggestions")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
805 |             return result
806 |         except Exception as e:
    |

src/floridify/ai/connector.py:805:13: TRY300 Consider moving this statement to an `else` block
    |
803 |             )
804 |             logger.info(f"Generated {len(result.suggestions)} word suggestions")
805 |             return result
    |             ^^^^^^^^^^^^^ TRY300
806 |         except Exception as e:
807 |             logger.error(f"Word suggestion failed: {e}")
    |

src/floridify/ai/connector.py:807:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
805 |             return result
806 |         except Exception as e:
807 |             logger.error(f"Word suggestion failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
808 |             raise
    |
    = help: Replace with `exception`

src/floridify/ai/connector.py:807:26: G004 Logging statement uses f-string
    |
805 |             return result
806 |         except Exception as e:
807 |             logger.error(f"Word suggestion failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
808 |             raise
    |

src/floridify/ai/definition_serializer.py:5:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
3 | from typing import Any
4 |
5 | from ..models import Definition
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/factory.py:5:21: TC003 Move standard library import `pathlib.Path` into a type-checking block
  |
3 | from __future__ import annotations
4 |
5 | from pathlib import Path
  |                     ^^^^ TC003
6 |
7 | from ..utils.config import Config
  |
  = help: Move into type-checking block

src/floridify/ai/factory.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from pathlib import Path
6 |
7 | from ..utils.config import Config
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
8 | from ..utils.logging import get_logger
9 | from .connector import OpenAIConnector
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/factory.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from ..utils.config import Config
 8 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
 9 | from .connector import OpenAIConnector
10 | from .synthesizer import DefinitionSynthesizer
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/factory.py:32:12: PLW0603 Using the global statement to update `_openai_connector` is discouraged
   |
30 |         Initialized OpenAI connector instance
31 |     """
32 |     global _openai_connector
   |            ^^^^^^^^^^^^^^^^^ PLW0603
33 |
34 |     if _openai_connector is None or force_recreate:
   |

src/floridify/ai/factory.py:42:21: G004 Logging statement uses f-string
   |
41 |         # Log configuration status (without exposing the key)
42 |         logger.info(f"OpenAI model: {model_name}")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
43 |         logger.info(f"API key configured: {'Yes' if api_key and len(api_key) > 20 else 'No'}")
   |

src/floridify/ai/factory.py:43:21: G004 Logging statement uses f-string
   |
41 |         # Log configuration status (without exposing the key)
42 |         logger.info(f"OpenAI model: {model_name}")
43 |         logger.info(f"API key configured: {'Yes' if api_key and len(api_key) > 20 else 'No'}")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
44 |
45 |         # Only set temperature for non-reasoning models
   |

src/floridify/ai/factory.py:43:80: PLR2004 Magic value used in comparison, consider replacing `20` with a constant variable
   |
41 |         # Log configuration status (without exposing the key)
42 |         logger.info(f"OpenAI model: {model_name}")
43 |         logger.info(f"API key configured: {'Yes' if api_key and len(api_key) > 20 else 'No'}")
   |                                                                                ^^ PLR2004
44 |
45 |         # Only set temperature for non-reasoning models
   |

src/floridify/ai/factory.py:75:12: PLW0603 Using the global statement to update `_definition_synthesizer` is discouraged
   |
73 |         Initialized definition synthesizer instance
74 |     """
75 |     global _definition_synthesizer
   |            ^^^^^^^^^^^^^^^^^^^^^^^ PLW0603
76 |
77 |     if _definition_synthesizer is None or force_recreate:
   |

src/floridify/ai/factory.py:101:12: PLW0603 Using the global statement to update `_openai_connector` is discouraged
    |
 99 | def reset_ai_singletons() -> None:
100 |     """Reset all AI singletons (for testing/cleanup)."""
101 |     global _openai_connector, _definition_synthesizer
    |            ^^^^^^^^^^^^^^^^^ PLW0603
102 |     _openai_connector = None
103 |     _definition_synthesizer = None
    |

src/floridify/ai/factory.py:101:31: PLW0603 Using the global statement to update `_definition_synthesizer` is discouraged
    |
 99 | def reset_ai_singletons() -> None:
100 |     """Reset all AI singletons (for testing/cleanup)."""
101 |     global _openai_connector, _definition_synthesizer
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ PLW0603
102 |     _openai_connector = None
103 |     _definition_synthesizer = None
    |

src/floridify/ai/models.py:5:22: TC003 Move standard library import `datetime.datetime` into a type-checking block
  |
3 | from __future__ import annotations
4 |
5 | from datetime import datetime
  |                      ^^^^^^^^ TC003
6 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/ai/models.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from pydantic import BaseModel, Field
 9 |
10 | from ..models import ProviderData
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:10:5: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | if TYPE_CHECKING:
10 |     from ..core.state_tracker import StateTracker
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 |
12 | from ..audio import AudioSynthesizer
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |     from ..core.state_tracker import StateTracker
11 |
12 | from ..audio import AudioSynthesizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..core.state_tracker import Stages
14 | from ..models import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..audio import AudioSynthesizer
13 | from ..core.state_tracker import Stages
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..models import (
15 |     Collocation,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..audio import AudioSynthesizer
13 |   from ..core.state_tracker import Stages
14 | / from ..models import (
15 | |     Collocation,
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Fact,
20 | |     GrammarPattern,
21 | |     MeaningCluster,
22 | |     ModelInfo,
23 | |     Pronunciation,
24 | |     ProviderData,
25 | |     SynthesizedDictionaryEntry,
26 | |     UsageNote,
27 | |     Word,
28 | |     WordForm,
29 | | )
   | |_^ TID252
30 |   from ..utils.logging import get_logger
31 |   from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:30:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
28 |     WordForm,
29 | )
30 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
31 | from .batch_processor import batch_synthesis
32 | from .connector import OpenAIConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesis_functions.py:32:24: TC001 Move application import `.connector.OpenAIConnector` into a type-checking block
   |
30 | from ..utils.logging import get_logger
31 | from .batch_processor import batch_synthesis
32 | from .connector import OpenAIConnector
   |                        ^^^^^^^^^^^^^^^ TC001
33 | from .constants import (
34 |     DEFAULT_ANTONYM_COUNT,
   |
   = help: Move into type-checking block

src/floridify/ai/synthesis_functions.py:39:21: TC001 Move application import `.models.QueryValidationResponse` into a type-checking block
   |
37 |     SynthesisComponent,
38 | )
39 | from .models import QueryValidationResponse, WordSuggestionResponse
   |                     ^^^^^^^^^^^^^^^^^^^^^^^ TC001
40 |
41 | logger = get_logger(__name__)
   |
   = help: Move into type-checking block

src/floridify/ai/synthesis_functions.py:39:46: TC001 Move application import `.models.WordSuggestionResponse` into a type-checking block
   |
37 |     SynthesisComponent,
38 | )
39 | from .models import QueryValidationResponse, WordSuggestionResponse
   |                                              ^^^^^^^^^^^^^^^^^^^^^^ TC001
40 |
41 | logger = get_logger(__name__)
   |
   = help: Move into type-checking block

src/floridify/ai/synthesis_functions.py:62:5: RET505 [*] Unnecessary `else` after `return` statement
   |
60 |             existing_pronunciation, word, ai, state_tracker
61 |         )
62 |     else:
   |     ^^^^ RET505
63 |         return await _create_pronunciation(word, ai, state_tracker)
   |
   = help: Remove unnecessary `else`

src/floridify/ai/synthesis_functions.py:76:9: PLR5501 [*] Use `elif` instead of `else` then `if`, to reduce indentation
   |
74 |                   if pronunciation:
75 |                       return pronunciation
76 | /         else:
77 | |             if provider.get("pronunciation"):
   | |____________^ PLR5501
78 |                   return cast(Pronunciation, provider["pronunciation"])
79 |       return None
   |
   = help: Convert to `elif`

src/floridify/ai/synthesis_functions.py:78:29: TC006 [*] Add quotes to type expression in `typing.cast()`
   |
76 |         else:
77 |             if provider.get("pronunciation"):
78 |                 return cast(Pronunciation, provider["pronunciation"])
   |                             ^^^^^^^^^^^^^ TC006
79 |     return None
   |
   = help: Add quotes

src/floridify/ai/synthesis_functions.py:105:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
104 |         except Exception as e:
105 |             logger.error(f"Failed to enhance pronunciation for {word}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
106 |
107 |     # Generate audio if missing
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:105:26: G004 Logging statement uses f-string
    |
104 |         except Exception as e:
105 |             logger.error(f"Failed to enhance pronunciation for {word}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
106 |
107 |     # Generate audio if missing
    |

src/floridify/ai/synthesis_functions.py:143:9: TRY300 Consider moving this statement to an `else` block
    |
141 |         await _generate_audio_files(pronunciation, word)
142 |
143 |         return pronunciation
    |         ^^^^^^^^^^^^^^^^^^^^ TRY300
144 |
145 |     except Exception as e:
    |

src/floridify/ai/synthesis_functions.py:146:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
145 |     except Exception as e:
146 |         logger.error(f"Failed to create pronunciation for {word}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
147 |         return None
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:146:22: G004 Logging statement uses f-string
    |
145 |     except Exception as e:
146 |         logger.error(f"Failed to create pronunciation for {word}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
147 |         return None
    |

src/floridify/ai/synthesis_functions.py:161:25: G004 Logging statement uses f-string
    |
159 |             pronunciation.audio_file_ids = [str(audio.id) for audio in audio_files]
160 |             await pronunciation.save()
161 |             logger.info(f"Generated {len(audio_files)} audio files for {word}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
162 |
163 |     except Exception as audio_error:
    |

src/floridify/ai/synthesis_functions.py:164:24: G004 Logging statement uses f-string
    |
163 |     except Exception as audio_error:
164 |         logger.warning(f"Failed to generate audio for {word}: {audio_error}")
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/ai/synthesis_functions.py:188:9: PLR5501 [*] Use `elif` instead of `else` then `if`, to reduce indentation
    |
186 |                       }
187 |                   )
188 | /         else:
189 | |             # Dict format
190 | |             if provider.get("etymology"):
    | |____________^ PLR5501
191 |                   etymology_data.append(
192 |                       {
    |
    = help: Convert to `elif`

src/floridify/ai/synthesis_functions.py:215:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
213 |         )
214 |     except Exception as e:
215 |         logger.error(f"Failed to synthesize etymology for {word.text}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
216 |         return None
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:215:22: G004 Logging statement uses f-string
    |
213 |         )
214 |     except Exception as e:
215 |         logger.error(f"Failed to synthesize etymology for {word.text}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
216 |         return None
    |

src/floridify/ai/synthesis_functions.py:237:39: PGH003 Use specific rule codes when ignoring type issues
    |
235 |         return [
236 |             WordForm(
237 |                 form_type=form.type,  # type:ignore
    |                                       ^^^^^^^^^^^^^ PGH003
238 |                 text=form.text,
239 |             )
    |

src/floridify/ai/synthesis_functions.py:243:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
241 |         ]
242 |     except Exception as e:
243 |         logger.error(f"Failed to synthesize word forms for {word.text}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
244 |         return []
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:243:22: G004 Logging statement uses f-string
    |
241 |         ]
242 |     except Exception as e:
243 |         logger.error(f"Failed to synthesize word forms for {word.text}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
244 |         return []
    |

src/floridify/ai/synthesis_functions.py:247:11: PLR0913 Too many arguments in function definition (6 > 5)
    |
247 | async def synthesize_antonyms(
    |           ^^^^^^^^^^^^^^^^^^^ PLR0913
248 |     word: str,
249 |     definition: Definition,
    |

src/floridify/ai/synthesis_functions.py:292:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
291 |     except Exception as e:
292 |         logger.error(f"Failed to synthesize antonyms: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
293 |         return existing_antonyms
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:292:22: G004 Logging statement uses f-string
    |
291 |     except Exception as e:
292 |         logger.error(f"Failed to synthesize antonyms: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
293 |         return existing_antonyms
    |

src/floridify/ai/synthesis_functions.py:310:9: TRY300 Consider moving this statement to an `else` block
    |
308 |             )
309 |         response = await ai.assess_cefr_level(word, definition.text)
310 |         return response.level
    |         ^^^^^^^^^^^^^^^^^^^^^ TRY300
311 |     except Exception as e:
312 |         logger.error(f"Failed to assess CEFR level: {e}")
    |

src/floridify/ai/synthesis_functions.py:312:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
310 |         return response.level
311 |     except Exception as e:
312 |         logger.error(f"Failed to assess CEFR level: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
313 |         return None
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:312:22: G004 Logging statement uses f-string
    |
310 |         return response.level
311 |     except Exception as e:
312 |         logger.error(f"Failed to assess CEFR level: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
313 |         return None
    |

src/floridify/ai/synthesis_functions.py:331:9: TRY300 Consider moving this statement to an `else` block
    |
329 |             )
330 |         response = await ai.assess_frequency_band(word, definition.text)
331 |         return response.band
    |         ^^^^^^^^^^^^^^^^^^^^ TRY300
332 |     except Exception as e:
333 |         logger.error(f"Failed to assess frequency band: {e}")
    |

src/floridify/ai/synthesis_functions.py:333:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
331 |         return response.band
332 |     except Exception as e:
333 |         logger.error(f"Failed to assess frequency band: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
334 |         return None
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:333:22: G004 Logging statement uses f-string
    |
331 |         return response.band
332 |     except Exception as e:
333 |         logger.error(f"Failed to assess frequency band: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
334 |         return None
    |

src/floridify/ai/synthesis_functions.py:350:9: TRY300 Consider moving this statement to an `else` block
    |
348 |             )
349 |         response = await ai.classify_register(definition.text)
350 |         return response.language_register
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
351 |     except Exception as e:
352 |         logger.error(f"Failed to classify register: {e}")
    |

src/floridify/ai/synthesis_functions.py:352:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
350 |         return response.language_register
351 |     except Exception as e:
352 |         logger.error(f"Failed to classify register: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
353 |         return None
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:352:22: G004 Logging statement uses f-string
    |
350 |         return response.language_register
351 |     except Exception as e:
352 |         logger.error(f"Failed to classify register: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
353 |         return None
    |

src/floridify/ai/synthesis_functions.py:369:9: TRY300 Consider moving this statement to an `else` block
    |
367 |             )
368 |         response = await ai.assess_domain(definition.text)
369 |         return response.domain
    |         ^^^^^^^^^^^^^^^^^^^^^^ TRY300
370 |     except Exception as e:
371 |         logger.error(f"Failed to identify domain: {e}")
    |

src/floridify/ai/synthesis_functions.py:371:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
369 |         return response.domain
370 |     except Exception as e:
371 |         logger.error(f"Failed to identify domain: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
372 |         return None
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:371:22: G004 Logging statement uses f-string
    |
369 |         return response.domain
370 |     except Exception as e:
371 |         logger.error(f"Failed to identify domain: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
372 |         return None
    |

src/floridify/ai/synthesis_functions.py:396:34: B905 [*] `zip()` without an explicit `strict=` parameter
    |
394 |                 description=desc,
395 |             )
396 |             for pattern, desc in zip(response.patterns, response.descriptions)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
397 |         ]
398 |     except Exception as e:
    |
    = help: Add explicit value for parameter `strict=`

src/floridify/ai/synthesis_functions.py:399:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
397 |         ]
398 |     except Exception as e:
399 |         logger.error(f"Failed to extract grammar patterns: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
400 |         return []
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:399:22: G004 Logging statement uses f-string
    |
397 |         ]
398 |     except Exception as e:
399 |         logger.error(f"Failed to extract grammar patterns: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
400 |         return []
    |

src/floridify/ai/synthesis_functions.py:431:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
429 |         ]
430 |     except Exception as e:
431 |         logger.error(f"Failed to identify collocations: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
432 |         return []
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:431:22: G004 Logging statement uses f-string
    |
429 |         ]
430 |     except Exception as e:
431 |         logger.error(f"Failed to identify collocations: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
432 |         return []
    |

src/floridify/ai/synthesis_functions.py:451:34: PGH003 Use specific rule codes when ignoring type issues
    |
449 |         return [
450 |             UsageNote(
451 |                 type=note.type,  # type: ignore
    |                                  ^^^^^^^^^^^^^^ PGH003
452 |                 text=note.text,
453 |             )
    |

src/floridify/ai/synthesis_functions.py:457:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
455 |         ]
456 |     except Exception as e:
457 |         logger.error(f"Failed to generate usage notes: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
458 |         return []
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:457:22: G004 Logging statement uses f-string
    |
455 |         ]
456 |     except Exception as e:
457 |         logger.error(f"Failed to generate usage notes: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
458 |         return []
    |

src/floridify/ai/synthesis_functions.py:474:9: TRY300 Consider moving this statement to an `else` block
    |
472 |             )
473 |         response = await ai.assess_regional_variants(definition.text)
474 |         return response.regions
    |         ^^^^^^^^^^^^^^^^^^^^^^^ TRY300
475 |     except Exception as e:
476 |         logger.error(f"Failed to detect regional variants: {e}")
    |

src/floridify/ai/synthesis_functions.py:476:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
474 |         return response.regions
475 |     except Exception as e:
476 |         logger.error(f"Failed to detect regional variants: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
477 |         return []
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:476:22: G004 Logging statement uses f-string
    |
474 |         return response.regions
475 |     except Exception as e:
476 |         logger.error(f"Failed to detect regional variants: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
477 |         return []
    |

src/floridify/ai/synthesis_functions.py:538:9: TRY300 Consider moving this statement to an `else` block
    |
536 |             facts.append(fact)
537 |
538 |         return facts
    |         ^^^^^^^^^^^^ TRY300
539 |     except Exception as e:
540 |         logger.error(f"Failed to synthesize facts for {word.text}: {e}")
    |

src/floridify/ai/synthesis_functions.py:540:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
538 |         return facts
539 |     except Exception as e:
540 |         logger.error(f"Failed to synthesize facts for {word.text}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
541 |         return []
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:540:22: G004 Logging statement uses f-string
    |
538 |         return facts
539 |     except Exception as e:
540 |         logger.error(f"Failed to synthesize facts for {word.text}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
541 |         return []
    |

src/floridify/ai/synthesis_functions.py:544:11: PLR0913 Too many arguments in function definition (6 > 5)
    |
544 | async def synthesize_synonyms(
    |           ^^^^^^^^^^^^^^^^^^^ PLR0913
545 |     word: str,
546 |     definition: Definition,
    |

src/floridify/ai/synthesis_functions.py:586:21: G004 Logging statement uses f-string
    |
584 |                 all_synonyms.append(candidate.word)
585 |         
586 |         logger.info(f"Synthesized {len(all_synonyms)} total synonyms for '{word}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
587 |         return all_synonyms[:count]
    |

src/floridify/ai/synthesis_functions.py:590:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
589 |     except Exception as e:
590 |         logger.error(f"Failed to synthesize synonyms: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
591 |         if state_tracker:
592 |             await state_tracker.update_error(f"Synonym synthesis failed: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:590:22: G004 Logging statement uses f-string
    |
589 |     except Exception as e:
590 |         logger.error(f"Failed to synthesize synonyms: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
591 |         if state_tracker:
592 |             await state_tracker.update_error(f"Synonym synthesis failed: {str(e)}")
    |

src/floridify/ai/synthesis_functions.py:592:75: RUF010 [*] Use explicit conversion flag
    |
590 |         logger.error(f"Failed to synthesize synonyms: {e}")
591 |         if state_tracker:
592 |             await state_tracker.update_error(f"Synonym synthesis failed: {str(e)}")
    |                                                                           ^^^^^^ RUF010
593 |         return existing_synonyms
    |
    = help: Replace with conversion flag

src/floridify/ai/synthesis_functions.py:621:21: G004 Logging statement uses f-string
    |
620 |         examples = response.example_sentences
621 |         logger.info(f"Generated {len(examples)} examples for '{word}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
622 |         return examples
    |

src/floridify/ai/synthesis_functions.py:622:9: TRY300 Consider moving this statement to an `else` block
    |
620 |         examples = response.example_sentences
621 |         logger.info(f"Generated {len(examples)} examples for '{word}'")
622 |         return examples
    |         ^^^^^^^^^^^^^^^ TRY300
623 |
624 |     except Exception as e:
    |

src/floridify/ai/synthesis_functions.py:625:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
624 |     except Exception as e:
625 |         logger.error(f"Failed to generate examples: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
626 |         if state_tracker:
627 |             await state_tracker.update_error(f"Example generation failed: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:625:22: G004 Logging statement uses f-string
    |
624 |     except Exception as e:
625 |         logger.error(f"Failed to generate examples: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
626 |         if state_tracker:
627 |             await state_tracker.update_error(f"Example generation failed: {str(e)}")
    |

src/floridify/ai/synthesis_functions.py:627:76: RUF010 [*] Use explicit conversion flag
    |
625 |         logger.error(f"Failed to generate examples: {e}")
626 |         if state_tracker:
627 |             await state_tracker.update_error(f"Example generation failed: {str(e)}")
    |                                                                            ^^^^^^ RUF010
628 |         return []
    |
    = help: Replace with conversion flag

src/floridify/ai/synthesis_functions.py:673:9: RET505 [*] Unnecessary `else` after `return` statement
    |
671 |                 ],
672 |             }
673 |         else:
    |         ^^^^ RET505
674 |             return {
675 |                 "definition_text": "",
    |
    = help: Remove unnecessary `else`

src/floridify/ai/synthesis_functions.py:681:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
680 |     except Exception as e:
681 |         logger.error(f"Failed to synthesize definition: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
682 |         if state_tracker:
683 |             await state_tracker.update_error(f"Definition synthesis failed: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:681:22: G004 Logging statement uses f-string
    |
680 |     except Exception as e:
681 |         logger.error(f"Failed to synthesize definition: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
682 |         if state_tracker:
683 |             await state_tracker.update_error(f"Definition synthesis failed: {str(e)}")
    |

src/floridify/ai/synthesis_functions.py:683:78: RUF010 [*] Use explicit conversion flag
    |
681 |         logger.error(f"Failed to synthesize definition: {e}")
682 |         if state_tracker:
683 |             await state_tracker.update_error(f"Definition synthesis failed: {str(e)}")
    |                                                                              ^^^^^^ RUF010
684 |         return {
685 |             "definition_text": "",
    |
    = help: Replace with conversion flag

src/floridify/ai/synthesis_functions.py:744:61: Q000 [*] Single quotes found but double quotes preferred
    |
742 | …     for cluster_mapping in cluster_response.cluster_mappings:
743 | …         # Extract short name from cluster_id (e.g., "bank_finance" -> "finance")
744 | …         cluster_name = cluster_mapping.cluster_id.split('_')[-1].title() if '_' in cluster_mapping.cluster_id else cluster_mapping.…
    |                                                           ^^^ Q000
745 | …         
746 | …         cluster = MeaningCluster(
    |
    = help: Replace single quotes with double quotes

src/floridify/ai/synthesis_functions.py:744:81: Q000 [*] Single quotes found but double quotes preferred
    |
742 | …     for cluster_mapping in cluster_response.cluster_mappings:
743 | …         # Extract short name from cluster_id (e.g., "bank_finance" -> "finance")
744 | …         cluster_name = cluster_mapping.cluster_id.split('_')[-1].title() if '_' in cluster_mapping.cluster_id else cluster_mapping.…
    |                                                                               ^^^ Q000
745 | …         
746 | …         cluster = MeaningCluster(
    |
    = help: Replace single quotes with double quotes

src/floridify/ai/synthesis_functions.py:761:13: G004 Logging statement uses f-string
    |
759 |           clustered_count = sum(1 for d in definitions if d.meaning_cluster)
760 |           logger.info(
761 | /             f"Clustered {clustered_count}/{len(definitions)} definitions "
762 | |             f"into {len(cluster_response.cluster_mappings)} clusters"
    | |_____________________________________________________________________^ G004
763 |           )
    |

src/floridify/ai/synthesis_functions.py:771:9: TRY300 Consider moving this statement to an `else` block
    |
769 |             )
770 |
771 |         return definitions
    |         ^^^^^^^^^^^^^^^^^^ TRY300
772 |
773 |     except Exception as e:
    |

src/floridify/ai/synthesis_functions.py:774:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
773 |     except Exception as e:
774 |         logger.error(f"Failed to cluster definitions for '{word.text}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
775 |         if state_tracker:
776 |             await state_tracker.update_error(f"Definition clustering failed: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/ai/synthesis_functions.py:774:22: G004 Logging statement uses f-string
    |
773 |     except Exception as e:
774 |         logger.error(f"Failed to cluster definitions for '{word.text}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
775 |         if state_tracker:
776 |             await state_tracker.update_error(f"Definition clustering failed: {str(e)}")
    |

src/floridify/ai/synthesis_functions.py:776:79: RUF010 [*] Use explicit conversion flag
    |
774 |         logger.error(f"Failed to cluster definitions for '{word.text}': {e}")
775 |         if state_tracker:
776 |             await state_tracker.update_error(f"Definition clustering failed: {str(e)}")
    |                                                                               ^^^^^^ RUF010
777 |         # Return definitions unchanged on error
778 |         return definitions
    |
    = help: Replace with conversion flag

src/floridify/ai/synthesis_functions.py:806:11: PLR0913 Too many arguments in function definition (7 > 5)
    |
806 | async def enhance_definitions_parallel(
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
807 |     definitions: list[Definition],
808 |     word: Word,
    |

src/floridify/ai/synthesis_functions.py:806:11: PLR0912 Too many branches (36 > 12)
    |
806 | async def enhance_definitions_parallel(
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
807 |     definitions: list[Definition],
808 |     word: Word,
    |

src/floridify/ai/synthesis_functions.py:806:11: PLR0915 Too many statements (92 > 50)
    |
806 | async def enhance_definitions_parallel(
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
807 |     definitions: list[Definition],
808 |     word: Word,
    |

src/floridify/ai/synthesis_functions.py:952:26: G004 Logging statement uses f-string
    |
951 |         if isinstance(result, Exception):
952 |             logger.error(f"Failed to enhance {component} for definition: {result}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
953 |             failures += 1
954 |             continue
    |

src/floridify/ai/synthesis_functions.py:961:40: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
959 |         # Update the definition based on component type
960 |         if component == SynthesisComponent.SYNONYMS and isinstance(result, list):
961 |             definition.synonyms = cast(list[str], result)
    |                                        ^^^^^^^^^ TC006
962 |         elif component == SynthesisComponent.EXAMPLES and isinstance(result, list):
963 |             # Create Example objects and save them
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:965:38: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
963 |             # Create Example objects and save them
964 |             example_ids = []
965 |             for example_text in cast(list[str], result):
    |                                      ^^^^^^^^^ TC006
966 |                 example = Example(
967 |                     definition_id=str(definition.id),
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:975:40: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
973 |             definition.example_ids.extend(example_ids)
974 |         elif component == SynthesisComponent.ANTONYMS and isinstance(result, list):
975 |             definition.antonyms = cast(list[str], result)
    |                                        ^^^^^^^^^ TC006
976 |         elif component == SynthesisComponent.WORD_FORMS and isinstance(result, list):
977 |             definition.word_forms = cast(list[WordForm], result)
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:977:42: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
975 |             definition.antonyms = cast(list[str], result)
976 |         elif component == SynthesisComponent.WORD_FORMS and isinstance(result, list):
977 |             definition.word_forms = cast(list[WordForm], result)
    |                                          ^^^^^^^^^^^^^^ TC006
978 |         elif component == SynthesisComponent.CEFR_LEVEL and isinstance(result, str):
979 |             definition.cefr_level = result  # type: ignore
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:979:45: PGH003 Use specific rule codes when ignoring type issues
    |
977 |             definition.word_forms = cast(list[WordForm], result)
978 |         elif component == SynthesisComponent.CEFR_LEVEL and isinstance(result, str):
979 |             definition.cefr_level = result  # type: ignore
    |                                             ^^^^^^^^^^^^^^ PGH003
980 |         elif component == SynthesisComponent.FREQUENCY_BAND and isinstance(result, int):
981 |             definition.frequency_band = result
    |

src/floridify/ai/synthesis_functions.py:983:52: PGH003 Use specific rule codes when ignoring type issues
    |
981 |             definition.frequency_band = result
982 |         elif component == SynthesisComponent.REGISTER and isinstance(result, str):
983 |             definition.language_register = result  # type: ignore
    |                                                    ^^^^^^^^^^^^^^ PGH003
984 |         elif component == SynthesisComponent.DOMAIN and isinstance(result, str):
985 |             definition.domain = result
    |

src/floridify/ai/synthesis_functions.py:987:48: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
985 |             definition.domain = result
986 |         elif component == SynthesisComponent.GRAMMAR_PATTERNS and isinstance(result, list):
987 |             definition.grammar_patterns = cast(list[GrammarPattern], result)
    |                                                ^^^^^^^^^^^^^^^^^^^^ TC006
988 |         elif component == SynthesisComponent.COLLOCATIONS and isinstance(result, list):
989 |             definition.collocations = cast(list[Collocation], result)
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:989:44: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
987 |             definition.grammar_patterns = cast(list[GrammarPattern], result)
988 |         elif component == SynthesisComponent.COLLOCATIONS and isinstance(result, list):
989 |             definition.collocations = cast(list[Collocation], result)
    |                                            ^^^^^^^^^^^^^^^^^ TC006
990 |         elif component == SynthesisComponent.USAGE_NOTES and isinstance(result, list):
991 |             definition.usage_notes = cast(list[UsageNote], result)
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:991:43: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
989 |             definition.collocations = cast(list[Collocation], result)
990 |         elif component == SynthesisComponent.USAGE_NOTES and isinstance(result, list):
991 |             definition.usage_notes = cast(list[UsageNote], result)
    |                                           ^^^^^^^^^^^^^^^ TC006
992 |         elif component == SynthesisComponent.REGIONAL_VARIANTS:
993 |             # Regional variants returns a list, take the first
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:995:42: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
993 |             # Regional variants returns a list, take the first
994 |             if isinstance(result, list) and result:
995 |                 definition.region = cast(str, result[0])
    |                                          ^^^ TC006
996 |             elif isinstance(result, str):
997 |                 definition.region = result
    |
    = help: Add quotes

src/floridify/ai/synthesis_functions.py:1005:9: G004 Logging statement uses f-string
     |
1004 |     logger.info(
1005 |         f"Enhanced {len(definitions)} definitions: {successes} successes, {failures} failures"
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1006 |     )
     |

src/floridify/ai/synthesis_functions.py:1016:11: PLR0912 Too many branches (18 > 12)
     |
1016 | async def enhance_synthesized_entry(
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
1017 |     entry_id: str,
1018 |     ai: OpenAIConnector,
     |

src/floridify/ai/synthesis_functions.py:1038:15: TRY003 Avoid specifying long messages outside the exception class
     |
1036 |     entry = await SynthesizedDictionaryEntry.get(entry_id)
1037 |     if not entry:
1038 |         raise ValueError(f"Entry {entry_id} not found")
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1039 |
1040 |     # Load word
     |

src/floridify/ai/synthesis_functions.py:1038:26: EM102 Exception must not use an f-string literal, assign to variable first
     |
1036 |     entry = await SynthesizedDictionaryEntry.get(entry_id)
1037 |     if not entry:
1038 |         raise ValueError(f"Entry {entry_id} not found")
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
1039 |
1040 |     # Load word
     |
     = help: Assign to variable; remove f-string literal

src/floridify/ai/synthesis_functions.py:1043:15: TRY003 Avoid specifying long messages outside the exception class
     |
1041 |     word = await Word.get(entry.word_id)
1042 |     if not word:
1043 |         raise ValueError(f"Word {entry.word_id} not found")
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1044 |
1045 |     # Default to all components
     |

src/floridify/ai/synthesis_functions.py:1043:26: EM102 Exception must not use an f-string literal, assign to variable first
     |
1041 |     word = await Word.get(entry.word_id)
1042 |     if not word:
1043 |         raise ValueError(f"Word {entry.word_id} not found")
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
1044 |
1045 |     # Default to all components
     |
     = help: Assign to variable; remove f-string literal

src/floridify/ai/synthesis_functions.py:1106:34: B905 [*] `zip()` without an explicit `strict=` parameter
     |
1105 |         # Process results based on task type
1106 |         for task_type, result in zip(task_types, results):
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ B905
1107 |             if isinstance(result, Exception):
1108 |                 logger.error(f"Failed to enhance {task_type}: {result}")
     |
     = help: Add explicit value for parameter `strict=`

src/floridify/ai/synthesis_functions.py:1108:30: G004 Logging statement uses f-string
     |
1106 |         for task_type, result in zip(task_types, results):
1107 |             if isinstance(result, Exception):
1108 |                 logger.error(f"Failed to enhance {task_type}: {result}")
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1109 |                 continue
     |

src/floridify/ai/synthesis_functions.py:1116:41: TC006 [*] Add quotes to type expression in `typing.cast()`
     |
1114 |                 entry.etymology = result
1115 |             elif task_type == SynthesisComponent.WORD_FORMS and isinstance(result, list):
1116 |                 entry.word_forms = cast(list[WordForm], result)
     |                                         ^^^^^^^^^^^^^^ TC006
1117 |             elif task_type == SynthesisComponent.FACTS and isinstance(result, list):
1118 |                 entry.fact_ids = [str(fact.id) for fact in cast(list[Fact], result)]
     |
     = help: Add quotes

src/floridify/ai/synthesis_functions.py:1118:65: TC006 [*] Add quotes to type expression in `typing.cast()`
     |
1116 |                 entry.word_forms = cast(list[WordForm], result)
1117 |             elif task_type == SynthesisComponent.FACTS and isinstance(result, list):
1118 |                 entry.fact_ids = [str(fact.id) for fact in cast(list[Fact], result)]
     |                                                                 ^^^^^^^^^^ TC006
1119 |
1120 |         # Save updated entry
     |
     = help: Add quotes

src/floridify/ai/synthesis_functions.py:1127:13: G004 Logging statement uses f-string
     |
1125 |         failures = sum(1 for r in results if isinstance(r, Exception))
1126 |         logger.info(
1127 |             f"Enhanced entry {entry_id}: {successes} word-level successes, {failures} failures"
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1128 |         )
     |

src/floridify/ai/synthesizer.py:5:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
3 | from __future__ import annotations
4 |
5 | from ..constants import DictionaryProvider, Language
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
6 | from ..core.state_tracker import Stages, StateTracker
7 | from ..models import (
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:5:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
3 | from __future__ import annotations
4 |
5 | from ..constants import DictionaryProvider, Language
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
6 | from ..core.state_tracker import Stages, StateTracker
7 | from ..models import (
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:6:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from ..constants import DictionaryProvider, Language
6 | from ..core.state_tracker import Stages, StateTracker
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
7 | from ..models import (
8 |     Definition,
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:6:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from ..constants import DictionaryProvider, Language
6 | from ..core.state_tracker import Stages, StateTracker
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
7 | from ..models import (
8 |     Definition,
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 5 |   from ..constants import DictionaryProvider, Language
 6 |   from ..core.state_tracker import Stages, StateTracker
 7 | / from ..models import (
 8 | |     Definition,
 9 | |     ModelInfo,
10 | |     ProviderData,
11 | |     SynthesizedDictionaryEntry,
12 | |     Word,
13 | | )
   | |_^ TID252
14 |   from ..storage.mongodb import get_storage
15 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 5 |   from ..constants import DictionaryProvider, Language
 6 |   from ..core.state_tracker import Stages, StateTracker
 7 | / from ..models import (
 8 | |     Definition,
 9 | |     ModelInfo,
10 | |     ProviderData,
11 | |     SynthesizedDictionaryEntry,
12 | |     Word,
13 | | )
   | |_^ TID252
14 |   from ..storage.mongodb import get_storage
15 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 5 |   from ..constants import DictionaryProvider, Language
 6 |   from ..core.state_tracker import Stages, StateTracker
 7 | / from ..models import (
 8 | |     Definition,
 9 | |     ModelInfo,
10 | |     ProviderData,
11 | |     SynthesizedDictionaryEntry,
12 | |     Word,
13 | | )
   | |_^ TID252
14 |   from ..storage.mongodb import get_storage
15 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 5 |   from ..constants import DictionaryProvider, Language
 6 |   from ..core.state_tracker import Stages, StateTracker
 7 | / from ..models import (
 8 | |     Definition,
 9 | |     ModelInfo,
10 | |     ProviderData,
11 | |     SynthesizedDictionaryEntry,
12 | |     Word,
13 | | )
   | |_^ TID252
14 |   from ..storage.mongodb import get_storage
15 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 5 |   from ..constants import DictionaryProvider, Language
 6 |   from ..core.state_tracker import Stages, StateTracker
 7 | / from ..models import (
 8 | |     Definition,
 9 | |     ModelInfo,
10 | |     ProviderData,
11 | |     SynthesizedDictionaryEntry,
12 | |     Word,
13 | | )
   | |_^ TID252
14 |   from ..storage.mongodb import get_storage
15 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |     Word,
13 | )
14 | from ..storage.mongodb import get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..utils.logging import get_logger
16 | from .batch_processor import batch_synthesis
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | )
14 | from ..storage.mongodb import get_storage
15 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from .batch_processor import batch_synthesis
17 | from .connector import OpenAIConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/synthesizer.py:17:24: TC001 Move application import `.connector.OpenAIConnector` into a type-checking block
   |
15 | from ..utils.logging import get_logger
16 | from .batch_processor import batch_synthesis
17 | from .connector import OpenAIConnector
   |                        ^^^^^^^^^^^^^^^ TC001
18 | from .synthesis_functions import (
19 |     cluster_definitions,
   |
   = help: Move into type-checking block

src/floridify/ai/synthesizer.py:44:15: PLR0912 Too many branches (13 > 12)
   |
42 |         self.facts_count = facts_count
43 |
44 |     async def synthesize_entry(
   |               ^^^^^^^^^^^^^^^^ PLR0912
45 |         self,
46 |         word: str,
   |

src/floridify/ai/synthesizer.py:67:29: G004 Logging statement uses f-string
   |
65 |             )
66 |             if existing:
67 |                 logger.info(f"Using existing synthesized entry for '{word}'")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
68 |                 return existing
   |

src/floridify/ai/synthesizer.py:81:28: G004 Logging statement uses f-string
   |
80 |         if not all_definitions:
81 |             logger.warning(f"No definitions found for '{word}'")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
82 |             return None
   |

src/floridify/ai/synthesizer.py:96:30: G004 Logging statement uses f-string
   |
94 |                 unique_definitions.append(definition)
95 |             else:
96 |                 logger.debug(f"Skipping duplicate definition: {definition.text[:50]}...")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
97 |
98 |         logger.info(
   |

src/floridify/ai/synthesizer.py:99:13: G004 Logging statement uses f-string
    |
 98 |         logger.info(
 99 |             f"Deduplicated {len(all_definitions)} definitions to {len(unique_definitions)} unique definitions for '{word}'"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
100 |         )
    |

src/floridify/ai/synthesizer.py:167:15: PLR0912 Too many branches (13 > 12)
    |
165 |         return entry
166 |     
167 |     async def synthesize_entry_batch(
    |               ^^^^^^^^^^^^^^^^^^^^^^ PLR0912
168 |         self,
169 |         word: str,
    |

src/floridify/ai/synthesizer.py:194:29: G004 Logging statement uses f-string
    |
192 |             )
193 |             if existing:
194 |                 logger.info(f"Using existing synthesized entry for '{word}'")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
195 |                 return existing
    |

src/floridify/ai/synthesizer.py:208:28: G004 Logging statement uses f-string
    |
207 |         if not all_definitions:
208 |             logger.warning(f"No definitions found for '{word}'")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
209 |             return None
    |

src/floridify/ai/synthesizer.py:223:30: G004 Logging statement uses f-string
    |
221 |                 unique_definitions.append(definition)
222 |             else:
223 |                 logger.debug(f"Skipping duplicate definition: {definition.text[:50]}...")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
224 |
225 |         logger.info(
    |

src/floridify/ai/synthesizer.py:226:13: G004 Logging statement uses f-string
    |
225 |         logger.info(
226 |             f"Deduplicated {len(all_definitions)} definitions to {len(unique_definitions)} unique definitions for '{word}'"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
227 |         )
    |

src/floridify/ai/synthesizer.py:317:25: G004 Logging statement uses f-string
    |
316 |         async def synthesize_cluster(cluster_id: str, cluster_defs: list[Definition]) -> Definition:
317 |             logger.info(f"Synthesizing cluster '{cluster_id}' with {len(cluster_defs)} definitions")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
318 |
319 |             # Convert definitions to dict format
    |

src/floridify/ai/synthesizer.py:353:9: PLC0415 `import` should be at the top-level of a file
    |
352 |         # Execute all syntheses in parallel
353 |         import asyncio
    |         ^^^^^^^^^^^^^^ PLC0415
354 |
355 |         synthesized_definitions = await asyncio.gather(*synthesis_tasks)
    |

src/floridify/ai/synthesizer.py:357:16: RET504 Unnecessary assignment to `synthesized_definitions` before `return` statement
    |
355 |         synthesized_definitions = await asyncio.gather(*synthesis_tasks)
356 |
357 |         return synthesized_definitions
    |                ^^^^^^^^^^^^^^^^^^^^^^^ RET504
358 |
359 |     async def generate_fallback_entry(
    |
    = help: Remove unnecessary assignment

src/floridify/ai/synthesizer.py:368:21: G004 Logging statement uses f-string
    |
366 |         """Generate a complete fallback entry using AI."""
367 |
368 |         logger.info(f"Generating AI fallback for '{word}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
369 |
370 |         # Get or create Word
    |

src/floridify/ai/synthesizer.py:388:28: G004 Logging statement uses f-string
    |
387 |         if not dictionary_entry or not dictionary_entry.provider_data:
388 |             logger.warning(f"No definitions generated for '{word}'")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
389 |             return None
    |

src/floridify/ai/synthesizer.py:393:13: B007 Loop control variable `idx` not used within loop body
    |
391 |         # Convert to provider data format
392 |         definitions: list[Definition] = []
393 |         for idx, ai_def in enumerate(dictionary_entry.provider_data.definitions):
    |             ^^^ B007
394 |             # Create definition
395 |             definition = Definition(
    |
    = help: Rename unused `idx` to `_idx`

src/floridify/ai/synthesizer.py:442:9: PLC0415 `import` should be at the top-level of a file
    |
440 |             Updated synthesized dictionary entry or None if not found
441 |         """
442 |         from .constants import SynthesisComponent
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
443 |         
444 |         # Fetch existing entry
    |

src/floridify/ai/synthesizer.py:447:26: G004 Logging statement uses f-string
    |
445 |         entry = await SynthesizedDictionaryEntry.get(entry_id)
446 |         if not entry:
447 |             logger.error(f"Synthesized entry not found: {entry_id}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
448 |             return None
    |

src/floridify/ai/synthesizer.py:453:26: G004 Logging statement uses f-string
    |
451 |         word = await Word.get(entry.word_id)
452 |         if not word:
453 |             logger.error(f"Word not found for entry: {entry.word_id}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
454 |             return None
    |

src/floridify/ai/synthesizer.py:464:26: G004 Logging statement uses f-string
    |
463 |         if not definitions:
464 |             logger.error(f"No definitions found for entry: {entry_id}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
465 |             return None
    |

src/floridify/ai/synthesizer.py:471:21: G004 Logging statement uses f-string
    |
469 |             components = SynthesisComponent.default_components()
470 |         
471 |         logger.info(f"Regenerating components {components} for entry {entry_id}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
472 |         
473 |         if state_tracker:
    |

src/floridify/ai/synthesizer.py:496:21: G004 Logging statement uses f-string
    |
494 |             )
495 |         
496 |         logger.info(f"Successfully regenerated components for entry {entry_id}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
497 |         return entry
    |

src/floridify/ai/templates.py:12:5: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | if TYPE_CHECKING:
12 |     from ..models import Definition
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/ai/templates.py:57:61: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
55 |         )
56 |
57 |     def render_template(self, template_name: str, **kwargs: Any) -> str:
   |                                                             ^^^ ANN401
58 |         """Render a template with the given context."""
59 |         template = self.env.get_template(template_name)
   |

src/floridify/ai/templates.py:74:13: PLC0415 `import` should be at the top-level of a file
   |
72 |         # If using optimized template, prepare definitions with minimal data
73 |         if optimized:
74 |             from .definition_serializer import prepare_definitions_for_synthesis
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
75 |             definitions = prepare_definitions_for_synthesis(definitions)
   |

src/floridify/ai/templates.py:132:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
130 |         )
131 |
132 |     def get_synthesize_synonyms_prompt(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
133 |         self, word: str, definition: str, part_of_speech: str, existing_synonyms: list[str], count: int = 10, optimized: bool = True
134 |     ) -> str:
    |

src/floridify/anki/__init__.py:7:11: RUF022 [*] `__all__` is not sorted
  |
5 | from .templates import AnkiCardTemplate
6 |
7 | __all__ = ["AnkiCardTemplate", "CardType", "AnkiCardGenerator"]
  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF022
  |
  = help: Apply an isort-style sorting to `__all__`

src/floridify/anki/ankiconnect.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from typing import Any
10 |
11 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 |
13 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/ankiconnect.py:19:5: PIE790 [*] Unnecessary `pass` statement
   |
17 |     """Exception raised when AnkiConnect operations fail."""
18 |
19 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/anki/ankiconnect.py:43:29: G004 Logging statement uses f-string
   |
41 |             self._is_available = result is not None
42 |             if self._is_available:
43 |                 logger.info(f"🔌 AnkiConnect available (version: {result})")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
44 |             return self._is_available
45 |         except Exception as e:
   |

src/floridify/anki/ankiconnect.py:44:13: TRY300 Consider moving this statement to an `else` block
   |
42 |             if self._is_available:
43 |                 logger.info(f"🔌 AnkiConnect available (version: {result})")
44 |             return self._is_available
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
45 |         except Exception as e:
46 |             logger.debug(f"AnkiConnect not available: {e}")
   |

src/floridify/anki/ankiconnect.py:46:26: G004 Logging statement uses f-string
   |
44 |             return self._is_available
45 |         except Exception as e:
46 |             logger.debug(f"AnkiConnect not available: {e}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
47 |             self._is_available = False
48 |             return False
   |

src/floridify/anki/ankiconnect.py:50:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**params`
   |
48 |             return False
49 |
50 |     def invoke(self, action: str, **params: Any) -> Any:
   |                                             ^^^ ANN401
51 |         """Send command to AnkiConnect.
   |

src/floridify/anki/ankiconnect.py:50:53: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `invoke`
   |
48 |             return False
49 |
50 |     def invoke(self, action: str, **params: Any) -> Any:
   |                                                     ^^^ ANN401
51 |         """Send command to AnkiConnect.
   |

src/floridify/anki/ankiconnect.py:63:9: PLC0415 `import` should be at the top-level of a file
   |
61 |             AnkiConnectError: If the request fails or returns an error
62 |         """
63 |         import time
   |         ^^^^^^^^^^^ PLC0415
64 |
65 |         start_time = time.time()
   |

src/floridify/anki/ankiconnect.py:78:26: G004 Logging statement uses f-string
   |
77 |             elapsed = time.time() - start_time
78 |             logger.debug(f"🔌 AnkiConnect {action} completed in {elapsed:.3f}s")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
79 |
80 |             if response_data.get("error"):
   |

src/floridify/anki/ankiconnect.py:81:17: TRY301 Abstract `raise` to an inner function
   |
80 |             if response_data.get("error"):
81 |                 raise AnkiConnectError(f"AnkiConnect error: {response_data['error']}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
82 |
83 |             return response_data.get("result")
   |

src/floridify/anki/ankiconnect.py:81:23: TRY003 Avoid specifying long messages outside the exception class
   |
80 |             if response_data.get("error"):
81 |                 raise AnkiConnectError(f"AnkiConnect error: {response_data['error']}")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
82 |
83 |             return response_data.get("result")
   |

src/floridify/anki/ankiconnect.py:81:40: EM102 Exception must not use an f-string literal, assign to variable first
   |
80 |             if response_data.get("error"):
81 |                 raise AnkiConnectError(f"AnkiConnect error: {response_data['error']}")
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
82 |
83 |             return response_data.get("result")
   |
   = help: Assign to variable; remove f-string literal

src/floridify/anki/ankiconnect.py:86:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
85 |         except urllib.error.URLError as e:
86 |             raise AnkiConnectError(f"Failed to connect to AnkiConnect: {e}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
87 |         except json.JSONDecodeError as e:
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
   |

src/floridify/anki/ankiconnect.py:86:19: TRY003 Avoid specifying long messages outside the exception class
   |
85 |         except urllib.error.URLError as e:
86 |             raise AnkiConnectError(f"Failed to connect to AnkiConnect: {e}")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
87 |         except json.JSONDecodeError as e:
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
   |

src/floridify/anki/ankiconnect.py:86:36: EM102 Exception must not use an f-string literal, assign to variable first
   |
85 |         except urllib.error.URLError as e:
86 |             raise AnkiConnectError(f"Failed to connect to AnkiConnect: {e}")
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
87 |         except json.JSONDecodeError as e:
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
   |
   = help: Assign to variable; remove f-string literal

src/floridify/anki/ankiconnect.py:88:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
86 |             raise AnkiConnectError(f"Failed to connect to AnkiConnect: {e}")
87 |         except json.JSONDecodeError as e:
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
89 |         except Exception as e:
90 |             raise AnkiConnectError(f"AnkiConnect request failed: {e}")
   |

src/floridify/anki/ankiconnect.py:88:19: TRY003 Avoid specifying long messages outside the exception class
   |
86 |             raise AnkiConnectError(f"Failed to connect to AnkiConnect: {e}")
87 |         except json.JSONDecodeError as e:
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
89 |         except Exception as e:
90 |             raise AnkiConnectError(f"AnkiConnect request failed: {e}")
   |

src/floridify/anki/ankiconnect.py:88:36: EM102 Exception must not use an f-string literal, assign to variable first
   |
86 |             raise AnkiConnectError(f"Failed to connect to AnkiConnect: {e}")
87 |         except json.JSONDecodeError as e:
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
89 |         except Exception as e:
90 |             raise AnkiConnectError(f"AnkiConnect request failed: {e}")
   |
   = help: Assign to variable; remove f-string literal

src/floridify/anki/ankiconnect.py:90:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
89 |         except Exception as e:
90 |             raise AnkiConnectError(f"AnkiConnect request failed: {e}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
91 |
92 |     def get_deck_names(self) -> list[str]:
   |

src/floridify/anki/ankiconnect.py:90:19: TRY003 Avoid specifying long messages outside the exception class
   |
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
89 |         except Exception as e:
90 |             raise AnkiConnectError(f"AnkiConnect request failed: {e}")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
91 |
92 |     def get_deck_names(self) -> list[str]:
   |

src/floridify/anki/ankiconnect.py:90:36: EM102 Exception must not use an f-string literal, assign to variable first
   |
88 |             raise AnkiConnectError(f"Invalid JSON response from AnkiConnect: {e}")
89 |         except Exception as e:
90 |             raise AnkiConnectError(f"AnkiConnect request failed: {e}")
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
91 |
92 |     def get_deck_names(self) -> list[str]:
   |
   = help: Assign to variable; remove f-string literal

src/floridify/anki/ankiconnect.py:107:26: G004 Logging statement uses f-string
    |
105 |         try:
106 |             self.invoke("createDeck", deck=deck_name)
107 |             logger.debug(f"📁 Created deck: '{deck_name}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
108 |             return True
109 |         except AnkiConnectError:
    |

src/floridify/anki/ankiconnect.py:108:13: TRY300 Consider moving this statement to an `else` block
    |
106 |             self.invoke("createDeck", deck=deck_name)
107 |             logger.debug(f"📁 Created deck: '{deck_name}'")
108 |             return True
    |             ^^^^^^^^^^^ TRY300
109 |         except AnkiConnectError:
110 |             # Deck might already exist
    |

src/floridify/anki/ankiconnect.py:136:26: G004 Logging statement uses f-string
    |
134 |         try:
135 |             note_id = self.invoke("addNote", note=note_data)
136 |             logger.debug(f"📝 Added note {note_id} to deck '{deck_name}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
137 |             return note_id  # type: ignore[no-any-return]
138 |         except AnkiConnectError as e:
    |

src/floridify/anki/ankiconnect.py:137:13: TRY300 Consider moving this statement to an `else` block
    |
135 |             note_id = self.invoke("addNote", note=note_data)
136 |             logger.debug(f"📝 Added note {note_id} to deck '{deck_name}'")
137 |             return note_id  # type: ignore[no-any-return]
    |             ^^^^^^^^^^^^^^ TRY300
138 |         except AnkiConnectError as e:
139 |             # If duplicate, try to find and update existing note
    |

src/floridify/anki/ankiconnect.py:141:30: G004 Logging statement uses f-string
    |
139 |             # If duplicate, try to find and update existing note
140 |             if "duplicate" in str(e).lower():
141 |                 logger.debug(f"🔄 Attempting to update duplicate note in '{deck_name}'")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
142 |                 return self._handle_duplicate_note(deck_name, model_name, fields, tags)
143 |             else:
    |

src/floridify/anki/ankiconnect.py:143:13: RET505 [*] Unnecessary `else` after `return` statement
    |
141 |                 logger.debug(f"🔄 Attempting to update duplicate note in '{deck_name}'")
142 |                 return self._handle_duplicate_note(deck_name, model_name, fields, tags)
143 |             else:
    |             ^^^^ RET505
144 |                 logger.warning(f"Failed to add note to '{deck_name}': {e}")
145 |                 return None
    |
    = help: Remove unnecessary `else`

src/floridify/anki/ankiconnect.py:144:32: G004 Logging statement uses f-string
    |
142 |                 return self._handle_duplicate_note(deck_name, model_name, fields, tags)
143 |             else:
144 |                 logger.warning(f"Failed to add note to '{deck_name}': {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
145 |                 return None
    |

src/floridify/anki/ankiconnect.py:169:30: G004 Logging statement uses f-string
    |
167 |                     self.invoke("updateNoteTags", note=note_id, tags=" ".join(tags))
168 |
169 |                 logger.debug(f"🔄 Updated existing note {note_id} in deck '{deck_name}'")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
170 |                 return note_id  # type: ignore[no-any-return]
171 |             else:
    |

src/floridify/anki/ankiconnect.py:171:13: RET505 [*] Unnecessary `else` after `return` statement
    |
169 |                 logger.debug(f"🔄 Updated existing note {note_id} in deck '{deck_name}'")
170 |                 return note_id  # type: ignore[no-any-return]
171 |             else:
    |             ^^^^ RET505
172 |                 logger.warning(f"Could not find duplicate note to update in '{deck_name}'")
173 |                 return None
    |
    = help: Remove unnecessary `else`

src/floridify/anki/ankiconnect.py:172:32: G004 Logging statement uses f-string
    |
170 |                 return note_id  # type: ignore[no-any-return]
171 |             else:
172 |                 logger.warning(f"Could not find duplicate note to update in '{deck_name}'")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
173 |                 return None
    |

src/floridify/anki/ankiconnect.py:176:28: G004 Logging statement uses f-string
    |
175 |         except AnkiConnectError as e:
176 |             logger.warning(f"Failed to handle duplicate note in '{deck_name}': {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
177 |             return None
    |

src/floridify/anki/ankiconnect.py:190:26: G004 Logging statement uses f-string
    |
188 |         apkg_path = Path(apkg_path)
189 |         if not apkg_path.exists():
190 |             logger.error(f"📦 .apkg file not found: {apkg_path}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
191 |             return False
    |

src/floridify/anki/ankiconnect.py:201:25: G004 Logging statement uses f-string
    |
200 |             self.invoke("importPackage", path=deck_b64)
201 |             logger.info(f"📦 Imported package: {apkg_path.name}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
202 |             return True
    |

src/floridify/anki/ankiconnect.py:202:13: TRY300 Consider moving this statement to an `else` block
    |
200 |             self.invoke("importPackage", path=deck_b64)
201 |             logger.info(f"📦 Imported package: {apkg_path.name}")
202 |             return True
    |             ^^^^^^^^^^^ TRY300
203 |
204 |         except Exception as e:
    |

src/floridify/anki/ankiconnect.py:205:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
204 |         except Exception as e:
205 |             logger.error(f"Failed to import package {apkg_path}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
206 |             return False
    |
    = help: Replace with `exception`

src/floridify/anki/ankiconnect.py:205:26: G004 Logging statement uses f-string
    |
204 |         except Exception as e:
205 |             logger.error(f"Failed to import package {apkg_path}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
206 |             return False
    |

src/floridify/anki/ankiconnect.py:213:13: TRY300 Consider moving this statement to an `else` block
    |
211 |             self.invoke("sync")
212 |             logger.debug("🔄 Triggered Anki sync")
213 |             return True
    |             ^^^^^^^^^^^ TRY300
214 |         except AnkiConnectError as e:
215 |             logger.warning(f"Sync failed: {e}")
    |

src/floridify/anki/ankiconnect.py:215:28: G004 Logging statement uses f-string
    |
213 |             return True
214 |         except AnkiConnectError as e:
215 |             logger.warning(f"Sync failed: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^ G004
216 |             return False
    |

src/floridify/anki/ankiconnect.py:246:26: G004 Logging statement uses f-string
    |
244 |         try:
245 |             self.invoke("createModel", model=model_data)
246 |             logger.debug(f"🎨 Created model: '{model_name}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
247 |             return True
248 |         except AnkiConnectError as e:
    |

src/floridify/anki/ankiconnect.py:247:13: TRY300 Consider moving this statement to an `else` block
    |
245 |             self.invoke("createModel", model=model_data)
246 |             logger.debug(f"🎨 Created model: '{model_name}'")
247 |             return True
    |             ^^^^^^^^^^^ TRY300
248 |         except AnkiConnectError as e:
249 |             logger.warning(f"Failed to create model '{model_name}': {e}")
    |

src/floridify/anki/ankiconnect.py:249:28: G004 Logging statement uses f-string
    |
247 |             return True
248 |         except AnkiConnectError as e:
249 |             logger.warning(f"Failed to create model '{model_name}': {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
250 |             return False
    |

src/floridify/anki/ankiconnect.py:274:9: PLR0912 Too many branches (17 > 12)
    |
272 |         return self.ankiconnect.is_available()
273 |
274 |     def export_cards_directly(self, cards: list[Any], deck_name: str) -> bool:
    |         ^^^^^^^^^^^^^^^^^^^^^ PLR0912
275 |         """Export cards directly to running Anki instance.
    |

src/floridify/anki/ankiconnect.py:287:9: PLC0415 `import` should be at the top-level of a file
    |
285 |             return False
286 |
287 |         import time
    |         ^^^^^^^^^^^ PLC0415
288 |
289 |         start_time = time.time()
    |

src/floridify/anki/ankiconnect.py:291:21: G004 Logging statement uses f-string
    |
289 |         start_time = time.time()
290 |
291 |         logger.info(f"🚀 Starting direct export of {len(cards)} cards to Anki deck '{deck_name}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
292 |
293 |         try:
    |

src/floridify/anki/ankiconnect.py:298:29: G004 Logging statement uses f-string
    |
296 |             if deck_name not in existing_decks:
297 |                 self.ankiconnect.create_deck(deck_name)
298 |                 logger.info(f"📁 Created new deck: '{deck_name}'")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
299 |
300 |             # Create models for each card type if needed
    |

src/floridify/anki/ankiconnect.py:304:17: SIM102 Use a single `if` statement instead of nested `if` statements
    |
302 |               for card in cards:
303 |                   model_name = f"Floridify {card.card_type.value.title()}"
304 | /                 if model_name not in created_models:
305 | |                     if self._ensure_model_exists(card, model_name):
    | |___________________________________________________________________^ SIM102
306 |                           created_models.add(model_name)
    |
    = help: Combine `if` statements using `and`

src/floridify/anki/ankiconnect.py:336:42: G004 Logging statement uses f-string
    |
334 |                         successful_cards += 1
335 |                         if (i + 1) % 10 == 0:
336 |                             logger.debug(f"📝 Added {i + 1}/{len(cards)} cards to Anki")
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
337 |                     else:
338 |                         failed_cards += 1
    |

src/floridify/anki/ankiconnect.py:341:36: G004 Logging statement uses f-string
    |
340 |                 except Exception as e:
341 |                     logger.warning(f"Failed to add card {i + 1}: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
342 |                     failed_cards += 1
    |

src/floridify/anki/ankiconnect.py:355:13: RET505 [*] Unnecessary `else` after `return` statement
    |
353 |                 )
354 |                 return True
355 |             else:
    |             ^^^^ RET505
356 |                 logger.warning(
357 |                     f"⚠️ Added {successful_cards} cards, {failed_cards} failed in {total_time:.2f}s"
    |
    = help: Remove unnecessary `else`

src/floridify/anki/ankiconnect.py:357:21: G004 Logging statement uses f-string
    |
355 |             else:
356 |                 logger.warning(
357 |                     f"⚠️ Added {successful_cards} cards, {failed_cards} failed in {total_time:.2f}s"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
358 |                 )
359 |                 return successful_cards > 0
    |

src/floridify/anki/ankiconnect.py:362:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
361 |         except Exception as e:
362 |             logger.error(f"💥 Direct export failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
363 |             return False
    |
    = help: Replace with `exception`

src/floridify/anki/ankiconnect.py:362:26: G004 Logging statement uses f-string
    |
361 |         except Exception as e:
362 |             logger.error(f"💥 Direct export failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
363 |             return False
    |

src/floridify/anki/ankiconnect.py:365:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `card`
    |
363 |             return False
364 |
365 |     def _ensure_model_exists(self, card: Any, model_name: str) -> bool:
    |                                          ^^^ ANN401
366 |         """Ensure a model exists for the given card type."""
367 |         try:
    |

src/floridify/anki/ankiconnect.py:382:29: G004 Logging statement uses f-string
    |
381 |             if success:
382 |                 logger.info(f"🎨 Created Anki model: '{model_name}'")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
383 |
384 |             return success
    |

src/floridify/anki/ankiconnect.py:384:13: TRY300 Consider moving this statement to an `else` block
    |
382 |                 logger.info(f"🎨 Created Anki model: '{model_name}'")
383 |
384 |             return success
    |             ^^^^^^^^^^^^^^ TRY300
385 |
386 |         except Exception as e:
    |

src/floridify/anki/ankiconnect.py:387:28: G004 Logging statement uses f-string
    |
386 |         except Exception as e:
387 |             logger.warning(f"Failed to ensure model '{model_name}' exists: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
388 |             return False
    |

src/floridify/anki/constants.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from enum import Enum
10 |
11 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 |
13 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | import genanki  # type: ignore[import-untyped]
12 |
13 | from ..ai.connector import OpenAIConnector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:13:28: TC001 Move application import `..ai.connector.OpenAIConnector` into a type-checking block
   |
11 | import genanki  # type: ignore[import-untyped]
12 |
13 | from ..ai.connector import OpenAIConnector
   |                            ^^^^^^^^^^^^^^^ TC001
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
   |
   = help: Move into type-checking block

src/floridify/anki/generator.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..ai.connector import OpenAIConnector
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..models import Definition, SynthesizedDictionaryEntry
16 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..ai.connector import OpenAIConnector
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..utils.logging import get_logger
17 | from .ankiconnect import AnkiDirectIntegration
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..ai.connector import OpenAIConnector
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..utils.logging import get_logger
17 | from .ankiconnect import AnkiDirectIntegration
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:15:22: TC001 Move application import `..models.Definition` into a type-checking block
   |
13 | from ..ai.connector import OpenAIConnector
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
   |                      ^^^^^^^^^^ TC001
16 | from ..utils.logging import get_logger
17 | from .ankiconnect import AnkiDirectIntegration
   |
   = help: Move into type-checking block

src/floridify/anki/generator.py:15:34: TC001 Move application import `..models.SynthesizedDictionaryEntry` into a type-checking block
   |
13 | from ..ai.connector import OpenAIConnector
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ TC001
16 | from ..utils.logging import get_logger
17 | from .ankiconnect import AnkiDirectIntegration
   |
   = help: Move into type-checking block

src/floridify/anki/generator.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..ai.templates import PromptTemplateManager as PromptLoader
15 | from ..models import Definition, SynthesizedDictionaryEntry
16 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from .ankiconnect import AnkiDirectIntegration
18 | from .templates import AnkiCardTemplate, CardType
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:33:89: B023 Function definition does not bind loop variable `field_value`
   |
31 |             def replace_list_items(match: re.Match[str]) -> str:
32 |                 item_template = match.group(1)
33 |                 rendered_items = [item_template.replace("{{.}}", str(item)) for item in field_value]
   |                                                                                         ^^^^^^^^^^^ B023
34 |                 return "".join(rendered_items)
   |

src/floridify/anki/generator.py:77:35: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `field_value`
   |
77 | def _field_has_value(field_value: Any) -> bool:
   |                                   ^^^ ANN401
78 |     """Check if a field has a meaningful value for conditional rendering."""
79 |     if isinstance(field_value, list):
   |

src/floridify/anki/generator.py:92:12: RET504 Unnecessary assignment to `result` before `return` statement
   |
90 |     result = render_conditional_sections(result, fields)
91 |     result = render_simple_fields(result, fields)
92 |     return result
   |            ^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src/floridify/anki/generator.py:98:5: PLC0415 `import` should be at the top-level of a file
    |
 96 |     """Extract definitions from SynthesizedDictionaryEntry."""
 97 |     # Load definitions from IDs
 98 |     from ..models import Definition
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
 99 |
100 |     definitions = []
    |

src/floridify/anki/generator.py:98:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
 96 |     """Extract definitions from SynthesizedDictionaryEntry."""
 97 |     # Load definitions from IDs
 98 |     from ..models import Definition
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
 99 |
100 |     definitions = []
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:168:9: PLC0415 `import` should be at the top-level of a file
    |
166 |             return []
167 |
168 |         from ..models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
169 |
170 |         examples = (
    |

src/floridify/anki/generator.py:168:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
166 |             return []
167 |
168 |         from ..models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
169 |
170 |         examples = (
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/anki/generator.py:200:21: G004 Logging statement uses f-string
    |
198 |         start_time = time.time()
199 |
200 |         logger.info(f"🎴 Starting card generation for word: '{entry.word}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
201 |
202 |         # Use default card types if none specified
    |

src/floridify/anki/generator.py:209:28: G004 Logging statement uses f-string
    |
207 |         definitions = await extract_definitions(entry)
208 |         if not definitions:
209 |             logger.warning(f"📛 No definitions found for word: '{entry.word}'")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
210 |             return []
    |

src/floridify/anki/generator.py:212:22: G004 Logging statement uses f-string
    |
210 |             return []
211 |
212 |         logger.debug(f"📖 Found {len(definitions)} definitions for '{entry.word}'")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
213 |
214 |         # Generate cards for each type and definition combination
    |

src/floridify/anki/generator.py:224:13: G004 Logging statement uses f-string
    |
222 |         total_elapsed = time.time() - start_time
223 |         logger.info(
224 |             f"🏁 Generated {len(cards)} total cards for '{entry.word}' in {total_elapsed:.2f}s"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
225 |         )
226 |         return cards
    |

src/floridify/anki/generator.py:239:13: RET505 [*] Unnecessary `elif` after `return` statement
    |
237 |             if card_type == CardType.BEST_DESCRIBES:
238 |                 return await self._generate_best_describes_card(entry, definition, frequency)
239 |             elif card_type == CardType.FILL_IN_BLANK:
    |             ^^^^ RET505
240 |                 return await self._generate_fill_blank_card(entry, definition, frequency)
241 |             else:
    |
    = help: Remove unnecessary `elif`

src/floridify/anki/generator.py:242:32: G004 Logging statement uses f-string
    |
240 |                 return await self._generate_fill_blank_card(entry, definition, frequency)
241 |             else:
242 |                 logger.warning(f"⚠️ Unsupported card type: {card_type.value}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
243 |                 return None
244 |         except Exception as e:
    |

src/floridify/anki/generator.py:245:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
243 |                 return None
244 |         except Exception as e:
245 |             logger.error(f"💥 Error generating {card_type.value} card for {entry.word}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
246 |             return None
    |
    = help: Replace with `exception`

src/floridify/anki/generator.py:245:26: G004 Logging statement uses f-string
    |
243 |                 return None
244 |         except Exception as e:
245 |             logger.error(f"💥 Error generating {card_type.value} card for {entry.word}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
246 |             return None
    |

src/floridify/anki/generator.py:258:26: G004 Logging statement uses f-string
    |
256 |             start_time = time.time()
257 |
258 |             logger.debug(f"🧠 Generating best describes AI content for '{entry.word}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
259 |
260 |             # Prepare examples for the prompt
    |

src/floridify/anki/generator.py:264:30: G004 Logging statement uses f-string
    |
262 |             examples_text = " | ".join(examples_list) if examples_list else ""
263 |             if examples_list:
264 |                 logger.debug(f"📝 Using {len(examples_list)} examples for context")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
265 |
266 |             # Generate multiple choice content using structured output
    |

src/floridify/anki/generator.py:275:26: G004 Logging statement uses f-string
    |
273 |             )
274 |             ai_elapsed = time.time() - ai_start_time
275 |             logger.debug(f"🤖 OpenAI best describes generation took {ai_elapsed:.2f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
276 |
277 |             # Format examples - ensure exactly 3 examples by augmenting if needed
    |

src/floridify/anki/generator.py:281:37: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
280 |             # If we have fewer than 3 examples, augment with AI generation using new count parameter
281 |             if len(examples_list) < 3:
    |                                     ^ PLR2004
282 |                 needed_count = 3 - len(examples_list)
283 |                 try:
    |

src/floridify/anki/generator.py:294:25: G004 Logging statement uses f-string
    |
292 |                 except Exception as e:
293 |                     logger.warning(
294 |                         f"Failed to generate additional examples for '{entry.word}': {e}"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
295 |                     )
    |

src/floridify/anki/generator.py:318:39: RUF001 String contains ambiguous `×` (MULTIPLICATION SIGN). Did you mean `x` (LATIN SMALL LETTER X)?
    |
316 |                 "Synonyms": synonyms_text,
317 |                 "Frequency": frequency,
318 |                 "FrequencyDisplay": f"×{frequency}" if frequency > 1 else "",
    |                                       ^ RUF001
319 |             }
    |

src/floridify/anki/generator.py:328:17: G004 Logging statement uses f-string
    |
326 |             total_elapsed = time.time() - start_time
327 |             logger.debug(
328 |                 f"📋 Best describes card creation completed in {total_elapsed:.2f}s (template: {template_elapsed:.3f}s)"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
329 |             )
    |

src/floridify/anki/generator.py:334:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
333 |         except Exception as e:
334 |             logger.error(f"💥 Error generating best describes card for '{entry.word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
335 |             return None
    |
    = help: Replace with `exception`

src/floridify/anki/generator.py:334:26: G004 Logging statement uses f-string
    |
333 |         except Exception as e:
334 |             logger.error(f"💥 Error generating best describes card for '{entry.word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
335 |             return None
    |

src/floridify/anki/generator.py:347:26: G004 Logging statement uses f-string
    |
345 |             start_time = time.time()
346 |
347 |             logger.debug(f"📝 Generating fill-in-blank AI content for '{entry.word}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
348 |
349 |             # Prepare examples for the prompt
    |

src/floridify/anki/generator.py:353:30: G004 Logging statement uses f-string
    |
351 |             examples_text = " | ".join(examples_list) if examples_list else ""
352 |             if examples_list:
353 |                 logger.debug(f"📚 Using {len(examples_list)} examples for context")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
354 |
355 |             # Generate fill-in-the-blank content using structured output
    |

src/floridify/anki/generator.py:364:26: G004 Logging statement uses f-string
    |
362 |             )
363 |             ai_elapsed = time.time() - ai_start_time
364 |             logger.debug(f"🤖 OpenAI fill-in-blank generation took {ai_elapsed:.2f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
365 |
366 |             # Format examples - ensure exactly 3 examples by augmenting if needed
    |

src/floridify/anki/generator.py:370:37: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
369 |             # If we have fewer than 3 examples, augment with AI generation using new count parameter
370 |             if len(examples_list) < 3:
    |                                     ^ PLR2004
371 |                 needed_count = 3 - len(examples_list)
372 |                 try:
    |

src/floridify/anki/generator.py:383:25: G004 Logging statement uses f-string
    |
381 |                 except Exception as e:
382 |                     logger.warning(
383 |                         f"Failed to generate additional examples for '{entry.word}': {e}"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
384 |                     )
    |

src/floridify/anki/generator.py:409:39: RUF001 String contains ambiguous `×` (MULTIPLICATION SIGN). Did you mean `x` (LATIN SMALL LETTER X)?
    |
407 |                 "Synonyms": synonyms_text,
408 |                 "Frequency": frequency,
409 |                 "FrequencyDisplay": f"×{frequency}" if frequency > 1 else "",
    |                                       ^ RUF001
410 |             }
    |

src/floridify/anki/generator.py:419:17: G004 Logging statement uses f-string
    |
417 |             total_elapsed = time.time() - start_time
418 |             logger.debug(
419 |                 f"📋 Fill-in-blank card creation completed in {total_elapsed:.2f}s (template: {template_elapsed:.3f}s)"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
420 |             )
    |

src/floridify/anki/generator.py:425:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
424 |         except Exception as e:
425 |             logger.error(f"💥 Error generating fill-in-blank card for '{entry.word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
426 |             return None
    |
    = help: Replace with `exception`

src/floridify/anki/generator.py:425:26: G004 Logging statement uses f-string
    |
424 |         except Exception as e:
425 |             logger.error(f"💥 Error generating fill-in-blank card for '{entry.word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
426 |             return None
    |

src/floridify/anki/generator.py:444:25: G004 Logging statement uses f-string
    |
442 |             start_time = time.time()
443 |
444 |             logger.info(f"📦 Starting .apkg export: {len(cards)} cards to '{deck_name}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
445 |
446 |             output_path = Path(output_path)
    |

src/floridify/anki/generator.py:448:26: G004 Logging statement uses f-string
    |
446 |             output_path = Path(output_path)
447 |             output_path.parent.mkdir(parents=True, exist_ok=True)
448 |             logger.debug(f"💾 Output path: {output_path.with_suffix('.apkg')}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
449 |
450 |             # Create deck and models for different card types
    |

src/floridify/anki/generator.py:455:26: G004 Logging statement uses f-string
    |
453 |             deck = genanki.Deck(deck_id, deck_name)
454 |             deck_creation_elapsed = time.time() - deck_creation_start
455 |             logger.debug(f"🏗️ Created deck in {deck_creation_elapsed:.3f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
456 |
457 |             # Create models for each card type
    |

src/floridify/anki/generator.py:468:26: G004 Logging statement uses f-string
    |
467 |             model_creation_elapsed = time.time() - model_creation_start
468 |             logger.debug(f"🔧 Created {len(models)} models in {model_creation_elapsed:.3f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
469 |             logger.debug(f"📊 Card distribution: {card_type_counts}")
    |

src/floridify/anki/generator.py:469:26: G004 Logging statement uses f-string
    |
467 |             model_creation_elapsed = time.time() - model_creation_start
468 |             logger.debug(f"🔧 Created {len(models)} models in {model_creation_elapsed:.3f}s")
469 |             logger.debug(f"📊 Card distribution: {card_type_counts}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
470 |
471 |             # Add notes to deck
    |

src/floridify/anki/generator.py:477:34: G004 Logging statement uses f-string
    |
475 |                 deck.add_note(note)
476 |                 if (i + 1) % 10 == 0:
477 |                     logger.debug(f"📝 Added {i + 1}/{len(cards)} notes to deck")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
478 |
479 |             note_creation_elapsed = time.time() - note_creation_start
    |

src/floridify/anki/generator.py:480:26: G004 Logging statement uses f-string
    |
479 |             note_creation_elapsed = time.time() - note_creation_start
480 |             logger.debug(f"📋 Added {len(cards)} notes in {note_creation_elapsed:.3f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
481 |
482 |             # Create package and write to file
    |

src/floridify/anki/generator.py:487:26: G004 Logging statement uses f-string
    |
485 |             package.write_to_file(str(output_path.with_suffix(".apkg")))
486 |             package_elapsed = time.time() - package_start
487 |             logger.debug(f"📦 Created .apkg package in {package_elapsed:.3f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
488 |
489 |             # Also create HTML preview
    |

src/floridify/anki/generator.py:495:26: G004 Logging statement uses f-string
    |
493 |                 f.write(html_content)
494 |             html_elapsed = time.time() - html_start
495 |             logger.debug(f"🌐 Created HTML preview in {html_elapsed:.3f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
496 |
497 |             total_elapsed = time.time() - start_time
    |

src/floridify/anki/generator.py:501:25: G004 Logging statement uses f-string
    |
499 |                 f"✅ Exported {len(cards)} cards to {output_path.with_suffix('.apkg')} in {total_elapsed:.2f}s"
500 |             )
501 |             logger.info(f"📄 HTML preview available at {output_path.with_suffix('.html')}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
502 |             return output_path.with_suffix(".apkg")
    |

src/floridify/anki/generator.py:505:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
504 |         except Exception as e:
505 |             logger.error(f"💥 Error exporting cards to .apkg: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
506 |             return None
    |
    = help: Replace with `exception`

src/floridify/anki/generator.py:505:26: G004 Logging statement uses f-string
    |
504 |         except Exception as e:
505 |             logger.error(f"💥 Error exporting cards to .apkg: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
506 |             return None
    |

src/floridify/anki/generator.py:529:21: G004 Logging statement uses f-string
    |
527 |         start_time = time.time()
528 |
529 |         logger.info(f"🚀 Attempting direct export of {len(cards)} cards to Anki deck '{deck_name}'")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
530 |
531 |         # Try direct export first
    |

src/floridify/anki/generator.py:539:13: RET505 [*] Unnecessary `else` after `return` statement
    |
537 |                 logger.success(f"✅ Cards exported directly to Anki in {total_time:.2f}s")
538 |                 return True, None
539 |             else:
    |             ^^^^ RET505
540 |                 logger.warning("⚠️ Direct export failed, falling back to .apkg")
541 |         else:
    |
    = help: Remove unnecessary `else`

src/floridify/anki/generator.py:564:17: RET505 [*] Unnecessary `else` after `return` statement
    |
562 |                     logger.success(f"✅ .apkg imported directly to Anki in {total_time:.2f}s")
563 |                     return True, apkg_path
564 |                 else:
    |                 ^^^^ RET505
565 |                     logger.warning("⚠️ Direct .apkg import failed")
    |
    = help: Remove unnecessary `else`

src/floridify/anki/generator.py:568:25: G004 Logging statement uses f-string
    |
567 |             total_time = time.time() - start_time
568 |             logger.info(f"📦 Created .apkg file in {total_time:.2f}s: {apkg_path}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
569 |             return False, apkg_path
    |

src/floridify/anki/generator.py:672:17: SIM108 Use ternary operator `field_value = " | ".join(str(item) for item in field_value) if field_value else ""` instead of `if`-`else`-block
    |
670 |               # Handle list fields
671 |               if isinstance(field_value, list):
672 | /                 if field_value:  # Only join if list has items
673 | |                     field_value = " | ".join(str(item) for item in field_value)
674 | |                 else:
675 | |                     field_value = ""
    | |____________________________________^ SIM108
676 |
677 |               field_values.append(str(field_value))
    |
    = help: Replace `if`-`else`-block with `field_value = " | ".join(str(item) for item in field_value) if field_value else ""`

src/floridify/anki/templates.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from pydantic import BaseModel, Field
6 |
7 | from ..utils.logging import get_logger
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
8 | from .constants import CardType
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/core/__init__.py:32:11: RUF022 `__all__` is not sorted
   |
30 |   )
31 |
32 |   __all__ = [
   |  ___________^
33 | |     # Base
34 | |     "ErrorDetail",
35 | |     "ErrorResponse",
36 | |     "PaginationParams",
37 | |     "SortParams",
38 | |     "FieldSelection",
39 | |     "ListResponse",
40 | |     "ResourceResponse",
41 | |     "BatchRequest",
42 | |     "BatchResponse",
43 | |     "BaseRepository",
44 | |     "handle_api_errors",
45 | |     "get_etag",
46 | |     "check_etag",
47 | |     # Cache
48 | |     "APICacheConfig",
49 | |     "CacheInvalidator",
50 | |     "ResponseCache",
51 | |     "cached_endpoint",
52 | |     "generate_cache_key",
53 | |     "get_cache_headers",
54 | |     # Query
55 | |     "AggregationBuilder",
56 | |     "BulkOperationBuilder",
57 | |     "QueryOptimizer",
58 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/api/core/base.py:5:8: TC003 Move standard library import `builtins` into a type-checking block
  |
3 | from __future__ import annotations
4 |
5 | import builtins
  |        ^^^^^^^^ TC003
6 | from abc import ABC, abstractmethod
7 | from collections.abc import Callable
  |
  = help: Move into type-checking block

src/floridify/api/core/base.py:7:29: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
  |
5 | import builtins
6 | from abc import ABC, abstractmethod
7 | from collections.abc import Callable
  |                             ^^^^^^^^ TC003
8 | from datetime import datetime
9 | from typing import Any, Generic, TypeVar
  |
  = help: Move into type-checking block

src/floridify/api/core/base.py:75:9: RET505 [*] Unnecessary `elif` after `return` statement
   |
73 |         if self.include:
74 |             return {k: v for k, v in data.items() if k in self.include}
75 |         elif self.exclude:
   |         ^^^^ RET505
76 |             return {k: v for k, v in data.items() if k not in self.exclude}
77 |         return data
   |
   = help: Remove unnecessary `elif`

src/floridify/api/core/base.py:80:31: UP046 Generic class `ListResponse` uses `Generic` subclass instead of type parameters
   |
80 | class ListResponse(BaseModel, Generic[T]):
   |                               ^^^^^^^^^^ UP046
81 |     """Standard list response with pagination metadata."""
   |
   = help: Use type parameters

src/floridify/api/core/base.py:91:32: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**data`
   |
89 |     has_more: bool = Field(default=False)
90 |
91 |     def __init__(self, **data: Any) -> None:
   |                                ^^^ ANN401
92 |         data["has_more"] = data["offset"] + len(data["items"]) < data["total"]
93 |         super().__init__(**data)
   |

src/floridify/api/core/base.py:121:27: UP046 Generic class `BaseRepository` uses `Generic` subclass instead of type parameters
    |
121 | class BaseRepository(ABC, Generic[T, CreateSchema, UpdateSchema]):
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP046
122 |     """Base repository for CRUD operations."""
    |
    = help: Use type parameters

src/floridify/api/core/base.py:124:9: ANN204 Missing return type annotation for special method `__init__`
    |
122 |     """Base repository for CRUD operations."""
123 |
124 |     def __init__(self, model: type[T]):
    |         ^^^^^^^^ ANN204
125 |         self.model = model
    |
    = help: Add return type annotation: `None`

src/floridify/api/core/base.py:151:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
150 |           # Check version for optimistic locking
151 | /         if version is not None and hasattr(doc, "version"):
152 | |             if doc.version != version:
    | |______________________________________^ SIM102
153 |                   raise HTTPException(409, "Version conflict")
    |
    = help: Combine `if` statements using `and`

src/floridify/api/core/base.py:242:9: PIE790 [*] Unnecessary `pass` statement
    |
240 |     async def _cascade_delete(self, doc: T) -> None:
241 |         """Handle cascade deletion of related documents."""
242 |         pass
    |         ^^^^ PIE790
    |
    = help: Remove unnecessary `pass`

src/floridify/api/core/base.py:248:30: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
246 |     """Decorator for consistent error handling."""
247 |
248 |     async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                              ^^^ ANN401
249 |         try:
250 |             return await func(*args, **kwargs)
    |

src/floridify/api/core/base.py:248:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
246 |     """Decorator for consistent error handling."""
247 |
248 |     async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                             ^^^ ANN401
249 |         try:
250 |             return await func(*args, **kwargs)
    |

src/floridify/api/core/base.py:248:53: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
    |
246 |     """Decorator for consistent error handling."""
247 |
248 |     async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                     ^^^ ANN401
249 |         try:
250 |             return await func(*args, **kwargs)
    |

src/floridify/api/core/base.py:254:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
252 |             raise
253 |         except Exception as e:
254 |             raise HTTPException(500, str(e))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
255 |
256 |     return wrapper
    |

src/floridify/api/core/base.py:259:20: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `data`
    |
259 | def get_etag(data: Any) -> str:
    |                    ^^^ ANN401
260 |     """Generate ETag for response data."""
261 |     import hashlib
    |

src/floridify/api/core/base.py:261:5: PLC0415 `import` should be at the top-level of a file
    |
259 | def get_etag(data: Any) -> str:
260 |     """Generate ETag for response data."""
261 |     import hashlib
    |     ^^^^^^^^^^^^^^ PLC0415
262 |     import json
    |

src/floridify/api/core/base.py:262:5: PLC0415 `import` should be at the top-level of a file
    |
260 |     """Generate ETag for response data."""
261 |     import hashlib
262 |     import json
    |     ^^^^^^^^^^^ PLC0415
263 |
264 |     content = json.dumps(data, sort_keys=True, default=str)
    |

src/floridify/api/core/cache.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from pydantic import BaseModel
12 |
13 | from ...caching.cache_manager import CacheManager, get_cache_manager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/core/cache.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from pydantic import BaseModel
12 |
13 | from ...caching.cache_manager import CacheManager, get_cache_manager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/core/cache.py:38:22: SLF001 Private member accessed: `_body`
   |
36 |     if config.include_body and request.method in ["POST", "PUT", "PATCH"]:
37 |         # Include body hash for write operations
38 |         body_bytes = request._body if hasattr(request, "_body") else b""
   |                      ^^^^^^^^^^^^^ SLF001
39 |         if body_bytes:
40 |             body_hash = hashlib.md5(body_bytes).hexdigest()[:8]
   |

src/floridify/api/core/cache.py:64:72: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
62 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
63 |         @wraps(func)
64 |         async def wrapper(request: Request, response: Response, *args: Any, **kwargs: Any) -> Any:
   |                                                                        ^^^ ANN401
65 |             # Generate cache key
66 |             cache_key = generate_cache_key(request, config, prefix)
   |

src/floridify/api/core/cache.py:64:87: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
62 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
63 |         @wraps(func)
64 |         async def wrapper(request: Request, response: Response, *args: Any, **kwargs: Any) -> Any:
   |                                                                                       ^^^ ANN401
65 |             # Generate cache key
66 |             cache_key = generate_cache_key(request, config, prefix)
   |

src/floridify/api/core/cache.py:64:95: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
   |
62 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
63 |         @wraps(func)
64 |         async def wrapper(request: Request, response: Response, *args: Any, **kwargs: Any) -> Any:
   |                                                                                               ^^^ ANN401
65 |             # Generate cache key
66 |             cache_key = generate_cache_key(request, config, prefix)
   |

src/floridify/api/core/cache.py:94:40: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
   |
93 |             # Don't cache error responses
94 |             if response.status_code >= 400:
   |                                        ^^^ PLR2004
95 |                 return result
   |

src/floridify/api/core/cache.py:110:30: DTZ003 `datetime.datetime.utcnow()` used
    |
108 |                 "data": result,
109 |                 "etag": response.headers.get("ETag", "").strip('"'),
110 |                 "timestamp": datetime.utcnow().isoformat(),
    |                              ^^^^^^^^^^^^^^^^^ DTZ003
111 |                 "status_code": response.status_code,
112 |             }
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/cache.py:132:9: ANN204 Missing return type annotation for special method `__init__`
    |
130 |     """Utility for invalidating related caches."""
131 |
132 |     def __init__(self, cache_manager: CacheManager | None = None):
    |         ^^^^^^^^ ANN204
133 |         self.cache_manager = cache_manager or get_cache_manager()
    |
    = help: Add return type annotation: `None`

src/floridify/api/core/cache.py:145:13: DTZ003 `datetime.datetime.utcnow()` used
    |
143 |         self.cache_manager.set(
144 |             (invalidation_key,),
145 |             datetime.utcnow().isoformat(),
    |             ^^^^^^^^^^^^^^^^^ DTZ003
146 |             ttl_hours=24.0,  # Keep for 24 hours
147 |         )
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/cache.py:200:9: ANN204 Missing return type annotation for special method `__init__`
    |
198 |     """Context manager for response caching."""
199 |
200 |     def __init__(
    |         ^^^^^^^^ ANN204
201 |         self, request: Request, response: Response, ttl: int = 3600, key_prefix: str = "response"
202 |     ):
    |
    = help: Add return type annotation: `None`

src/floridify/api/core/cache.py:211:35: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `__aenter__`
    |
209 |         self.start_time: datetime | None = None
210 |
211 |     async def __aenter__(self) -> Any:
    |                                   ^^^ ANN401
212 |         self.start_time = datetime.utcnow()
213 |         config = APICacheConfig(ttl=self.ttl)
    |

src/floridify/api/core/cache.py:212:27: DTZ003 `datetime.datetime.utcnow()` used
    |
211 |     async def __aenter__(self) -> Any:
212 |         self.start_time = datetime.utcnow()
    |                           ^^^^^^^^^^^^^^^^^ DTZ003
213 |         config = APICacheConfig(ttl=self.ttl)
214 |         self.cache_key = generate_cache_key(self.request, config, self.key_prefix)
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/cache.py:225:41: PYI036 The first argument in `__aexit__` should be annotated with `object` or `type[BaseException] | None`
    |
223 |         return None
224 |
225 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                         ^^^ PYI036
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
    |

src/floridify/api/core/cache.py:225:41: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_type`
    |
223 |         return None
224 |
225 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                         ^^^ ANN401
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
    |

src/floridify/api/core/cache.py:225:55: PYI036 The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`
    |
223 |         return None
224 |
225 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                       ^^^ PYI036
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
    |

src/floridify/api/core/cache.py:225:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_val`
    |
223 |         return None
224 |
225 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                       ^^^ ANN401
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
    |

src/floridify/api/core/cache.py:225:68: PYI036 The third argument in `__aexit__` should be annotated with `object` or `types.TracebackType | None`
    |
223 |         return None
224 |
225 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                                    ^^^ PYI036
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
    |

src/floridify/api/core/cache.py:225:68: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_tb`
    |
223 |         return None
224 |
225 |     async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
    |                                                                    ^^^ ANN401
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
    |

src/floridify/api/core/cache.py:228:24: DTZ003 `datetime.datetime.utcnow()` used
    |
226 |         if exc_type is None and self.cache_key and self.start_time:
227 |             # Cache successful response
228 |             elapsed = (datetime.utcnow() - self.start_time).total_seconds()
    |                        ^^^^^^^^^^^^^^^^^ DTZ003
229 |             self.response.headers["X-Response-Time"] = f"{elapsed:.3f}s"
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from fastapi import Request, Response
11 |
12 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/core/monitoring.py:22:25: Q000 [*] Single quotes found but double quotes preferred
   |
20 |     _instance = None
21 |
22 |     def __new__(cls) -> 'PerformanceMetrics':
   |                         ^^^^^^^^^^^^^^^^^^^^ Q000
23 |         if cls._instance is None:
24 |             cls._instance = super().__new__(cls)
   |
   = help: Replace single quotes with double quotes

src/floridify/api/core/monitoring.py:25:13: SLF001 Private member accessed: `_initialize`
   |
23 |         if cls._instance is None:
24 |             cls._instance = super().__new__(cls)
25 |             cls._instance._initialize()
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
26 |         return cls._instance
   |

src/floridify/api/core/monitoring.py:34:27: DTZ003 `datetime.datetime.utcnow()` used
   |
32 |         self.db_query_times: dict[str, list[dict[str, Any]]] = defaultdict(list)
33 |         self.error_counts: dict[str, int] = defaultdict(int)
34 |         self.start_time = datetime.utcnow()
   |                           ^^^^^^^^^^^^^^^^^ DTZ003
35 |
36 |     def record_request(self, endpoint: str, duration: float, status_code: int) -> None:
   |
   = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:42:30: DTZ003 `datetime.datetime.utcnow()` used
   |
40 |                 "duration": duration,
41 |                 "status_code": status_code,
42 |                 "timestamp": datetime.utcnow(),
   |                              ^^^^^^^^^^^^^^^^^ DTZ003
43 |             }
44 |         )
   |
   = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:47:48: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
   |
46 |         # Keep only last 1000 entries per endpoint
47 |         if len(self.request_times[endpoint]) > 1000:
   |                                                ^^^^ PLR2004
48 |             self.request_times[endpoint] = self.request_times[endpoint][-1000:]
   |

src/floridify/api/core/monitoring.py:64:30: DTZ003 `datetime.datetime.utcnow()` used
   |
62 |             {
63 |                 "duration": duration,
64 |                 "timestamp": datetime.utcnow(),
   |                              ^^^^^^^^^^^^^^^^^ DTZ003
65 |             }
66 |         )
   |
   = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:69:44: PLR2004 Magic value used in comparison, consider replacing `500` with a constant variable
   |
68 |         # Keep only last 500 entries per query type
69 |         if len(self.db_query_times[key]) > 500:
   |                                            ^^^ PLR2004
70 |             self.db_query_times[key] = self.db_query_times[key][-500:]
   |

src/floridify/api/core/monitoring.py:79:19: DTZ003 `datetime.datetime.utcnow()` used
   |
77 |     def get_stats(self) -> dict[str, Any]:
78 |         """Get current performance statistics."""
79 |         uptime = (datetime.utcnow() - self.start_time).total_seconds()
   |                   ^^^^^^^^^^^^^^^^^ DTZ003
80 |
81 |         # Calculate request stats
   |
   = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:92:41: PLR2004 Magic value used in comparison, consider replacing `20` with a constant variable
   |
90 |                     "max_ms": max(durations) * 1000,
91 |                     "p95_ms": sorted(durations)[int(len(durations) * 0.95)] * 1000
92 |                     if len(durations) > 20
   |                                         ^^ PLR2004
93 |                     else None,
94 |                 }
   |

src/floridify/api/core/monitoring.py:98:27: C401 Unnecessary generator (rewrite as a set comprehension)
    |
 96 |         # Calculate cache hit rates
 97 |         cache_hit_rates = {}
 98 |         for cache_type in set(k.split("_")[0] for k in self.cache_stats.keys()):
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C401
 99 |             hits = self.cache_stats.get(f"{cache_type}_hits", 0)
100 |             misses = self.cache_stats.get(f"{cache_type}_misses", 0)
    |
    = help: Rewrite as a set comprehension

src/floridify/api/core/monitoring.py:98:51: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
 96 |         # Calculate cache hit rates
 97 |         cache_hit_rates = {}
 98 |         for cache_type in set(k.split("_")[0] for k in self.cache_stats.keys()):
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
 99 |             hits = self.cache_stats.get(f"{cache_type}_hits", 0)
100 |             misses = self.cache_stats.get(f"{cache_type}_misses", 0)
    |
    = help: Remove `.keys()`

src/floridify/api/core/monitoring.py:137:78: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `track_request_performance`
    |
136 | @asynccontextmanager
137 | async def track_request_performance(request: Request, response: Response) -> Any:
    |                                                                              ^^^ ANN401
138 |     """Context manager for tracking request performance."""
139 |     start_time = time.time()
    |

src/floridify/api/core/monitoring.py:156:28: G004 Logging statement uses f-string
    |
154 |         # Log slow requests
155 |         if duration > 1.0:
156 |             logger.warning(f"Slow request: {endpoint} took {duration:.2f}s")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/api/core/monitoring.py:163:34: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
162 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
163 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                  ^^^ ANN401
164 |             start_time = time.time()
    |

src/floridify/api/core/monitoring.py:163:49: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
162 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
163 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                 ^^^ ANN401
164 |             start_time = time.time()
    |

src/floridify/api/core/monitoring.py:163:57: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
    |
162 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
163 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                         ^^^ ANN401
164 |             start_time = time.time()
    |

src/floridify/api/core/monitoring.py:168:24: RET504 Unnecessary assignment to `result` before `return` statement
    |
166 |             try:
167 |                 result = await func(*args, **kwargs)
168 |                 return result
    |                        ^^^^^^ RET504
169 |             finally:
170 |                 duration = time.time() - start_time
    |
    = help: Remove unnecessary assignment

src/floridify/api/core/monitoring.py:173:31: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
171 |                 metrics.record_db_query(collection, operation, duration)
172 |
173 |                 if duration > 0.1:
    |                               ^^^ PLR2004
174 |                     logger.warning(f"Slow DB query: {collection}.{operation} took {duration:.3f}s")
    |

src/floridify/api/core/monitoring.py:174:36: G004 Logging statement uses f-string
    |
173 |                 if duration > 0.1:
174 |                     logger.warning(f"Slow DB query: {collection}.{operation} took {duration:.3f}s")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
175 |
176 |         return wrapper
    |

src/floridify/api/core/monitoring.py:184:9: ANN204 Missing return type annotation for special method `__init__`
    |
182 |     """Utility for detecting and logging slow queries."""
183 |
184 |     def __init__(self, threshold_ms: float = 100):
    |         ^^^^^^^^ ANN204
185 |         self.threshold_ms = threshold_ms
186 |         self.slow_queries: list[dict[str, Any]] = []
    |
    = help: Add return type annotation: `None`

src/floridify/api/core/monitoring.py:189:54: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `track`
    |
188 |     @asynccontextmanager
189 |     async def track(self, query_description: str) -> Any:
    |                                                      ^^^ ANN401
190 |         """Track a query execution."""
191 |         start_time = time.time()
    |

src/floridify/api/core/monitoring.py:201:30: DTZ003 `datetime.datetime.utcnow()` used
    |
199 |                 "description": query_description,
200 |                 "duration_ms": duration_ms,
201 |                 "timestamp": datetime.utcnow(),
    |                              ^^^^^^^^^^^^^^^^^ DTZ003
202 |             }
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:207:41: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
206 |             # Keep only last 100 slow queries
207 |             if len(self.slow_queries) > 100:
    |                                         ^^^ PLR2004
208 |                 self.slow_queries = self.slow_queries[-100:]
    |

src/floridify/api/core/monitoring.py:210:28: G004 Logging statement uses f-string
    |
208 |                 self.slow_queries = self.slow_queries[-100:]
209 |
210 |             logger.warning(f"Slow query detected: {query_description} took {duration_ms:.2f}ms")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
211 |
212 |     def get_slow_queries(self) -> list[dict[str, Any]]:
    |

src/floridify/api/core/monitoring.py:229:15: DTZ003 `datetime.datetime.utcnow()` used
    |
227 |     async def check_rate_limit(self, key: str, max_requests: int, window_seconds: int) -> bool:
228 |         """Check if request is within rate limit."""
229 |         now = datetime.utcnow()
    |               ^^^^^^^^^^^^^^^^^ DTZ003
230 |         cutoff = now - timedelta(seconds=window_seconds)
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/monitoring.py:245:15: DTZ003 `datetime.datetime.utcnow()` used
    |
243 |     def get_remaining(self, key: str, max_requests: int, window_seconds: int) -> int:
244 |         """Get remaining requests in current window."""
245 |         now = datetime.utcnow()
    |               ^^^^^^^^^^^^^^^^^ DTZ003
246 |         cutoff = now - timedelta(seconds=window_seconds)
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/core/query.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from pymongo import ASCENDING, DESCENDING
10 |
11 | from ...storage.mongodb import get_database
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/core/query.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...storage.mongodb import get_database
12 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/core/query.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     """Utilities for optimizing MongoDB queries."""
19 |
20 |     def __init__(self, db: AsyncIOMotorDatabase[Any] | None = None):
   |         ^^^^^^^^ ANN204
21 |         self.db = db
   |
   = help: Add return type annotation: `None`

src/floridify/api/core/query.py:67:17: PERF401 Use a list comprehension to create a transformed list
   |
65 |         for stat in stats:
66 |             if stat["usage"] and stat["usage"].get("accesses", {}).get("ops", 0) == 0:
67 |                 recommendations.append(f"Consider removing unused index: {stat['name']}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
68 |
69 |         return recommendations
   |
   = help: Replace for loop with list comprehension

src/floridify/api/core/query.py:111:29: G004 Logging statement uses f-string
    |
109 |                 index_name = await collection.create_index(keys, **options)
110 |                 created.append(index_name)
111 |                 logger.info(f"Created index {index_name} on {model.__name__}")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
112 |             except Exception as e:
113 |                 logger.warning(f"Failed to create index on {model.__name__}: {e}")
    |

src/floridify/api/core/query.py:113:32: G004 Logging statement uses f-string
    |
111 |                 logger.info(f"Created index {index_name} on {model.__name__}")
112 |             except Exception as e:
113 |                 logger.warning(f"Failed to create index on {model.__name__}: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
114 |
115 |         return created
    |

src/floridify/api/core/query.py:118:66: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `profile_query`
    |
117 |     @asynccontextmanager
118 |     async def profile_query(self, description: str = "Query") -> Any:
    |                                                                  ^^^ ANN401
119 |         """Context manager for profiling queries."""
120 |         start_time = time.time()
    |

src/floridify/api/core/query.py:129:22: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
127 |         elapsed = time.time() - start_time
128 |
129 |         if elapsed > 0.1:  # Log slow queries
    |                      ^^^ PLR2004
130 |             logger.warning(f"Slow query detected: {description} took {elapsed:.3f}s")
131 |         else:
    |

src/floridify/api/core/query.py:130:28: G004 Logging statement uses f-string
    |
129 |         if elapsed > 0.1:  # Log slow queries
130 |             logger.warning(f"Slow query detected: {description} took {elapsed:.3f}s")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
131 |         else:
132 |             logger.debug(f"{description} completed in {elapsed:.3f}s")
    |

src/floridify/api/core/query.py:132:26: G004 Logging statement uses f-string
    |
130 |             logger.warning(f"Slow query detected: {description} took {elapsed:.3f}s")
131 |         else:
132 |             logger.debug(f"{description} completed in {elapsed:.3f}s")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/api/core/query.py:174:26: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_id`
    |
172 |         return self
173 |
174 |     def group(self, _id: Any, fields: dict[str, Any]) -> "AggregationBuilder":
    |                          ^^^ ANN401
175 |         """Add group stage."""
176 |         group_stage = {"_id": _id}
    |

src/floridify/api/core/query.py:219:9: ANN204 Missing return type annotation for special method `__init__`
    |
217 |     """Builder for bulk operations."""
218 |
219 |     def __init__(self, model: type[Document]):
    |         ^^^^^^^^ ANN204
220 |         self.model = model
221 |         self.operations: list[dict[str, Any]] = []
    |
    = help: Add return type annotation: `None`

src/floridify/api/examples/deduplication_example.py:1:1: INP001 File `src/floridify/api/examples/deduplication_example.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/api/examples/deduplication_example.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from fastapi import APIRouter, HTTPException
14 |
15 | from ...caching import cached_api_call
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/examples/deduplication_example.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...caching import cached_api_call
16 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 |
18 | router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/examples/deduplication_example.py:25:17: G004 Logging statement uses f-string
   |
23 | async def fetch_from_database(item_id: str) -> dict[str, Any]:
24 |     """Simulate an expensive database query."""
25 |     logger.info(f"📊 Executing database query for item: {item_id}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
26 |     await asyncio.sleep(1.5)  # Simulate query time
27 |     return {
   |

src/floridify/api/examples/deduplication_example.py:38:17: G004 Logging statement uses f-string
   |
36 | async def call_external_api(query: str) -> dict[str, Any]:
37 |     """Simulate calling an external API."""
38 |     logger.info(f"🌐 Calling external API with query: {query}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
39 |     await asyncio.sleep(2.0)  # Simulate API latency
40 |     return {
   |

src/floridify/api/examples/deduplication_example.py:60:9: TRY300 Consider moving this statement to an `else` block
   |
58 |           # for the first one to complete
59 |           result = await fetch_from_database(item_id)
60 | /         return {
61 | |             "status": "success",
62 | |             "data": result,
63 | |             "deduplicated": True,
64 | |         }
   | |_________^ TRY300
65 |       except Exception as e:
66 |           logger.error(f"Failed to fetch item {item_id}: {e}")
   |

src/floridify/api/examples/deduplication_example.py:66:9: TRY400 Use `logging.exception` instead of `logging.error`
   |
64 |         }
65 |     except Exception as e:
66 |         logger.error(f"Failed to fetch item {item_id}: {e}")
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
67 |         raise HTTPException(status_code=500, detail=str(e))
   |
   = help: Replace with `exception`

src/floridify/api/examples/deduplication_example.py:66:22: G004 Logging statement uses f-string
   |
64 |         }
65 |     except Exception as e:
66 |         logger.error(f"Failed to fetch item {item_id}: {e}")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
67 |         raise HTTPException(status_code=500, detail=str(e))
   |

src/floridify/api/examples/deduplication_example.py:67:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
65 |     except Exception as e:
66 |         logger.error(f"Failed to fetch item {item_id}: {e}")
67 |         raise HTTPException(status_code=500, detail=str(e))
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
   |

src/floridify/api/examples/deduplication_example.py:84:26: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
82 |     3. Reduces load on external search API
83 |     """
84 |     if not q or len(q) < 3:
   |                          ^ PLR2004
85 |         raise HTTPException(status_code=400, detail="Query must be at least 3 characters")
   |

src/floridify/api/examples/deduplication_example.py:102:9: ANN204 Missing return type annotation for special method `__init__`
    |
100 |     """Example of manual deduplication for batch operations."""
101 |     
102 |     def __init__(self):
    |         ^^^^^^^^ ANN204
103 |         self._in_flight: dict[str, asyncio.Future[Any]] = {}
104 |         self._lock = asyncio.Lock()
    |
    = help: Add return type annotation: `None`

src/floridify/api/examples/deduplication_example.py:111:29: G004 Logging statement uses f-string
    |
109 |         async with self._lock:
110 |             if batch_id in self._in_flight:
111 |                 logger.info(f"🔄 Batch {batch_id} already in flight, waiting...")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
112 |                 future = self._in_flight[batch_id]
113 |             else:
    |

src/floridify/api/examples/deduplication_example.py:119:17: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
118 |                 # Schedule the actual processing
119 |                 asyncio.create_task(self._do_process_batch(batch_id, items, future))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
120 |         
121 |         # Wait for result
    |

src/floridify/api/examples/deduplication_example.py:132:25: G004 Logging statement uses f-string
    |
130 |         """Actually process the batch."""
131 |         try:
132 |             logger.info(f"🏭 Processing batch {batch_id} with {len(items)} items")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
133 |             await asyncio.sleep(3)  # Simulate processing
    |

src/floridify/api/examples/deduplication_example.py:143:25: G004 Logging statement uses f-string
    |
142 |             future.set_result(result)
143 |             logger.info(f"✅ Batch {batch_id} processing complete")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
144 |             
145 |         except Exception as e:
    |

src/floridify/api/examples/deduplication_example.py:147:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
145 |         except Exception as e:
146 |             future.set_exception(e)
147 |             logger.error(f"❌ Batch {batch_id} processing failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
148 |         
149 |         finally:
    |
    = help: Replace with `exception`

src/floridify/api/examples/deduplication_example.py:147:26: G004 Logging statement uses f-string
    |
145 |         except Exception as e:
146 |             future.set_exception(e)
147 |             logger.error(f"❌ Batch {batch_id} processing failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
148 |         
149 |         finally:
    |

src/floridify/api/examples/deduplication_example.py:192:21: G004 Logging statement uses f-string
    |
190 |     try:
191 |         # Simulate unreliable external service
192 |         logger.info(f"🌍 Fetching external resource: {resource_id}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
193 |         
194 |         # Random delay to simulate network issues
    |

src/floridify/api/examples/deduplication_example.py:195:9: PLC0415 `import` should be at the top-level of a file
    |
194 |         # Random delay to simulate network issues
195 |         import random
    |         ^^^^^^^^^^^^^ PLC0415
196 |         delay = random.uniform(1, 7)  # Sometimes exceeds timeout
197 |         await asyncio.sleep(delay)
    |

src/floridify/api/examples/deduplication_example.py:208:24: G004 Logging statement uses f-string
    |
207 |     except asyncio.CancelledError:
208 |         logger.warning(f"Request cancelled for resource: {resource_id}")
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
209 |         raise HTTPException(status_code=503, detail="Request cancelled")
210 |     except Exception as e:
    |

src/floridify/api/examples/deduplication_example.py:209:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
207 |     except asyncio.CancelledError:
208 |         logger.warning(f"Request cancelled for resource: {resource_id}")
209 |         raise HTTPException(status_code=503, detail="Request cancelled")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
210 |     except Exception as e:
211 |         logger.error(f"Failed to fetch resource {resource_id}: {e}")
    |

src/floridify/api/examples/deduplication_example.py:211:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
209 |         raise HTTPException(status_code=503, detail="Request cancelled")
210 |     except Exception as e:
211 |         logger.error(f"Failed to fetch resource {resource_id}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
212 |         raise HTTPException(status_code=500, detail=str(e))
    |
    = help: Replace with `exception`

src/floridify/api/examples/deduplication_example.py:211:22: G004 Logging statement uses f-string
    |
209 |         raise HTTPException(status_code=503, detail="Request cancelled")
210 |     except Exception as e:
211 |         logger.error(f"Failed to fetch resource {resource_id}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
212 |         raise HTTPException(status_code=500, detail=str(e))
    |

src/floridify/api/examples/deduplication_example.py:212:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
210 |     except Exception as e:
211 |         logger.error(f"Failed to fetch resource {resource_id}: {e}")
212 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/examples/update_endpoint_example.py:1:1: INP001 File `src/floridify/api/examples/update_endpoint_example.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/api/examples/update_endpoint_example.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from fastapi import APIRouter
11 |
12 | from ...caching import cached_api_call
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/examples/update_endpoint_example.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...caching import cached_api_call
13 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/examples/update_endpoint_example.py:30:17: G004 Logging statement uses f-string
   |
28 | async def lookup_word_old(word: str, params: dict[str, Any]) -> dict[str, Any]:
29 |     """Original implementation with only caching."""
30 |     logger.info(f"Looking up word: {word}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
31 |     # ... expensive lookup operation ...
32 |     return {"word": word, "definition": "..."}
   |

src/floridify/api/examples/update_endpoint_example.py:52:17: G004 Logging statement uses f-string
   |
50 |     3. Reduces load on backend services during traffic spikes
51 |     """
52 |     logger.info(f"Looking up word: {word}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
53 |     # ... expensive lookup operation ...
54 |     return {"word": word, "definition": "..."}
   |

src/floridify/api/examples/update_endpoint_example.py:59:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
57 | # For existing code that needs minimal changes, you can also apply
58 | # deduplication as a separate decorator:
59 | from ...caching import deduplicated
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/examples/update_endpoint_example.py:72:17: G004 Logging statement uses f-string
   |
70 |     This approach keeps the existing decorator and adds deduplication on top.
71 |     """
72 |     logger.info(f"Finding synonyms for: {word}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
73 |     # ... expensive synonym lookup ...
74 |     return ["synonym1", "synonym2", "synonym3"]
   |

src/floridify/api/examples/update_endpoint_example.py:81:9: ANN204 Missing return type annotation for special method `__init__`
   |
79 |     """Example showing how to gradually migrate existing code."""
80 |     
81 |     def __init__(self, use_deduplication: bool = False):
   |         ^^^^^^^^ ANN204
82 |         self.use_deduplication = use_deduplication
   |
   = help: Add return type annotation: `None`

src/floridify/api/examples/update_endpoint_example.py:88:9: RET505 [*] Unnecessary `else` after `return` statement
   |
86 |         if self.use_deduplication:
87 |             return await self._lookup_with_dedup(word)
88 |         else:
   |         ^^^^ RET505
89 |             return await self._lookup_cached_only(word)
   |
   = help: Remove unnecessary `else`

src/floridify/api/examples/update_endpoint_example.py:94:21: G004 Logging statement uses f-string
   |
92 |     async def _lookup_cached_only(self, word: str) -> dict[str, Any]:
93 |         """Original implementation."""
94 |         logger.info(f"Lookup (cache only): {word}")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
95 |         # ... implementation ...
96 |         return {"word": word, "cached_only": True}
   |

src/floridify/api/examples/update_endpoint_example.py:101:21: G004 Logging statement uses f-string
    |
 99 |     async def _lookup_with_dedup(self, word: str) -> dict[str, Any]:
100 |         """New implementation with deduplication."""
101 |         logger.info(f"Lookup (cache + dedup): {word}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
102 |         # ... same implementation ...
103 |         return {"word": word, "with_dedup": True}
    |

src/floridify/api/examples/update_endpoint_example.py:107:5: ANN201 Missing return type annotation for public function `update_lookup_endpoint_example`
    |
106 | # Real-world example: Updating the existing lookup endpoint
107 | def update_lookup_endpoint_example():
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
108 |     """Shows the minimal changes needed to add deduplication."""
    |
    = help: Add return type annotation: `None`

src/floridify/api/examples/update_endpoint_example.py:112:5: ERA001 Found commented-out code
    |
110 |     # Original code:
111 |     # @cached_api_call(
112 |     #     ttl_hours=1.0,
    |     ^^^^^^^^^^^^^^^^^^^^ ERA001
113 |     #     key_func=lambda word, params: (
114 |     #         "api_lookup",
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:113:5: ERA001 Found commented-out code
    |
111 |     # @cached_api_call(
112 |     #     ttl_hours=1.0,
113 |     #     key_func=lambda word, params: (
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
114 |     #         "api_lookup",
115 |     #         word,
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:117:5: ERA001 Found commented-out code
    |
115 |     #         word,
116 |     #         params.force_refresh,
117 |     #         tuple(params.providers),
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
118 |     #         params.no_ai,
119 |     #     ),
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:120:5: ERA001 Found commented-out code
    |
118 |     #         params.no_ai,
119 |     #     ),
120 |     # )
    |     ^^^ ERA001
121 |     
122 |     # Updated code (just change the decorator name and add max_wait_time):
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:124:5: ERA001 Found commented-out code
    |
122 |     # Updated code (just change the decorator name and add max_wait_time):
123 |     # @cached_api_call(
124 |     #     ttl_hours=1.0,
    |     ^^^^^^^^^^^^^^^^^^^^ ERA001
125 |     #     key_func=lambda word, params: (
126 |     #         "api_lookup",
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:125:5: ERA001 Found commented-out code
    |
123 |     # @cached_api_call(
124 |     #     ttl_hours=1.0,
125 |     #     key_func=lambda word, params: (
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
126 |     #         "api_lookup",
127 |     #         word,
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:129:5: ERA001 Found commented-out code
    |
127 |     #         word,
128 |     #         params.force_refresh,
129 |     #         tuple(params.providers),
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
130 |     #         params.no_ai,
131 |     #     ),
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:132:5: ERA001 Found commented-out code
    |
130 |     #         params.no_ai,
131 |     #     ),
132 |     #     max_wait_time=45.0,  # Lookup can take time with AI synthesis
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
133 |     # )
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:133:5: ERA001 Found commented-out code
    |
131 |     #     ),
132 |     #     max_wait_time=45.0,  # Lookup can take time with AI synthesis
133 |     # )
    |     ^^^ ERA001
134 |     
135 |     pass
    |
    = help: Remove commented-out code

src/floridify/api/examples/update_endpoint_example.py:135:5: PIE790 [*] Unnecessary `pass` statement
    |
133 |     # )
134 |     
135 |     pass
    |     ^^^^ PIE790
    |
    = help: Remove unnecessary `pass`

src/floridify/api/examples/update_endpoint_example.py:144:9: ANN204 Missing return type annotation for special method `__init__`
    |
142 |     """Track deduplication effectiveness."""
143 |     
144 |     def __init__(self):
    |         ^^^^^^^^ ANN204
145 |         self.total_requests = 0
146 |         self.deduplicated_requests = 0
    |
    = help: Add return type annotation: `None`

src/floridify/api/examples/update_endpoint_example.py:180:5: ANN201 Missing return type annotation for public function `custom_dedup_key_example`
    |
179 | # Example of custom key generation for complex scenarios
180 | def custom_dedup_key_example():
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
181 |     """Shows different key generation strategies."""
    |
    = help: Add return type annotation

src/floridify/api/examples/update_endpoint_example.py:190:9: ANN202 Missing return type annotation for private function `selective_key`
    |
189 |     # 3. Key that ignores certain parameters
190 |     def selective_key(word: str, include_etymology: bool = False, debug: bool = False):
    |         ^^^^^^^^^^^^^ ANN202
191 |         # Ignore debug flag in deduplication key
192 |         return f"word:{word}:etymology:{include_etymology}"
    |
    = help: Add return type annotation: `str`

src/floridify/api/examples/update_endpoint_example.py:195:9: ANN202 Missing return type annotation for private function `normalized_key`
    |
194 |     # 4. Key with normalized values
195 |     def normalized_key(query: str, limit: int = 10):
    |         ^^^^^^^^^^^^^^ ANN202
196 |         # Normalize query to lowercase and cap limit
197 |         return f"search:{query.lower()}:limit:{min(limit, 100)}"
    |
    = help: Add return type annotation: `str`

src/floridify/api/examples/update_endpoint_example.py:200:9: ANN202 Missing return type annotation for private function `time_bucketed_key`
    |
199 |     # 5. Key for time-bucketed deduplication
200 |     def time_bucketed_key(user_id: str, bucket_minutes: int = 5):
    |         ^^^^^^^^^^^^^^^^^ ANN202
201 |         # Deduplicate within time buckets
202 |         import time
    |
    = help: Add return type annotation: `str`

src/floridify/api/examples/update_endpoint_example.py:202:9: PLC0415 `import` should be at the top-level of a file
    |
200 |     def time_bucketed_key(user_id: str, bucket_minutes: int = 5):
201 |         # Deduplicate within time buckets
202 |         import time
    |         ^^^^^^^^^^^ PLC0415
203 |         bucket = int(time.time() / (bucket_minutes * 60))
204 |         return f"user:{user_id}:bucket:{bucket}"
    |

src/floridify/api/main.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from fastapi.middleware.cors import CORSMiddleware
10 |
11 | from ..ai import get_definition_synthesizer, get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..constants import Language
13 | from ..search.language import get_language_search
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from fastapi.middleware.cors import CORSMiddleware
10 |
11 | from ..ai import get_definition_synthesizer, get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..constants import Language
13 | from ..search.language import get_language_search
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ..ai import get_definition_synthesizer, get_openai_connector
12 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..search.language import get_language_search
14 | from ..storage.mongodb import get_storage
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ..ai import get_definition_synthesizer, get_openai_connector
12 | from ..constants import Language
13 | from ..search.language import get_language_search
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..storage.mongodb import get_storage
15 | from ..text.processor import get_text_processor
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..constants import Language
13 | from ..search.language import get_language_search
14 | from ..storage.mongodb import get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..text.processor import get_text_processor
16 | from ..utils.logging import setup_logging
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..search.language import get_language_search
14 | from ..storage.mongodb import get_storage
15 | from ..text.processor import get_text_processor
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..utils.logging import setup_logging
17 | from .middleware import CacheHeadersMiddleware, LoggingMiddleware
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..storage.mongodb import get_storage
15 | from ..text.processor import get_text_processor
16 | from ..utils.logging import setup_logging
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from .middleware import CacheHeadersMiddleware, LoggingMiddleware
18 | from .routers import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/main.py:38:37: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `lifespan`
   |
37 | @asynccontextmanager
38 | async def lifespan(app: FastAPI) -> Any:
   |                                     ^^^ ANN401
39 |     """Initialize database and resources on startup, cleanup on shutdown."""
40 |     # Startup
   |

src/floridify/api/main.py:44:9: T201 `print` found
   |
42 |         # Initialize MongoDB storage
43 |         storage = await get_storage()
44 |         print("✅ MongoDB storage initialized successfully")
   |         ^^^^^ T201
45 |         
46 |         # Initialize language search engine (singleton)
   |
   = help: Remove `print`

src/floridify/api/main.py:48:9: T201 `print` found
   |
46 |         # Initialize language search engine (singleton)
47 |         language_search = await get_language_search([Language.ENGLISH])
48 |         print("✅ Language search engine initialized successfully")
   |         ^^^^^ T201
49 |         
50 |         # Initialize text processor (singleton)
   |
   = help: Remove `print`

src/floridify/api/main.py:52:9: T201 `print` found
   |
50 |         # Initialize text processor (singleton)
51 |         text_processor = get_text_processor()
52 |         print("✅ Text processor initialized successfully")
   |         ^^^^^ T201
53 |         
54 |         # Initialize AI components (singletons)
   |
   = help: Remove `print`

src/floridify/api/main.py:56:9: T201 `print` found
   |
54 |         # Initialize AI components (singletons)
55 |         ai_connector = get_openai_connector()
56 |         print("✅ OpenAI connector initialized successfully")
   |         ^^^^^ T201
57 |         
58 |         definition_synthesizer = get_definition_synthesizer()
   |
   = help: Remove `print`

src/floridify/api/main.py:59:9: T201 `print` found
   |
58 |         definition_synthesizer = get_definition_synthesizer()
59 |         print("✅ Definition synthesizer initialized successfully")
   |         ^^^^^ T201
60 |         
61 |     except Exception as e:
   |
   = help: Remove `print`

src/floridify/api/main.py:62:9: T201 `print` found
   |
61 |     except Exception as e:
62 |         print(f"❌ Application initialization failed: {e}")
   |         ^^^^^ T201
63 |         raise
   |
   = help: Remove `print`

src/floridify/api/main.py:68:5: T201 `print` found
   |
67 |     # Shutdown
68 |     print("🔄 Shutting down...")
   |     ^^^^^ T201
   |
   = help: Remove `print`

src/floridify/api/middleware/__init__.py:6:11: RUF022 [*] `__all__` is not sorted
  |
4 | from .middleware import CacheHeadersMiddleware, LoggingMiddleware
5 |
6 | __all__ = ["FieldSelector", "select_fields", "CacheHeadersMiddleware", "LoggingMiddleware"]
  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF022
  |
  = help: Apply an isort-style sorting to `__all__`

src/floridify/api/middleware/field_selection.py:53:9: ANN204 Missing return type annotation for special method `__init__`
   |
51 |     """Field selection helper for API endpoints."""
52 |
53 |     def __init__(self, include: str | None = None, exclude: str | None = None):
   |         ^^^^^^^^ ANN204
54 |         self.include = parse_field_param(include)
55 |         self.exclude = parse_field_param(exclude)
   |
   = help: Add return type annotation: `None`

src/floridify/api/middleware/field_selection.py:92:17: PLC0415 `import` should be at the top-level of a file
   |
90 |                 # Dynamically import the related model
91 |                 # This is a simplified version - in production you'd have a registry
92 |                 from ...models import Definition, Example, Pronunciation, Word
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
93 |
94 |                 model_map = {
   |

src/floridify/api/middleware/field_selection.py:92:17: TID252 Prefer absolute imports over relative imports from parent modules
   |
90 |                 # Dynamically import the related model
91 |                 # This is a simplified version - in production you'd have a registry
92 |                 from ...models import Definition, Example, Pronunciation, Word
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
93 |
94 |                 model_map = {
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/middleware/field_selection.py:92:17: TID252 Prefer absolute imports over relative imports from parent modules
   |
90 |                 # Dynamically import the related model
91 |                 # This is a simplified version - in production you'd have a registry
92 |                 from ...models import Definition, Example, Pronunciation, Word
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
93 |
94 |                 model_map = {
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/middleware/field_selection.py:92:17: TID252 Prefer absolute imports over relative imports from parent modules
   |
90 |                 # Dynamically import the related model
91 |                 # This is a simplified version - in production you'd have a registry
92 |                 from ...models import Definition, Example, Pronunciation, Word
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
93 |
94 |                 model_map = {
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/middleware/field_selection.py:92:17: TID252 Prefer absolute imports over relative imports from parent modules
   |
90 |                 # Dynamically import the related model
91 |                 # This is a simplified version - in production you'd have a registry
92 |                 from ...models import Definition, Example, Pronunciation, Word
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
93 |
94 |                 model_map = {
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/middleware/middleware.py:8:29: TC003 Move standard library import `collections.abc.Awaitable` into a type-checking block
   |
 6 | import time
 7 | import uuid
 8 | from collections.abc import Awaitable, Callable
   |                             ^^^^^^^^^ TC003
 9 |
10 | from fastapi import Request, Response
   |
   = help: Move into type-checking block

src/floridify/api/middleware/middleware.py:8:40: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
   |
 6 | import time
 7 | import uuid
 8 | from collections.abc import Awaitable, Callable
   |                                        ^^^^^^^^ TC003
 9 |
10 | from fastapi import Request, Response
   |
   = help: Move into type-checking block

src/floridify/api/middleware/middleware.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from starlette.middleware.base import BaseHTTPMiddleware
12 |
13 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/middleware/middleware.py:64:13: TRY300 Consider moving this statement to an `else` block
   |
62 |             response.headers["X-Request-ID"] = request_id
63 |
64 |             return response
   |             ^^^^^^^^^^^^^^^ TRY300
65 |
66 |         except Exception as e:
   |

src/floridify/api/middleware/middleware.py:72:13: TRY400 Use `logging.exception` instead of `logging.error`
   |
71 |               # Log error
72 | /             logger.error(
73 | |                 "API request failed",
74 | |                 extra={
75 | |                     "request_id": request_id,
76 | |                     "error": str(e),
77 | |                     "process_time_ms": process_time_ms,
78 | |                 },
79 | |             )
   | |_____________^ TRY400
80 |
81 |               # Re-raise the exception
   |
   = help: Replace with `exception`

src/floridify/api/middleware/middleware.py:95:36: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
   |
94 |         # Only add cache headers for successful responses
95 |         if response.status_code == 200:
   |                                    ^^^ PLR2004
96 |             path = request.url.path
97 |             query_params = str(request.query_params) if request.query_params else ""
   |

src/floridify/api/middleware/rate_limiting.py:8:29: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
  |
6 | import time
7 | from collections import defaultdict
8 | from collections.abc import Callable
  |                             ^^^^^^^^ TC003
9 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/api/middleware/rate_limiting.py:18:9: ANN204 Missing return type annotation for special method `__init__`
   |
16 |     """Token bucket rate limiter implementation."""
17 |
18 |     def __init__(
   |         ^^^^^^^^ ANN204
19 |         self,
20 |         requests_per_minute: int = 60,
   |
   = help: Add return type annotation: `None`

src/floridify/api/middleware/rate_limiting.py:95:9: ANN204 Missing return type annotation for special method `__init__`
   |
93 |     """Specialized rate limiter for OpenAI API calls with token tracking."""
94 |
95 |     def __init__(
   |         ^^^^^^^^ ANN204
96 |         self,
97 |         requests_per_minute: int = 50,
   |
   = help: Add return type annotation: `None`

src/floridify/api/middleware/rate_limiting.py:205:31: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
203 |     """Custom route class that adds rate limiting."""
204 |
205 |     def __init__(self, *args: Any, rate_limiter: RateLimiter | None = None, **kwargs: Any) -> None:
    |                               ^^^ ANN401
206 |         super().__init__(*args, **kwargs)
207 |         self.rate_limiter = rate_limiter or general_limiter
    |

src/floridify/api/middleware/rate_limiting.py:205:87: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
203 |     """Custom route class that adds rate limiting."""
204 |
205 |     def __init__(self, *args: Any, rate_limiter: RateLimiter | None = None, **kwargs: Any) -> None:
    |                                                                                       ^^^ ANN401
206 |         super().__init__(*args, **kwargs)
207 |         self.rate_limiter = rate_limiter or general_limiter
    |

src/floridify/api/middleware/rate_limiting.py:249:52: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
248 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
249 |         async def wrapper(request: Request, *args: Any, **kwargs: Any) -> Any:
    |                                                    ^^^ ANN401
250 |             client_key = get_client_key(request)
251 |             allowed, headers = await limiter.check_rate_limit(client_key)
    |

src/floridify/api/middleware/rate_limiting.py:249:67: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
248 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
249 |         async def wrapper(request: Request, *args: Any, **kwargs: Any) -> Any:
    |                                                                   ^^^ ANN401
250 |             client_key = get_client_key(request)
251 |             allowed, headers = await limiter.check_rate_limit(client_key)
    |

src/floridify/api/middleware/rate_limiting.py:249:75: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
    |
248 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
249 |         async def wrapper(request: Request, *args: Any, **kwargs: Any) -> Any:
    |                                                                           ^^^ ANN401
250 |             client_key = get_client_key(request)
251 |             allowed, headers = await limiter.check_rate_limit(client_key)
    |

src/floridify/api/repositories/__init__.py:25:11: RUF022 [*] `__all__` is not sorted
   |
23 |   from .word_repository import WordCreate, WordFilter, WordRepository, WordUpdate
24 |
25 |   __all__ = [
   |  ___________^
26 | |     "WordRepository",
27 | |     "WordCreate",
28 | |     "WordUpdate",
29 | |     "WordFilter",
30 | |     "DefinitionRepository",
31 | |     "DefinitionCreate",
32 | |     "DefinitionUpdate",
33 | |     "DefinitionFilter",
34 | |     "ExampleRepository",
35 | |     "ExampleCreate",
36 | |     "ExampleUpdate",
37 | |     "ExampleFilter",
38 | |     "FactRepository",
39 | |     "FactCreate",
40 | |     "FactUpdate",
41 | |     "FactFilter",
42 | |     "SynthesisRepository",
43 | |     "SynthesisCreate",
44 | |     "SynthesisUpdate",
45 | |     "SynthesisFilter",
46 | |     "ComponentStatus",
47 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/api/repositories/definition_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 |   from pydantic import BaseModel, Field
 8 |
 9 | / from ...models import (
10 | |     Collocation,
11 | |     Definition,
12 | |     GrammarPattern,
13 | |     MeaningCluster,
14 | |     UsageNote,
15 | |     WordForm,
16 | | )
   | |_^ TID252
17 |   from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 |   from pydantic import BaseModel, Field
 8 |
 9 | / from ...models import (
10 | |     Collocation,
11 | |     Definition,
12 | |     GrammarPattern,
13 | |     MeaningCluster,
14 | |     UsageNote,
15 | |     WordForm,
16 | | )
   | |_^ TID252
17 |   from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 |   from pydantic import BaseModel, Field
 8 |
 9 | / from ...models import (
10 | |     Collocation,
11 | |     Definition,
12 | |     GrammarPattern,
13 | |     MeaningCluster,
14 | |     UsageNote,
15 | |     WordForm,
16 | | )
   | |_^ TID252
17 |   from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 |   from pydantic import BaseModel, Field
 8 |
 9 | / from ...models import (
10 | |     Collocation,
11 | |     Definition,
12 | |     GrammarPattern,
13 | |     MeaningCluster,
14 | |     UsageNote,
15 | |     WordForm,
16 | | )
   | |_^ TID252
17 |   from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 |   from pydantic import BaseModel, Field
 8 |
 9 | / from ...models import (
10 | |     Collocation,
11 | |     Definition,
12 | |     GrammarPattern,
13 | |     MeaningCluster,
14 | |     UsageNote,
15 | |     WordForm,
16 | | )
   | |_^ TID252
17 |   from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 |   from pydantic import BaseModel, Field
 8 |
 9 | / from ...models import (
10 | |     Collocation,
11 | |     Definition,
12 | |     GrammarPattern,
13 | |     MeaningCluster,
14 | |     UsageNote,
15 | |     WordForm,
16 | | )
   | |_^ TID252
17 |   from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 |     WordForm,
16 | )
17 | from ..core.base import BaseRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:163:9: PLC0415 `import` should be at the top-level of a file
    |
161 |     async def _cascade_delete(self, definition: Definition) -> None:
162 |         """Delete related documents when deleting a definition."""
163 |         from ...models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
164 |
165 |         # Delete all examples for this definition
    |

src/floridify/api/repositories/definition_repository.py:163:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
161 |     async def _cascade_delete(self, definition: Definition) -> None:
162 |         """Delete related documents when deleting a definition."""
163 |         from ...models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
164 |
165 |         # Delete all examples for this definition
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:171:9: PLC0415 `import` should be at the top-level of a file
    |
169 |     async def get_with_examples(self, id: PydanticObjectId) -> dict[str, Any]:
170 |         """Get definition with expanded examples."""
171 |         from ...models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
172 |
173 |         definition = await self.get(id, raise_on_missing=True)
    |

src/floridify/api/repositories/definition_repository.py:171:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
169 |     async def get_with_examples(self, id: PydanticObjectId) -> dict[str, Any]:
170 |         """Get definition with expanded examples."""
171 |         from ...models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
172 |
173 |         definition = await self.get(id, raise_on_missing=True)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/definition_repository.py:188:9: PLC0415 `import` should be at the top-level of a file
    |
186 |     async def get_many_with_examples(self, definitions: list[Definition]) -> list[dict[str, Any]]:
187 |         """Get multiple definitions with expanded examples efficiently."""
188 |         from ...models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
189 |
190 |         # Collect all example IDs
    |

src/floridify/api/repositories/definition_repository.py:188:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
186 |     async def get_many_with_examples(self, definitions: list[Definition]) -> list[dict[str, Any]]:
187 |         """Get multiple definitions with expanded examples efficiently."""
188 |         from ...models import Example
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
189 |
190 |         # Collect all example IDs
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/example_repository.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
6 | from pydantic import BaseModel, Field
7 |
8 | from ...models import Example, LiteratureSource
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
9 | from ..core.base import BaseRepository
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/example_repository.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
6 | from pydantic import BaseModel, Field
7 |
8 | from ...models import Example, LiteratureSource
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
9 | from ..core.base import BaseRepository
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/example_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
8 | from ...models import Example, LiteratureSource
9 | from ..core.base import BaseRepository
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/example_repository.py:115:9: PIE790 [*] Unnecessary `pass` statement
    |
113 |     async def _cascade_delete(self, example: Example) -> None:
114 |         """No cascade needed for examples."""
115 |         pass
    |         ^^^^ PIE790
    |
    = help: Remove unnecessary `pass`

src/floridify/api/repositories/fact_repository.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from pydantic import BaseModel, Field
6 |
7 | from ...models import Fact
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
8 | from ..core.base import BaseRepository
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/fact_repository.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
7 | from ...models import Fact
8 | from ..core.base import BaseRepository
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/fact_repository.py:80:9: PIE790 [*] Unnecessary `pass` statement
   |
78 |     async def _cascade_delete(self, fact: Fact) -> None:
79 |         """No cascade needed for facts."""
80 |         pass
   |         ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/api/repositories/synthesis_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from pydantic import BaseModel, Field
 8 |
 9 | from ...models import Etymology, ModelInfo, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/synthesis_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from pydantic import BaseModel, Field
 8 |
 9 | from ...models import Etymology, ModelInfo, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/synthesis_repository.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from pydantic import BaseModel, Field
 8 |
 9 | from ...models import Etymology, ModelInfo, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/synthesis_repository.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ...models import Etymology, ModelInfo, SynthesizedDictionaryEntry
10 | from ..core.base import BaseRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/synthesis_repository.py:109:19: TRY003 Avoid specifying long messages outside the exception class
    |
107 |         entry = await self.get(entry_id, raise_on_missing=True)
108 |         if entry is None:
109 |             raise ValueError(f"Entry with id {entry_id} not found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
110 |
111 |         # Calculate completeness
    |

src/floridify/api/repositories/synthesis_repository.py:109:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
107 |         entry = await self.get(entry_id, raise_on_missing=True)
108 |         if entry is None:
109 |             raise ValueError(f"Entry with id {entry_id} not found")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
110 |
111 |         # Calculate completeness
    |
    = help: Assign to variable; remove f-string literal

src/floridify/api/repositories/synthesis_repository.py:129:53: Q000 [*] Single quotes found but double quotes preferred
    |
127 |             completeness_score=completeness,
128 |             last_updated=entry.updated_at,
129 |             model_version=getattr(entry.model_info, 'model', None) if entry.model_info else None,
    |                                                     ^^^^^^^ Q000
130 |         )
    |
    = help: Replace single quotes with double quotes

src/floridify/api/repositories/synthesis_repository.py:153:19: TRY003 Avoid specifying long messages outside the exception class
    |
151 |         entry = await self.get(entry_id, raise_on_missing=True)
152 |         if entry is None:
153 |             raise ValueError(f"Entry with id {entry_id} not found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
154 |         entry.accessed_at = datetime.utcnow()
155 |         entry.access_count += 1
    |

src/floridify/api/repositories/synthesis_repository.py:153:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
151 |         entry = await self.get(entry_id, raise_on_missing=True)
152 |         if entry is None:
153 |             raise ValueError(f"Entry with id {entry_id} not found")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
154 |         entry.accessed_at = datetime.utcnow()
155 |         entry.access_count += 1
    |
    = help: Assign to variable; remove f-string literal

src/floridify/api/repositories/synthesis_repository.py:154:29: DTZ003 `datetime.datetime.utcnow()` used
    |
152 |         if entry is None:
153 |             raise ValueError(f"Entry with id {entry_id} not found")
154 |         entry.accessed_at = datetime.utcnow()
    |                             ^^^^^^^^^^^^^^^^^ DTZ003
155 |         entry.access_count += 1
156 |         await entry.save()
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src/floridify/api/repositories/synthesis_repository.py:160:9: PIE790 [*] Unnecessary `pass` statement
    |
158 |     async def _cascade_delete(self, entry: SynthesizedDictionaryEntry) -> None:
159 |         """Delete is handled at word level, no cascade needed here."""
160 |         pass
    |         ^^^^ PIE790
    |
    = help: Remove unnecessary `pass`

src/floridify/api/repositories/word_repository.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from pydantic import BaseModel, Field
 9 |
10 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...models import Word
12 | from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...constants import Language
11 | from ...models import Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..core.base import BaseRepository
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...constants import Language
11 | from ...models import Word
12 | from ..core.base import BaseRepository
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:99:9: PLC0415 `import` should be at the top-level of a file
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ PLC0415
107 |
108 |           # Delete all related documents
    |

src/floridify/api/repositories/word_repository.py:99:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ TID252
107 |
108 |           # Delete all related documents
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:99:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ TID252
107 |
108 |           # Delete all related documents
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:99:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ TID252
107 |
108 |           # Delete all related documents
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:99:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ TID252
107 |
108 |           # Delete all related documents
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:99:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ TID252
107 |
108 |           # Delete all related documents
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:99:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
 97 |       async def _cascade_delete(self, word: Word) -> None:
 98 |           """Delete related documents when deleting a word."""
 99 | /         from ...models import (
100 | |             Definition,
101 | |             Example,
102 | |             Fact,
103 | |             Pronunciation,
104 | |             ProviderData,
105 | |             SynthesizedDictionaryEntry,
106 | |         )
    | |_________^ TID252
107 |
108 |           # Delete all related documents
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:118:9: PLC0415 `import` should be at the top-level of a file
    |
116 |     async def get_with_counts(self, id: PydanticObjectId) -> dict[str, Any]:
117 |         """Get word with related document counts."""
118 |         from ...models import Definition, Example, Fact
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
119 |
120 |         word = await self.get(id, raise_on_missing=True)
    |

src/floridify/api/repositories/word_repository.py:118:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
116 |     async def get_with_counts(self, id: PydanticObjectId) -> dict[str, Any]:
117 |         """Get word with related document counts."""
118 |         from ...models import Definition, Example, Fact
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
119 |
120 |         word = await self.get(id, raise_on_missing=True)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:118:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
116 |     async def get_with_counts(self, id: PydanticObjectId) -> dict[str, Any]:
117 |         """Get word with related document counts."""
118 |         from ...models import Definition, Example, Fact
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
119 |
120 |         word = await self.get(id, raise_on_missing=True)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:118:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
116 |     async def get_with_counts(self, id: PydanticObjectId) -> dict[str, Any]:
117 |         """Get word with related document counts."""
118 |         from ...models import Definition, Example, Fact
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
119 |
120 |         word = await self.get(id, raise_on_missing=True)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/repositories/word_repository.py:122:19: TRY003 Avoid specifying long messages outside the exception class
    |
120 |         word = await self.get(id, raise_on_missing=True)
121 |         if word is None:
122 |             raise ValueError(f"Word with id {id} not found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
123 |         word_dict = word.model_dump()
    |

src/floridify/api/repositories/word_repository.py:122:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
120 |         word = await self.get(id, raise_on_missing=True)
121 |         if word is None:
122 |             raise ValueError(f"Word with id {id} not found")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
123 |         word_dict = word.model_dump()
    |
    = help: Assign to variable; remove f-string literal

src/floridify/api/routers/ai.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from pydantic import BaseModel, Field
10 |
11 | from ...ai.constants import SynthesisComponent
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...ai.factory import get_definition_synthesizer, get_openai_connector
13 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...ai.constants import SynthesisComponent
12 | from ...ai.factory import get_definition_synthesizer, get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...utils.logging import get_logger
14 | from ..core import ResourceResponse
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...ai.constants import SynthesisComponent
12 | from ...ai.factory import get_definition_synthesizer, get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...utils.logging import get_logger
14 | from ..core import ResourceResponse
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...ai.constants import SynthesisComponent
12 | from ...ai.factory import get_definition_synthesizer, get_openai_connector
13 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..core import ResourceResponse
15 | from ..middleware.rate_limiting import ai_limiter, get_client_key
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...ai.factory import get_definition_synthesizer, get_openai_connector
13 | from ...utils.logging import get_logger
14 | from ..core import ResourceResponse
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..middleware.rate_limiting import ai_limiter, get_client_key
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...utils.logging import get_logger
14 | from ..core import ResourceResponse
15 | from ..middleware.rate_limiting import ai_limiter, get_client_key
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 |
17 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...utils.logging import get_logger
14 | from ..core import ResourceResponse
15 | from ..middleware.rate_limiting import ai_limiter, get_client_key
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 |
17 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:635:5: PLC0415 `import` should be at the top-level of a file
    |
633 | ) -> StreamingResponse:
634 |     """Generate word suggestions with streaming progress updates."""
635 |     import asyncio
    |     ^^^^^^^^^^^^^^ PLC0415
636 |     import json
    |

src/floridify/api/routers/ai.py:636:5: PLC0415 `import` should be at the top-level of a file
    |
634 |     """Generate word suggestions with streaming progress updates."""
635 |     import asyncio
636 |     import json
    |     ^^^^^^^^^^^ PLC0415
637 |
638 |     from ...core.state_tracker import StateTracker
    |

src/floridify/api/routers/ai.py:638:5: PLC0415 `import` should be at the top-level of a file
    |
636 |     import json
637 |
638 |     from ...core.state_tracker import StateTracker
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
639 |     
640 |     # Validate count parameter
    |

src/floridify/api/routers/ai.py:638:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
636 |     import json
637 |
638 |     from ...core.state_tracker import StateTracker
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
639 |     
640 |     # Validate count parameter
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/ai.py:641:29: PLR2004 Magic value used in comparison, consider replacing `25` with a constant variable
    |
640 |     # Validate count parameter
641 |     if count < 1 or count > 25:
    |                             ^^ PLR2004
642 |         raise HTTPException(400, "Count must be between 1 and 25")
    |

src/floridify/api/routers/ai.py:653:15: ANN202 Missing return type annotation for private function `generate_suggestion_events`
    |
651 |     state_tracker = StateTracker()
652 |     
653 |     async def generate_suggestion_events():
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
654 |         """Generate SSE events for suggestion pipeline."""
655 |         async with state_tracker.subscribe() as subscriber_queue:
    |
    = help: Add return type annotation

src/floridify/api/routers/ai.py:657:23: ANN202 Missing return type annotation for private function `run_suggestion_pipeline`
    |
655 |         async with state_tracker.subscribe() as subscriber_queue:
656 |             
657 |             async def run_suggestion_pipeline():
    |                       ^^^^^^^^^^^^^^^^^^^^^^^ ANN202
658 |                 """Run the suggestion pipeline with state tracking."""
659 |                 try:
    |
    = help: Add return type annotation: `None`

src/floridify/api/routers/ai.py:692:13: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
691 |             # Start pipeline in background
692 |             asyncio.create_task(run_suggestion_pipeline())
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
693 |             
694 |             # Stream state updates from the queue
    |

src/floridify/api/routers/audio.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from fastapi.responses import FileResponse
 9 |
10 | from ...models import AudioMedia
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...utils.paths import get_project_root
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/audio.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...models import AudioMedia
11 | from ...utils.paths import get_project_root
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 |
13 | router = APIRouter(prefix="/audio", tags=["audio"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/audio.py:78:13: TRY301 Abstract `raise` to an inner function
   |
76 |         cache_dir = cache_dir.resolve()
77 |         if not str(file_path).startswith(str(cache_dir)):
78 |             raise HTTPException(status_code=403, detail="Access denied")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
79 |     except Exception:
80 |         raise HTTPException(status_code=404, detail="Invalid file path")
   |

src/floridify/api/routers/audio.py:80:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
78 |             raise HTTPException(status_code=403, detail="Access denied")
79 |     except Exception:
80 |         raise HTTPException(status_code=404, detail="Invalid file path")
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
81 |
82 |     # Verify the file exists
   |

src/floridify/api/routers/batch.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from pydantic import BaseModel, Field
11 |
12 | from ...core.lookup_pipeline import lookup_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | logger = logging.getLogger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/batch.py:103:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
101 |             except Exception as e:
102 |                 errors[word] = str(e)
103 |                 logger.error(f"Error looking up '{word}': {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
104 |
105 |         return {
    |
    = help: Replace with `exception`

src/floridify/api/routers/batch.py:103:30: G004 Logging statement uses f-string
    |
101 |             except Exception as e:
102 |                 errors[word] = str(e)
103 |                 logger.error(f"Error looking up '{word}': {e}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
104 |
105 |         return {
    |

src/floridify/api/routers/batch.py:116:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
115 |     except Exception as e:
116 |         logger.error(f"Batch lookup error: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
117 |         raise HTTPException(status_code=500, detail=str(e))
    |
    = help: Replace with `exception`

src/floridify/api/routers/batch.py:116:22: G004 Logging statement uses f-string
    |
115 |     except Exception as e:
116 |         logger.error(f"Batch lookup error: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
117 |         raise HTTPException(status_code=500, detail=str(e))
    |

src/floridify/api/routers/batch.py:117:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
115 |     except Exception as e:
116 |         logger.error(f"Batch lookup error: {e}")
117 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/batch.py:129:17: PLC0415 `import` should be at the top-level of a file
    |
127 |             try:
128 |                 # Get entry
129 |                 from ...storage.mongodb import get_synthesized_entry
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
130 |
131 |                 entry = await get_synthesized_entry(update.word)
    |

src/floridify/api/routers/batch.py:129:17: TID252 Prefer absolute imports over relative imports from parent modules
    |
127 |             try:
128 |                 # Get entry
129 |                 from ...storage.mongodb import get_synthesized_entry
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
130 |
131 |                 entry = await get_synthesized_entry(update.word)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/batch.py:162:17: PLC0415 `import` should be at the top-level of a file
    |
161 |                 # Save
162 |                 from ...storage.mongodb import save_synthesized_entry
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
163 |
164 |                 await save_synthesized_entry(entry)
    |

src/floridify/api/routers/batch.py:162:17: TID252 Prefer absolute imports over relative imports from parent modules
    |
161 |                 # Save
162 |                 from ...storage.mongodb import save_synthesized_entry
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
163 |
164 |                 await save_synthesized_entry(entry)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/batch.py:192:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
191 |     except Exception as e:
192 |         logger.error(f"Batch update error: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
193 |         raise HTTPException(status_code=500, detail=str(e))
    |
    = help: Replace with `exception`

src/floridify/api/routers/batch.py:192:22: G004 Logging statement uses f-string
    |
191 |     except Exception as e:
192 |         logger.error(f"Batch update error: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
193 |         raise HTTPException(status_code=500, detail=str(e))
    |

src/floridify/api/routers/batch.py:193:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
191 |     except Exception as e:
192 |         logger.error(f"Batch update error: {e}")
193 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/batch.py:232:59: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
230 |             results.append(result)
231 |
232 |             if request.stop_on_error and result.status >= 400:
    |                                                           ^^^ PLR2004
233 |                 break
    |

src/floridify/api/routers/batch.py:238:49: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
236 |     summary = {
237 |         "total": len(results),
238 |         "successful": sum(1 for r in results if 200 <= r.status < 300),
    |                                                 ^^^ PLR2004
239 |         "failed": sum(1 for r in results if r.status >= 400),
240 |     }
    |

src/floridify/api/routers/batch.py:238:67: PLR2004 Magic value used in comparison, consider replacing `300` with a constant variable
    |
236 |     summary = {
237 |         "total": len(results),
238 |         "successful": sum(1 for r in results if 200 <= r.status < 300),
    |                                                                   ^^^ PLR2004
239 |         "failed": sum(1 for r in results if r.status >= 400),
240 |     }
    |

src/floridify/api/routers/batch.py:239:57: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
237 |         "total": len(results),
238 |         "successful": sum(1 for r in results if 200 <= r.status < 300),
239 |         "failed": sum(1 for r in results if r.status >= 400),
    |                                                         ^^^ PLR2004
240 |     }
    |

src/floridify/api/routers/corpus.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from pydantic import BaseModel, Field
13 |
14 | from ...search.corpus import get_corpus_cache
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/corpus.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ...search.corpus import get_corpus_cache
15 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 |
17 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/corpus.py:94:13: TRY301 Abstract `raise` to an inner function
   |
92 |         metadata = cache.get_corpus_info(corpus_id)
93 |         if not metadata:
94 |             raise HTTPException(status_code=500, detail="Failed to create corpus")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
95 |
96 |         return CreateCorpusResponse(
   |

src/floridify/api/routers/corpus.py:104:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
103 |     except Exception as e:
104 |         logger.error(f"Failed to create corpus: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
105 |         raise HTTPException(status_code=500, detail=f"Failed to create corpus: {e}")
    |
    = help: Replace with `exception`

src/floridify/api/routers/corpus.py:104:22: G004 Logging statement uses f-string
    |
103 |     except Exception as e:
104 |         logger.error(f"Failed to create corpus: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
105 |         raise HTTPException(status_code=500, detail=f"Failed to create corpus: {e}")
    |

src/floridify/api/routers/corpus.py:105:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
103 |     except Exception as e:
104 |         logger.error(f"Failed to create corpus: {e}")
105 |         raise HTTPException(status_code=500, detail=f"Failed to create corpus: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/corpus.py:134:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
132 |     except ValueError as e:
133 |         # Corpus not found or expired
134 |         raise HTTPException(status_code=404, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
135 |     except Exception as e:
136 |         logger.error(f"Failed to search corpus {corpus_id}: {e}")
    |

src/floridify/api/routers/corpus.py:136:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
134 |         raise HTTPException(status_code=404, detail=str(e))
135 |     except Exception as e:
136 |         logger.error(f"Failed to search corpus {corpus_id}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
137 |         raise HTTPException(status_code=500, detail=f"Search failed: {e}")
    |
    = help: Replace with `exception`

src/floridify/api/routers/corpus.py:136:22: G004 Logging statement uses f-string
    |
134 |         raise HTTPException(status_code=404, detail=str(e))
135 |     except Exception as e:
136 |         logger.error(f"Failed to search corpus {corpus_id}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
137 |         raise HTTPException(status_code=500, detail=f"Search failed: {e}")
    |

src/floridify/api/routers/corpus.py:137:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
135 |     except Exception as e:
136 |         logger.error(f"Failed to search corpus {corpus_id}: {e}")
137 |         raise HTTPException(status_code=500, detail=f"Search failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/corpus.py:152:13: TRY301 Abstract `raise` to an inner function
    |
151 |         if not metadata:
152 |             raise HTTPException(status_code=404, detail=f"Corpus {corpus_id} not found or expired")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
153 |
154 |         return CorpusInfoResponse(
    |

src/floridify/api/routers/corpus.py:168:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
166 |         raise
167 |     except Exception as e:
168 |         logger.error(f"Failed to get corpus info: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
169 |         raise HTTPException(status_code=500, detail="Failed to get corpus info")
    |
    = help: Replace with `exception`

src/floridify/api/routers/corpus.py:168:22: G004 Logging statement uses f-string
    |
166 |         raise
167 |     except Exception as e:
168 |         logger.error(f"Failed to get corpus info: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
169 |         raise HTTPException(status_code=500, detail="Failed to get corpus info")
    |

src/floridify/api/routers/corpus.py:169:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
167 |     except Exception as e:
168 |         logger.error(f"Failed to get corpus info: {e}")
169 |         raise HTTPException(status_code=500, detail="Failed to get corpus info")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/corpus.py:201:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
200 |     except Exception as e:
201 |         logger.error(f"Failed to list corpora: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
202 |         raise HTTPException(status_code=500, detail="Failed to list corpora")
    |
    = help: Replace with `exception`

src/floridify/api/routers/corpus.py:201:22: G004 Logging statement uses f-string
    |
200 |     except Exception as e:
201 |         logger.error(f"Failed to list corpora: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
202 |         raise HTTPException(status_code=500, detail="Failed to list corpora")
    |

src/floridify/api/routers/corpus.py:202:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
200 |     except Exception as e:
201 |         logger.error(f"Failed to list corpora: {e}")
202 |         raise HTTPException(status_code=500, detail="Failed to list corpora")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/corpus.py:221:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
220 |     except Exception as e:
221 |         logger.error(f"Failed to get cache stats: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
222 |         raise HTTPException(status_code=500, detail="Failed to get cache stats")
    |
    = help: Replace with `exception`

src/floridify/api/routers/corpus.py:221:22: G004 Logging statement uses f-string
    |
220 |     except Exception as e:
221 |         logger.error(f"Failed to get cache stats: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
222 |         raise HTTPException(status_code=500, detail="Failed to get cache stats")
    |

src/floridify/api/routers/corpus.py:222:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
220 |     except Exception as e:
221 |         logger.error(f"Failed to get cache stats: {e}")
222 |         raise HTTPException(status_code=500, detail="Failed to get cache stats")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/definitions.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from pydantic import BaseModel, Field
 8 |
 9 | from ...ai import get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ...ai.synthesis_functions import (
11 |     assess_collocations,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ...ai import get_openai_connector
10 | / from ...ai.synthesis_functions import (
11 | |     assess_collocations,
12 | |     assess_definition_cefr,
13 | |     assess_definition_domain,
14 | |     assess_definition_frequency,
15 | |     assess_grammar_patterns,
16 | |     assess_regional_variants,
17 | |     classify_definition_register,
18 | |     enhance_definitions_parallel,
19 | |     generate_examples,
20 | |     synthesize_antonyms,
21 | |     synthesize_synonyms,
22 | |     usage_note_generation,
23 | | )
   | |_^ TID252
24 |   from ...models import Definition, Word
25 |   from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:24:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
22 |     usage_note_generation,
23 | )
24 | from ...models import Definition, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
25 | from ..core import (
26 |     ErrorDetail,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:24:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
22 |     usage_note_generation,
23 | )
24 | from ...models import Definition, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
25 | from ..core import (
26 |     ErrorDetail,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |   )
24 |   from ...models import Definition, Word
25 | / from ..core import (
26 | |     ErrorDetail,
27 | |     ErrorResponse,
28 | |     FieldSelection,
29 | |     ListResponse,
30 | |     PaginationParams,
31 | |     ResourceResponse,
32 | |     SortParams,
33 | |     check_etag,
34 | |     get_etag,
35 | |     handle_api_errors,
36 | | )
   | |_^ TID252
37 |   from ..repositories import (
38 |       DefinitionCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:37:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |       handle_api_errors,
36 |   )
37 | / from ..repositories import (
38 | |     DefinitionCreate,
39 | |     DefinitionFilter,
40 | |     DefinitionRepository,
41 | |     DefinitionUpdate,
42 | | )
   | |_^ TID252
43 |
44 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:37:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |       handle_api_errors,
36 |   )
37 | / from ..repositories import (
38 | |     DefinitionCreate,
39 | |     DefinitionFilter,
40 | |     DefinitionRepository,
41 | |     DefinitionUpdate,
42 | | )
   | |_^ TID252
43 |
44 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:37:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |       handle_api_errors,
36 |   )
37 | / from ..repositories import (
38 | |     DefinitionCreate,
39 | |     DefinitionFilter,
40 | |     DefinitionRepository,
41 | |     DefinitionUpdate,
42 | | )
   | |_^ TID252
43 |
44 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:37:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
35 |       handle_api_errors,
36 |   )
37 | / from ..repositories import (
38 | |     DefinitionCreate,
39 | |     DefinitionFilter,
40 | |     DefinitionRepository,
41 | |     DefinitionUpdate,
42 | | )
   | |_^ TID252
43 |
44 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:98:11: PLR0913 Too many arguments in function definition (11 > 5)
    |
 97 | @router.get("", response_model=ListResponse[Definition])
 98 | async def list_definitions(
    |           ^^^^^^^^^^^^^^^^ PLR0913
 99 |     repo: DefinitionRepository = Depends(get_definition_repo),
100 |     pagination: PaginationParams = Depends(get_pagination),
    |

src/floridify/api/routers/definitions.py:99:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
 97 | @router.get("", response_model=ListResponse[Definition])
 98 | async def list_definitions(
 99 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
100 |     pagination: PaginationParams = Depends(get_pagination),
101 |     sort: SortParams = Depends(get_sort),
    |

src/floridify/api/routers/definitions.py:100:36: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
 98 | async def list_definitions(
 99 |     repo: DefinitionRepository = Depends(get_definition_repo),
100 |     pagination: PaginationParams = Depends(get_pagination),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^ B008
101 |     sort: SortParams = Depends(get_sort),
102 |     fields: FieldSelection = Depends(get_fields),
    |

src/floridify/api/routers/definitions.py:101:24: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
 99 |     repo: DefinitionRepository = Depends(get_definition_repo),
100 |     pagination: PaginationParams = Depends(get_pagination),
101 |     sort: SortParams = Depends(get_sort),
    |                        ^^^^^^^^^^^^^^^^^ B008
102 |     fields: FieldSelection = Depends(get_fields),
103 |     # Filter parameters
    |

src/floridify/api/routers/definitions.py:102:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
100 |     pagination: PaginationParams = Depends(get_pagination),
101 |     sort: SortParams = Depends(get_sort),
102 |     fields: FieldSelection = Depends(get_fields),
    |                              ^^^^^^^^^^^^^^^^^^^ B008
103 |     # Filter parameters
104 |     word_id: str | None = Query(None),
    |

src/floridify/api/routers/definitions.py:167:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
165 | async def create_definition(
166 |     data: DefinitionCreate,
167 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
168 | ) -> ResourceResponse:
169 |     """Create definition entry.
    |

src/floridify/api/routers/definitions.py:195:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
193 |     request: Request,
194 |     response: Response,
195 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
196 |     fields: FieldSelection = Depends(get_fields),
197 | ) -> Response | ResourceResponse:
    |

src/floridify/api/routers/definitions.py:196:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
194 |     response: Response,
195 |     repo: DefinitionRepository = Depends(get_definition_repo),
196 |     fields: FieldSelection = Depends(get_fields),
    |                              ^^^^^^^^^^^^^^^^^^^ B008
197 | ) -> Response | ResourceResponse:
198 |     """Retrieve definition with optional expansions.
    |

src/floridify/api/routers/definitions.py:251:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
249 |     data: DefinitionUpdate,
250 |     version: int | None = Query(None, description="Version for optimistic locking"),
251 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
252 | ) -> ResourceResponse:
253 |     """Update definition with version control.
    |

src/floridify/api/routers/definitions.py:280:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
278 |     definition_id: PydanticObjectId,
279 |     cascade: bool = Query(False, description="Delete related examples"),
280 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
281 | ) -> None:
282 |     """Delete definition.
    |

src/floridify/api/routers/definitions.py:292:11: PLR0912 Too many branches (14 > 12)
    |
290 | @router.post("/{definition_id}/regenerate", response_model=ResourceResponse)
291 | @handle_api_errors
292 | async def regenerate_components(
    |           ^^^^^^^^^^^^^^^^^^^^^ PLR0912
293 |     definition_id: PydanticObjectId,
294 |     request: ComponentRegenerationRequest,
    |

src/floridify/api/routers/definitions.py:295:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
293 |     definition_id: PydanticObjectId,
294 |     request: ComponentRegenerationRequest,
295 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
296 | ) -> ResourceResponse:
297 |     """AI-regenerate definition components.
    |

src/floridify/api/routers/definitions.py:355:5: PLC0415 `import` should be at the top-level of a file
    |
354 |     # Get word for context
355 |     from ...models import Word
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
356 |
357 |     word = await Word.get(definition.word_id)
    |

src/floridify/api/routers/definitions.py:355:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
354 |     # Get word for context
355 |     from ...models import Word
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
356 |
357 |     word = await Word.get(definition.word_id)
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:381:13: PLC0415 `import` should be at the top-level of a file
    |
379 |         if component == "examples":
380 |             # Special handling for examples
381 |             from ...models import Example
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
382 |
383 |             # Generate examples using AI connector
    |

src/floridify/api/routers/definitions.py:381:13: TID252 Prefer absolute imports over relative imports from parent modules
    |
379 |         if component == "examples":
380 |             # Special handling for examples
381 |             from ...models import Example
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
382 |
383 |             # Generate examples using AI connector
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/definitions.py:446:34: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
444 | async def batch_regenerate_components(
445 |     request: BatchComponentUpdate,
446 |     repo: DefinitionRepository = Depends(get_definition_repo),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
447 | ) -> dict[str, Any]:
448 |     """Batch AI-regenerate components.
    |

src/floridify/api/routers/definitions.py:470:5: PLC0415 `import` should be at the top-level of a file
    |
469 |     # Group definitions by word
470 |     from collections import defaultdict
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
471 |
472 |     definitions_by_word = defaultdict(list)
    |

src/floridify/api/routers/examples.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from pydantic import BaseModel, Field
 8 |
 9 | from ...ai import get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ...ai.synthesis_functions import generate_examples
11 | from ...models import Definition, Example, Word
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ...ai import get_openai_connector
10 | from ...ai.synthesis_functions import generate_examples
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...models import Definition, Example, Word
12 | from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ...ai import get_openai_connector
10 | from ...ai.synthesis_functions import generate_examples
11 | from ...models import Definition, Example, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..core import (
13 |     FieldSelection,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ...ai import get_openai_connector
10 | from ...ai.synthesis_functions import generate_examples
11 | from ...models import Definition, Example, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..core import (
13 |     FieldSelection,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ...ai import get_openai_connector
10 | from ...ai.synthesis_functions import generate_examples
11 | from ...models import Definition, Example, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..core import (
13 |     FieldSelection,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 |   from ...ai.synthesis_functions import generate_examples
11 |   from ...models import Definition, Example, Word
12 | / from ..core import (
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories.example_repository import (
23 |       ExampleCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories.example_repository import (
23 | |     ExampleCreate,
24 | |     ExampleFilter,
25 | |     ExampleRepository,
26 | |     ExampleUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter(prefix="/examples", tags=["examples"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories.example_repository import (
23 | |     ExampleCreate,
24 | |     ExampleFilter,
25 | |     ExampleRepository,
26 | |     ExampleUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter(prefix="/examples", tags=["examples"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories.example_repository import (
23 | |     ExampleCreate,
24 | |     ExampleFilter,
25 | |     ExampleRepository,
26 | |     ExampleUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter(prefix="/examples", tags=["examples"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories.example_repository import (
23 | |     ExampleCreate,
24 | |     ExampleFilter,
25 | |     ExampleRepository,
26 | |     ExampleUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter(prefix="/examples", tags=["examples"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/examples.py:81:11: PLR0913 Too many arguments in function definition (10 > 5)
   |
80 | @router.get("", response_model=ListResponse[Example])
81 | async def list_examples(
   |           ^^^^^^^^^^^^^ PLR0913
82 |     repo: ExampleRepository = Depends(get_example_repo),
83 |     pagination: PaginationParams = Depends(get_pagination),
   |

src/floridify/api/routers/examples.py:82:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
80 | @router.get("", response_model=ListResponse[Example])
81 | async def list_examples(
82 |     repo: ExampleRepository = Depends(get_example_repo),
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
83 |     pagination: PaginationParams = Depends(get_pagination),
84 |     sort: SortParams = Depends(get_sort),
   |

src/floridify/api/routers/examples.py:83:36: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
81 | async def list_examples(
82 |     repo: ExampleRepository = Depends(get_example_repo),
83 |     pagination: PaginationParams = Depends(get_pagination),
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^ B008
84 |     sort: SortParams = Depends(get_sort),
85 |     fields: FieldSelection = Depends(get_fields),
   |

src/floridify/api/routers/examples.py:84:24: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
82 |     repo: ExampleRepository = Depends(get_example_repo),
83 |     pagination: PaginationParams = Depends(get_pagination),
84 |     sort: SortParams = Depends(get_sort),
   |                        ^^^^^^^^^^^^^^^^^ B008
85 |     fields: FieldSelection = Depends(get_fields),
86 |     # Filter parameters
   |

src/floridify/api/routers/examples.py:85:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
83 |     pagination: PaginationParams = Depends(get_pagination),
84 |     sort: SortParams = Depends(get_sort),
85 |     fields: FieldSelection = Depends(get_fields),
   |                              ^^^^^^^^^^^^^^^^^^^ B008
86 |     # Filter parameters
87 |     word_id: str | None = Query(None),
   |

src/floridify/api/routers/examples.py:134:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
132 | async def create_example(
133 |     data: ExampleCreate,
134 |     repo: ExampleRepository = Depends(get_example_repo),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
135 | ) -> ResourceResponse:
136 |     """Create a new example."""
    |

src/floridify/api/routers/examples.py:155:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
153 |     request: Request,
154 |     response: Response,
155 |     repo: ExampleRepository = Depends(get_example_repo),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
156 |     fields: FieldSelection = Depends(get_fields),
157 | ) -> Response | ResourceResponse:
    |

src/floridify/api/routers/examples.py:156:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
154 |     response: Response,
155 |     repo: ExampleRepository = Depends(get_example_repo),
156 |     fields: FieldSelection = Depends(get_fields),
    |                              ^^^^^^^^^^^^^^^^^^^ B008
157 | ) -> Response | ResourceResponse:
158 |     """Get a single example by ID."""
    |

src/floridify/api/routers/examples.py:197:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
195 |     example_id: PydanticObjectId,
196 |     data: ExampleUpdate,
197 |     repo: ExampleRepository = Depends(get_example_repo),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
198 | ) -> ResourceResponse:
199 |     """Update an example."""
    |

src/floridify/api/routers/examples.py:215:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
213 | async def delete_example(
214 |     example_id: PydanticObjectId,
215 |     repo: ExampleRepository = Depends(get_example_repo),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
216 | ) -> None:
217 |     """Delete an example."""
    |

src/floridify/api/routers/examples.py:226:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
224 |     definition_id: str,
225 |     request: ExampleGenerationRequest,
226 |     repo: ExampleRepository = Depends(get_example_repo),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
227 | ) -> list[ResourceResponse]:
228 |     """Generate new examples for a definition."""
    |

src/floridify/api/routers/examples.py:280:31: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
278 | async def batch_update_examples(
279 |     request: BatchExampleUpdate,
280 |     repo: ExampleRepository = Depends(get_example_repo),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ B008
281 | ) -> dict[str, Any]:
282 |     """Batch update examples."""
    |

src/floridify/api/routers/facts.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from pydantic import BaseModel, Field
6 |
7 | from ...ai import get_openai_connector
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
8 | from ...ai.synthesis_functions import generate_facts
9 | from ...models import Fact, Word
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from ...ai import get_openai_connector
 8 | from ...ai.synthesis_functions import generate_facts
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
 9 | from ...models import Fact, Word
10 | from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from ...ai import get_openai_connector
 8 | from ...ai.synthesis_functions import generate_facts
 9 | from ...models import Fact, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core import (
11 |     FieldSelection,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from ...ai import get_openai_connector
 8 | from ...ai.synthesis_functions import generate_facts
 9 | from ...models import Fact, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core import (
11 |     FieldSelection,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...ai.synthesis_functions import generate_facts
 9 |   from ...models import Fact, Word
10 | / from ..core import (
11 | |     FieldSelection,
12 | |     ListResponse,
13 | |     PaginationParams,
14 | |     ResourceResponse,
15 | |     SortParams,
16 | |     check_etag,
17 | |     get_etag,
18 | |     handle_api_errors,
19 | | )
   | |_^ TID252
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 |   from ..repositories.fact_repository import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 |     handle_api_errors,
19 | )
20 | from ..middleware.rate_limiting import ai_limiter, get_client_key
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ..repositories.fact_repository import (
22 |     FactCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 |     handle_api_errors,
19 | )
20 | from ..middleware.rate_limiting import ai_limiter, get_client_key
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ..repositories.fact_repository import (
22 |     FactCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 |   )
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 | / from ..repositories.fact_repository import (
22 | |     FactCreate,
23 | |     FactFilter,
24 | |     FactRepository,
25 | |     FactUpdate,
26 | | )
   | |_^ TID252
27 |
28 |   router = APIRouter(prefix="/facts", tags=["facts"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 |   )
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 | / from ..repositories.fact_repository import (
22 | |     FactCreate,
23 | |     FactFilter,
24 | |     FactRepository,
25 | |     FactUpdate,
26 | | )
   | |_^ TID252
27 |
28 |   router = APIRouter(prefix="/facts", tags=["facts"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 |   )
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 | / from ..repositories.fact_repository import (
22 | |     FactCreate,
23 | |     FactFilter,
24 | |     FactRepository,
25 | |     FactUpdate,
26 | | )
   | |_^ TID252
27 |
28 |   router = APIRouter(prefix="/facts", tags=["facts"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 |   )
20 |   from ..middleware.rate_limiting import ai_limiter, get_client_key
21 | / from ..repositories.fact_repository import (
22 | |     FactCreate,
23 | |     FactFilter,
24 | |     FactRepository,
25 | |     FactUpdate,
26 | | )
   | |_^ TID252
27 |
28 |   router = APIRouter(prefix="/facts", tags=["facts"])
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/facts.py:79:11: PLR0913 Too many arguments in function definition (8 > 5)
   |
78 | @router.get("", response_model=ListResponse[Fact])
79 | async def list_facts(
   |           ^^^^^^^^^^ PLR0913
80 |     repo: FactRepository = Depends(get_fact_repo),
81 |     pagination: PaginationParams = Depends(get_pagination),
   |

src/floridify/api/routers/facts.py:80:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
78 | @router.get("", response_model=ListResponse[Fact])
79 | async def list_facts(
80 |     repo: FactRepository = Depends(get_fact_repo),
   |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
81 |     pagination: PaginationParams = Depends(get_pagination),
82 |     sort: SortParams = Depends(get_sort),
   |

src/floridify/api/routers/facts.py:81:36: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
79 | async def list_facts(
80 |     repo: FactRepository = Depends(get_fact_repo),
81 |     pagination: PaginationParams = Depends(get_pagination),
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^ B008
82 |     sort: SortParams = Depends(get_sort),
83 |     fields: FieldSelection = Depends(get_fields),
   |

src/floridify/api/routers/facts.py:82:24: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
80 |     repo: FactRepository = Depends(get_fact_repo),
81 |     pagination: PaginationParams = Depends(get_pagination),
82 |     sort: SortParams = Depends(get_sort),
   |                        ^^^^^^^^^^^^^^^^^ B008
83 |     fields: FieldSelection = Depends(get_fields),
84 |     # Filter parameters
   |

src/floridify/api/routers/facts.py:83:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
81 |     pagination: PaginationParams = Depends(get_pagination),
82 |     sort: SortParams = Depends(get_sort),
83 |     fields: FieldSelection = Depends(get_fields),
   |                              ^^^^^^^^^^^^^^^^^^^ B008
84 |     # Filter parameters
85 |     word_id: str | None = Query(None),
   |

src/floridify/api/routers/facts.py:134:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
132 | async def create_fact(
133 |     data: FactCreate,
134 |     repo: FactRepository = Depends(get_fact_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
135 | ) -> ResourceResponse:
136 |     """Create a new fact."""
    |

src/floridify/api/routers/facts.py:154:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
152 |     request: Request,
153 |     response: Response,
154 |     repo: FactRepository = Depends(get_fact_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
155 |     fields: FieldSelection = Depends(get_fields),
156 | ) -> Response | ResourceResponse:
    |

src/floridify/api/routers/facts.py:155:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
153 |     response: Response,
154 |     repo: FactRepository = Depends(get_fact_repo),
155 |     fields: FieldSelection = Depends(get_fields),
    |                              ^^^^^^^^^^^^^^^^^^^ B008
156 | ) -> Response | ResourceResponse:
157 |     """Get a single fact by ID."""
    |

src/floridify/api/routers/facts.py:195:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
193 |     fact_id: PydanticObjectId,
194 |     data: FactUpdate,
195 |     repo: FactRepository = Depends(get_fact_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
196 | ) -> ResourceResponse:
197 |     """Update a fact."""
    |

src/floridify/api/routers/facts.py:213:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
211 | async def delete_fact(
212 |     fact_id: PydanticObjectId,
213 |     repo: FactRepository = Depends(get_fact_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
214 | ) -> None:
215 |     """Delete a fact."""
    |

src/floridify/api/routers/facts.py:226:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
224 |     request: Request,
225 |     background_tasks: BackgroundTasks,
226 |     repo: FactRepository = Depends(get_fact_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
227 | ) -> list[ResourceResponse]:
228 |     """Generate interesting facts about a word."""
    |

src/floridify/api/routers/facts.py:298:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
296 |     category: str,
297 |     limit: int = Query(50, ge=1, le=200),
298 |     repo: FactRepository = Depends(get_fact_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
299 | ) -> ListResponse[Fact]:
300 |     """Get facts by category across all words."""
    |

src/floridify/api/routers/health.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from pydantic import BaseModel, Field
10 |
11 | from ...caching.cache_manager import get_cache_manager
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...constants import Language
13 | from ...core.search_pipeline import get_search_engine
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/health.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...caching.cache_manager import get_cache_manager
12 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...core.search_pipeline import get_search_engine
14 | from ...storage.mongodb import _ensure_initialized, get_storage
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/health.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...caching.cache_manager import get_cache_manager
12 | from ...constants import Language
13 | from ...core.search_pipeline import get_search_engine
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ...storage.mongodb import _ensure_initialized, get_storage
15 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/health.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...constants import Language
13 | from ...core.search_pipeline import get_search_engine
14 | from ...storage.mongodb import _ensure_initialized, get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/health.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...constants import Language
13 | from ...core.search_pipeline import get_search_engine
14 | from ...storage.mongodb import _ensure_initialized, get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/health.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...core.search_pipeline import get_search_engine
14 | from ...storage.mongodb import _ensure_initialized, get_storage
15 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 |
17 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/health.py:55:9: SIM108 Use ternary operator `database_status = "connected" if await storage.ensure_healthy_connection() else "unhealthy"` instead of `if`-`else`-block
   |
54 |           # Check connection health
55 | /         if await storage.ensure_healthy_connection():
56 | |             database_status = "connected"
57 | |         else:
58 | |             database_status = "unhealthy"
   | |_________________________________________^ SIM108
59 |
60 |           # Get connection pool statistics
   |
   = help: Replace `if`-`else`-block with `database_status = "connected" if await storage.ensure_healthy_connection() else "unhealthy"`

src/floridify/api/routers/health.py:64:24: G004 Logging statement uses f-string
   |
63 |     except Exception as e:
64 |         logger.warning(f"Database health check failed: {e}")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
65 |         connection_pool_stats = {"status": "error", "error": str(e)}
   |

src/floridify/api/routers/health.py:71:12: SLF001 Private member accessed: `_initialized`
   |
69 |     try:
70 |         search_engine = await get_search_engine([Language.ENGLISH])
71 |         if search_engine._initialized:
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
72 |             search_status = "initialized"
73 |     except Exception as e:
   |

src/floridify/api/routers/health.py:74:24: G004 Logging statement uses f-string
   |
72 |             search_status = "initialized"
73 |     except Exception as e:
74 |         logger.warning(f"Search engine health check failed: {e}")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
75 |
76 |     # Check cache system
   |

src/floridify/api/routers/health.py:89:24: G004 Logging statement uses f-string
   |
87 |             cache_hit_rate = max(0.0, (memory_entries - expired_entries) / memory_entries)
88 |     except Exception as e:
89 |         logger.warning(f"Cache health check failed: {e}")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
90 |
91 |     # Calculate uptime
   |

src/floridify/api/routers/lookup.py:8:29: TC003 Move standard library import `collections.abc.AsyncGenerator` into a type-checking block
   |
 6 | import json
 7 | import time
 8 | from collections.abc import AsyncGenerator
   |                             ^^^^^^^^^^^^^^ TC003
 9 | from datetime import datetime
10 | from typing import Any
   |
   = help: Move into type-checking block

src/floridify/api/routers/lookup.py:9:22: TC003 Move standard library import `datetime.datetime` into a type-checking block
   |
 7 | import time
 8 | from collections.abc import AsyncGenerator
 9 | from datetime import datetime
   |                      ^^^^^^^^ TC003
10 | from typing import Any
   |
   = help: Move into type-checking block

src/floridify/api/routers/lookup.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from pydantic import BaseModel, Field
16 |
17 | from ...caching import cached_api_call_with_dedup
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 | from ...constants import DictionaryProvider, Language
19 | from ...core.lookup_pipeline import lookup_word_pipeline
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 | from ...caching import cached_api_call_with_dedup
18 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 | from ...caching import cached_api_call_with_dedup
18 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 | from ...caching import cached_api_call_with_dedup
18 | from ...constants import DictionaryProvider, Language
19 | from ...core.lookup_pipeline import lookup_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ...constants import DictionaryProvider, Language
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
22 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ...constants import DictionaryProvider, Language
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
22 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...core.lookup_pipeline import lookup_word_pipeline
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...core.state_tracker import Stages, lookup_state_tracker
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
22 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from ...utils.sanitization import validate_word_input
24 | from .common import PipelineMetrics
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 | from ...models import AudioMedia, Definition, Example, Pronunciation, ProviderData, Word
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
24 | from .common import PipelineMetrics
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/lookup.py:24:21: TC001 Move application import `.common.PipelineMetrics` into a type-checking block
   |
22 | from ...utils.logging import get_logger
23 | from ...utils.sanitization import validate_word_input
24 | from .common import PipelineMetrics
   |                     ^^^^^^^^^^^^^^^ TC001
25 |
26 | logger = get_logger(__name__)
   |
   = help: Move into type-checking block

src/floridify/api/routers/lookup.py:131:28: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
129 |           default=False, description="Force refresh of cached data"
130 |       ),
131 |       providers: list[str] = Query(
    |  ____________________________^
132 | |         default=["wiktionary"], description="Dictionary providers"
133 | |     ),
    | |_____^ B008
134 |       languages: list[str] = Query(default=["en"], description="Languages to query"),
135 |       no_ai: bool = Query(default=False, description="Skip AI synthesis"),
    |

src/floridify/api/routers/lookup.py:134:28: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
132 |         default=["wiktionary"], description="Dictionary providers"
133 |     ),
134 |     languages: list[str] = Query(default=["en"], description="Languages to query"),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
135 |     no_ai: bool = Query(default=False, description="Skip AI synthesis"),
136 | ) -> LookupParams:
    |

src/floridify/api/routers/lookup.py:145:28: G004 Logging statement uses f-string
    |
143 |         except ValueError:
144 |             # Skip invalid providers
145 |             logger.warning(f"Invalid provider: {provider_str}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
146 |
147 |     if not provider_enums:
    |

src/floridify/api/routers/lookup.py:157:28: G004 Logging statement uses f-string
    |
155 |         except ValueError:
156 |             # Skip invalid languages
157 |             logger.warning(f"Invalid language: {language_str}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
158 |
159 |     if not language_enums:
    |

src/floridify/api/routers/lookup.py:183:17: G004 Logging statement uses f-string
    |
181 | async def _cached_lookup(word: str, params: LookupParams) -> LookupResponse | None:
182 |     """Cached word lookup implementation."""
183 |     logger.info(f"Looking up word: {word}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
184 |
185 |     # Use existing lookup pipeline without state tracking for cached version
    |

src/floridify/api/routers/lookup.py:276:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
274 | async def lookup_word(
275 |     word: str,
276 |     params: LookupParams = Depends(parse_lookup_params),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
277 | ) -> LookupResponse:
278 |     """Comprehensive word definition lookup with AI-enhanced synthesis.
    |

src/floridify/api/routers/lookup.py:306:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
304 |         word = validate_word_input(word)
305 |     except ValueError as e:
306 |         raise HTTPException(400, str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
307 |
308 |     start_time = time.perf_counter()
    |

src/floridify/api/routers/lookup.py:314:13: TRY301 Abstract `raise` to an inner function
    |
313 |           if not result:
314 | /             raise HTTPException(
315 | |                 status_code=404, detail=f"No definition found for word: {word}"
316 | |             )
    | |_____________^ TRY301
317 |
318 |           # Log performance
    |

src/floridify/api/routers/lookup.py:320:21: G004 Logging statement uses f-string
    |
318 |         # Log performance
319 |         elapsed_ms = int((time.perf_counter() - start_time) * 1000)
320 |         logger.info(f"Lookup completed: {word} in {elapsed_ms}ms")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
321 |
322 |         return result
    |

src/floridify/api/routers/lookup.py:322:9: TRY300 Consider moving this statement to an `else` block
    |
320 |         logger.info(f"Lookup completed: {word} in {elapsed_ms}ms")
321 |
322 |         return result
    |         ^^^^^^^^^^^^^ TRY300
323 |
324 |     except HTTPException:
    |

src/floridify/api/routers/lookup.py:328:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
326 |         raise
327 |     except Exception as e:
328 |         logger.error(f"Lookup failed for {word}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
329 |         raise HTTPException(
330 |             status_code=500, detail=f"Internal error during lookup: {str(e)}"
    |
    = help: Replace with `exception`

src/floridify/api/routers/lookup.py:328:22: G004 Logging statement uses f-string
    |
326 |         raise
327 |     except Exception as e:
328 |         logger.error(f"Lookup failed for {word}: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
329 |         raise HTTPException(
330 |             status_code=500, detail=f"Internal error during lookup: {str(e)}"
    |

src/floridify/api/routers/lookup.py:329:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
327 |       except Exception as e:
328 |           logger.error(f"Lookup failed for {word}: {e}")
329 | /         raise HTTPException(
330 | |             status_code=500, detail=f"Internal error during lookup: {str(e)}"
331 | |         )
    | |_________^ B904
    |

src/floridify/api/routers/lookup.py:330:70: RUF010 [*] Use explicit conversion flag
    |
328 |         logger.error(f"Lookup failed for {word}: {e}")
329 |         raise HTTPException(
330 |             status_code=500, detail=f"Internal error during lookup: {str(e)}"
    |                                                                      ^^^^^^ RUF010
331 |         )
    |
    = help: Replace with conversion flag

src/floridify/api/routers/lookup.py:380:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
379 |     except Exception as e:
380 |         logger.error(f"SSE generation failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
381 |         yield f'event: error\ndata: {{"error": "{str(e)}"}}\n\n'
382 |     finally:
    |
    = help: Replace with `exception`

src/floridify/api/routers/lookup.py:380:22: G004 Logging statement uses f-string
    |
379 |     except Exception as e:
380 |         logger.error(f"SSE generation failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
381 |         yield f'event: error\ndata: {{"error": "{str(e)}"}}\n\n'
382 |     finally:
    |

src/floridify/api/routers/lookup.py:381:50: RUF010 [*] Use explicit conversion flag
    |
379 |     except Exception as e:
380 |         logger.error(f"SSE generation failed: {e}")
381 |         yield f'event: error\ndata: {{"error": "{str(e)}"}}\n\n'
    |                                                  ^^^^^^ RUF010
382 |     finally:
383 |         # Ensure the lookup task is completed or cancelled
    |
    = help: Replace with conversion flag

src/floridify/api/routers/lookup.py:386:13: SIM105 Use `contextlib.suppress(asyncio.CancelledError)` instead of `try`-`except`-`pass`
    |
384 |           if not lookup_task.done():
385 |               lookup_task.cancel()
386 | /             try:
387 | |                 await lookup_task
388 | |             except asyncio.CancelledError:
389 | |                 pass
    | |____________________^ SIM105
    |
    = help: Replace with `contextlib.suppress(asyncio.CancelledError)`

src/floridify/api/routers/lookup.py:400:17: G004 Logging statement uses f-string
    |
399 |     # Execute the actual lookup pipeline with state tracking
400 |     logger.info(f"Looking up word: {word} with state tracking")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
401 |
402 |     entry = await lookup_word_pipeline(
    |

src/floridify/api/routers/lookup.py:505:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
503 | async def lookup_word_stream(
504 |     word: str,
505 |     params: LookupParams = Depends(parse_lookup_params),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
506 | ) -> StreamingResponse:
507 |     """Stream word lookup progress via Server-Sent Events (SSE).
    |

src/floridify/api/routers/lookup.py:529:17: G004 Logging statement uses f-string
    |
527 |     """
528 |
529 |     logger.info(f"Starting streaming lookup for word: {word}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
530 |
531 |     return StreamingResponse(
    |

src/floridify/api/routers/search.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from pydantic import BaseModel, Field
 9 |
10 | from ...caching.decorators import cached_api_call
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...constants import Language
12 | from ...search.constants import SearchMethod
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/search.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...caching.decorators import cached_api_call
11 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...search.constants import SearchMethod
13 | from ...search.language import get_language_search
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/search.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...caching.decorators import cached_api_call
11 | from ...constants import Language
12 | from ...search.constants import SearchMethod
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...search.language import get_language_search
14 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/search.py:12:33: TC001 Move application import `...search.constants.SearchMethod` into a type-checking block
   |
10 | from ...caching.decorators import cached_api_call
11 | from ...constants import Language
12 | from ...search.constants import SearchMethod
   |                                 ^^^^^^^^^^^^ TC001
13 | from ...search.language import get_language_search
14 | from ...utils.logging import get_logger
   |
   = help: Move into type-checking block

src/floridify/api/routers/search.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...constants import Language
12 | from ...search.constants import SearchMethod
13 | from ...search.language import get_language_search
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/search.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...search.constants import SearchMethod
13 | from ...search.language import get_language_search
14 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/search.py:76:17: G004 Logging statement uses f-string
   |
74 | async def _cached_search(query: str, params: SearchParams) -> SearchResponse:
75 |     """Cached search implementation."""
76 |     logger.info(f"Searching for '{query}' in {params.language.value}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
77 |
78 |     try:
   |

src/floridify/api/routers/search.py:108:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
107 |     except Exception as e:
108 |         logger.error(f"Failed to search for '{query}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
109 |         raise
    |
    = help: Replace with `exception`

src/floridify/api/routers/search.py:108:22: G004 Logging statement uses f-string
    |
107 |     except Exception as e:
108 |         logger.error(f"Failed to search for '{query}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
109 |         raise
    |

src/floridify/api/routers/search.py:115:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
113 | async def search_words_query(
114 |     q: str = Query(..., description="Search query"),
115 |     params: SearchParams = Depends(parse_search_params),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
116 | ) -> SearchResponse:
117 |     """Search for words using query parameter."""
    |

src/floridify/api/routers/search.py:125:21: G004 Logging statement uses f-string
    |
123 |         # Log performance
124 |         elapsed_ms = int((time.perf_counter() - start_time) * 1000)
125 |         logger.info(f"Search completed: '{q}' -> {len(result.results)} results in {elapsed_ms}ms")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
126 |
127 |         return result
    |

src/floridify/api/routers/search.py:127:9: TRY300 Consider moving this statement to an `else` block
    |
125 |         logger.info(f"Search completed: '{q}' -> {len(result.results)} results in {elapsed_ms}ms")
126 |
127 |         return result
    |         ^^^^^^^^^^^^^ TRY300
128 |
129 |     except HTTPException:
    |

src/floridify/api/routers/search.py:132:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
130 |         raise
131 |     except Exception as e:
132 |         logger.error(f"Search failed for '{q}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
133 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/api/routers/search.py:132:22: G004 Logging statement uses f-string
    |
130 |         raise
131 |     except Exception as e:
132 |         logger.error(f"Search failed for '{q}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
133 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |

src/floridify/api/routers/search.py:133:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
131 |     except Exception as e:
132 |         logger.error(f"Search failed for '{q}': {e}")
133 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/search.py:133:86: RUF010 [*] Use explicit conversion flag
    |
131 |     except Exception as e:
132 |         logger.error(f"Search failed for '{q}': {e}")
133 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |                                                                                      ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/api/routers/search.py:139:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
137 | async def search_words_path(
138 |     query: str,
139 |     params: SearchParams = Depends(parse_search_params),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
140 | ) -> SearchResponse:
141 |     """Search for words using path parameter."""
    |

src/floridify/api/routers/search.py:150:13: G004 Logging statement uses f-string
    |
148 |         elapsed_ms = int((time.perf_counter() - start_time) * 1000)
149 |         logger.info(
150 |             f"Search completed: '{query}' -> {len(result.results)} results in {elapsed_ms}ms"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
151 |         )
    |

src/floridify/api/routers/search.py:153:9: TRY300 Consider moving this statement to an `else` block
    |
151 |         )
152 |
153 |         return result
    |         ^^^^^^^^^^^^^ TRY300
154 |
155 |     except HTTPException:
    |

src/floridify/api/routers/search.py:158:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
156 |         raise
157 |     except Exception as e:
158 |         logger.error(f"Search failed for '{query}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
159 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/api/routers/search.py:158:22: G004 Logging statement uses f-string
    |
156 |         raise
157 |     except Exception as e:
158 |         logger.error(f"Search failed for '{query}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
159 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |

src/floridify/api/routers/search.py:159:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
157 |     except Exception as e:
158 |         logger.error(f"Search failed for '{query}': {e}")
159 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/search.py:159:86: RUF010 [*] Use explicit conversion flag
    |
157 |     except Exception as e:
158 |         logger.error(f"Search failed for '{query}': {e}")
159 |         raise HTTPException(status_code=500, detail=f"Internal error during search: {str(e)}")
    |                                                                                      ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/api/routers/search.py:166:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
164 |     query: str,
165 |     limit: int = Query(default=8, ge=1, le=20, description="Maximum suggestions"),
166 |     params: SearchParams = Depends(parse_search_params),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
167 | ) -> SearchResponse:
168 |     """Get search suggestions for autocomplete (lower threshold)."""
    |

src/floridify/api/routers/search.py:184:13: G004 Logging statement uses f-string
    |
182 |         elapsed_ms = int((time.perf_counter() - start_time) * 1000)
183 |         logger.info(
184 |             f"Suggestions completed: '{query}' -> {len(result.results)} results in {elapsed_ms}ms"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
185 |         )
    |

src/floridify/api/routers/search.py:187:9: TRY300 Consider moving this statement to an `else` block
    |
185 |         )
186 |
187 |         return result
    |         ^^^^^^^^^^^^^ TRY300
188 |
189 |     except Exception as e:
    |

src/floridify/api/routers/search.py:190:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
189 |     except Exception as e:
190 |         logger.error(f"Suggestions failed for '{query}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
191 |         raise HTTPException(status_code=500, detail=f"Internal error during suggestions: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/api/routers/search.py:190:22: G004 Logging statement uses f-string
    |
189 |     except Exception as e:
190 |         logger.error(f"Suggestions failed for '{query}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
191 |         raise HTTPException(status_code=500, detail=f"Internal error during suggestions: {str(e)}")
    |

src/floridify/api/routers/search.py:191:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
189 |     except Exception as e:
190 |         logger.error(f"Suggestions failed for '{query}': {e}")
191 |         raise HTTPException(status_code=500, detail=f"Internal error during suggestions: {str(e)}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/search.py:191:91: RUF010 [*] Use explicit conversion flag
    |
189 |     except Exception as e:
190 |         logger.error(f"Suggestions failed for '{query}': {e}")
191 |         raise HTTPException(status_code=500, detail=f"Internal error during suggestions: {str(e)}")
    |                                                                                           ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/api/routers/suggestions.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from pydantic import BaseModel, Field
 9 |
10 | from ...ai.factory import get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...caching.decorators import cached_api_call
12 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/suggestions.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...ai.factory import get_openai_connector
11 | from ...caching.decorators import cached_api_call
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/suggestions.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...ai.factory import get_openai_connector
11 | from ...caching.decorators import cached_api_call
12 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/suggestions.py:38:31: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
37 | def parse_suggestions_params_get(
38 |     words: list[str] | None = Query(default=None, description="Input words to base suggestions on"),
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
39 |     count: int = Query(default=10, ge=4, le=12, description="Number of suggestions"),
40 | ) -> SuggestionsParams:
   |

src/floridify/api/routers/suggestions.py:46:33: B008 Do not perform function call `Body` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
45 | def parse_suggestions_params_post(
46 |     params: SuggestionsParams = Body(..., description="Suggestions request parameters"),
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
47 | ) -> SuggestionsParams:
48 |     """Parse and validate suggestions parameters for POST requests."""
   |

src/floridify/api/routers/suggestions.py:63:17: G004 Logging statement uses f-string
   |
61 |     """Cached suggestions implementation."""
62 |     word_count = len(params.words) if params.words else 0
63 |     logger.info(f"Generating suggestions based on {word_count} words")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
64 |
65 |     try:
   |

src/floridify/api/routers/suggestions.py:81:9: TRY400 Use `logging.exception` instead of `logging.error`
   |
80 |     except Exception as e:
81 |         logger.error(f"Failed to generate suggestions: {e}")
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
82 |         raise
   |
   = help: Replace with `exception`

src/floridify/api/routers/suggestions.py:81:22: G004 Logging statement uses f-string
   |
80 |     except Exception as e:
81 |         logger.error(f"Failed to generate suggestions: {e}")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
82 |         raise
   |

src/floridify/api/routers/suggestions.py:87:33: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
85 | @router.get("/suggestions", response_model=SuggestionsAPIResponse)
86 | async def get_suggestions_get(
87 |     params: SuggestionsParams = Depends(parse_suggestions_params_get),
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
88 | ) -> SuggestionsAPIResponse:
89 |     """Generate word suggestions via GET request (typically when no recent words available)."""
   |

src/floridify/api/routers/suggestions.py:95:33: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
93 | @router.post("/suggestions", response_model=SuggestionsAPIResponse)
94 | async def get_suggestions_post(
95 |     params: SuggestionsParams = Depends(parse_suggestions_params_post),
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
96 | ) -> SuggestionsAPIResponse:
97 |     """Generate word suggestions based on input vocabulary via POST request."""
   |

src/floridify/api/routers/suggestions.py:149:13: G004 Logging statement uses f-string
    |
147 |           word_count = len(params.words) if params.words else 0
148 |           logger.info(
149 | /             f"Suggestions completed: {word_count} words -> "
150 | |             f"{len(result.words)} suggestions in {elapsed_ms}ms "
151 | |             f"(confidence: {result.confidence:.1%})"
    | |____________________________________________________^ G004
152 |           )
    |

src/floridify/api/routers/suggestions.py:154:9: TRY300 Consider moving this statement to an `else` block
    |
152 |         )
153 |
154 |         return result
    |         ^^^^^^^^^^^^^ TRY300
155 |
156 |     except Exception as e:
    |

src/floridify/api/routers/suggestions.py:157:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
156 |     except Exception as e:
157 |         logger.error(f"Suggestions failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
158 |         raise HTTPException(
159 |             status_code=500, detail=f"Internal error generating suggestions: {str(e)}"
    |
    = help: Replace with `exception`

src/floridify/api/routers/suggestions.py:157:22: G004 Logging statement uses f-string
    |
156 |     except Exception as e:
157 |         logger.error(f"Suggestions failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
158 |         raise HTTPException(
159 |             status_code=500, detail=f"Internal error generating suggestions: {str(e)}"
    |

src/floridify/api/routers/suggestions.py:158:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
156 |       except Exception as e:
157 |           logger.error(f"Suggestions failed: {e}")
158 | /         raise HTTPException(
159 | |             status_code=500, detail=f"Internal error generating suggestions: {str(e)}"
160 | |         )
    | |_________^ B904
    |

src/floridify/api/routers/suggestions.py:159:79: RUF010 [*] Use explicit conversion flag
    |
157 |         logger.error(f"Suggestions failed: {e}")
158 |         raise HTTPException(
159 |             status_code=500, detail=f"Internal error generating suggestions: {str(e)}"
    |                                                                               ^^^^^^ RUF010
160 |         )
    |
    = help: Replace with conversion flag

src/floridify/api/routers/synonyms.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from pydantic import BaseModel, Field
 9 |
10 | from ...ai.factory import get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...caching.decorators import cached_api_call
12 | from ...constants import Language
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/synonyms.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...ai.factory import get_openai_connector
11 | from ...caching.decorators import cached_api_call
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...constants import Language
13 | from ...core.search_pipeline import find_best_match
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/synonyms.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...ai.factory import get_openai_connector
11 | from ...caching.decorators import cached_api_call
12 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...core.search_pipeline import find_best_match
14 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/synonyms.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...caching.decorators import cached_api_call
12 | from ...constants import Language
13 | from ...core.search_pipeline import find_best_match
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/synonyms.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...constants import Language
13 | from ...core.search_pipeline import find_best_match
14 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/synonyms.py:53:17: G004 Logging statement uses f-string
   |
51 | async def _cached_synonyms(word: str, params: SynonymParams) -> SynonymResponse:
52 |     """Cached synonym lookup implementation using AI."""
53 |     logger.info(f"Generating AI synonyms for '{word}'")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
54 |
55 |     try:
   |

src/floridify/api/routers/synonyms.py:80:13: PERF401 Use a list comprehension to create a transformed list
   |
78 |           synonyms = []
79 |           for syn_candidate in ai_response.synonyms:
80 | /             synonyms.append(
81 | |                 SynonymItem(
82 | |                     word=syn_candidate.word,
83 | |                     score=syn_candidate.relevance,
84 | |                 )
85 | |             )
   | |_____________^ PERF401
86 |
87 |           return SynonymResponse(
   |
   = help: Replace for loop with list comprehension

src/floridify/api/routers/synonyms.py:93:9: TRY400 Use `logging.exception` instead of `logging.error`
   |
92 |     except Exception as e:
93 |         logger.error(f"AI synonym generation failed for '{word}': {e}")
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
94 |         # Fallback to empty response rather than failing
95 |         return SynonymResponse(
   |
   = help: Replace with `exception`

src/floridify/api/routers/synonyms.py:93:22: G004 Logging statement uses f-string
   |
92 |     except Exception as e:
93 |         logger.error(f"AI synonym generation failed for '{word}': {e}")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
94 |         # Fallback to empty response rather than failing
95 |         return SynonymResponse(
   |

src/floridify/api/routers/synonyms.py:104:29: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
102 | async def get_synonyms(
103 |     word: str,
104 |     params: SynonymParams = Depends(parse_synonym_params),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B008
105 | ) -> SynonymResponse:
106 |     """Get AI-generated synonyms for the given word.
    |

src/floridify/api/routers/synonyms.py:142:13: G004 Logging statement uses f-string
    |
140 |         elapsed_ms = int((time.perf_counter() - start_time) * 1000)
141 |         logger.info(
142 |             f"Synonyms completed: '{word}' -> {len(result.synonyms)} results in {elapsed_ms}ms"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
143 |         )
    |

src/floridify/api/routers/synonyms.py:145:9: TRY300 Consider moving this statement to an `else` block
    |
143 |         )
144 |
145 |         return result
    |         ^^^^^^^^^^^^^ TRY300
146 |
147 |     except Exception as e:
    |

src/floridify/api/routers/synonyms.py:148:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
147 |     except Exception as e:
148 |         logger.error(f"Synonyms failed for '{word}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
149 |         raise HTTPException(status_code=500, detail=f"Internal error getting synonyms: {str(e)}")
    |
    = help: Replace with `exception`

src/floridify/api/routers/synonyms.py:148:22: G004 Logging statement uses f-string
    |
147 |     except Exception as e:
148 |         logger.error(f"Synonyms failed for '{word}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
149 |         raise HTTPException(status_code=500, detail=f"Internal error getting synonyms: {str(e)}")
    |

src/floridify/api/routers/synonyms.py:149:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
147 |     except Exception as e:
148 |         logger.error(f"Synonyms failed for '{word}': {e}")
149 |         raise HTTPException(status_code=500, detail=f"Internal error getting synonyms: {str(e)}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/floridify/api/routers/synonyms.py:149:89: RUF010 [*] Use explicit conversion flag
    |
147 |     except Exception as e:
148 |         logger.error(f"Synonyms failed for '{word}': {e}")
149 |         raise HTTPException(status_code=500, detail=f"Internal error getting synonyms: {str(e)}")
    |                                                                                         ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/api/routers/words.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 6 | from fastapi import APIRouter, Depends, HTTPException, Query, Request, Response
 7 |
 8 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
 9 | from ...models import Word
10 | from ..core import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from ...constants import Language
 9 | from ...models import Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core import (
11 |     ErrorDetail,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 |   from ...constants import Language
 9 |   from ...models import Word
10 | / from ..core import (
11 | |     ErrorDetail,
12 | |     ErrorResponse,
13 | |     FieldSelection,
14 | |     ListResponse,
15 | |     PaginationParams,
16 | |     ResourceResponse,
17 | |     SortParams,
18 | |     check_etag,
19 | |     get_etag,
20 | |     handle_api_errors,
21 | | )
   | |_^ TID252
22 |   from ..repositories import (
23 |       WordCreate,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories import (
23 | |     WordCreate,
24 | |     WordFilter,
25 | |     WordRepository,
26 | |     WordUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories import (
23 | |     WordCreate,
24 | |     WordFilter,
25 | |     WordRepository,
26 | |     WordUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories import (
23 | |     WordCreate,
24 | |     WordFilter,
25 | |     WordRepository,
26 | |     WordUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |       handle_api_errors,
21 |   )
22 | / from ..repositories import (
23 | |     WordCreate,
24 | |     WordFilter,
25 | |     WordRepository,
26 | |     WordUpdate,
27 | | )
   | |_^ TID252
28 |
29 |   router = APIRouter()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:65:11: PLR0913 Too many arguments in function definition (10 > 5)
   |
64 | @router.get("", response_model=ListResponse[Word])
65 | async def list_words(
   |           ^^^^^^^^^^ PLR0913
66 |     repo: WordRepository = Depends(get_word_repo),
67 |     pagination: PaginationParams = Depends(get_pagination),
   |

src/floridify/api/routers/words.py:66:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
64 | @router.get("", response_model=ListResponse[Word])
65 | async def list_words(
66 |     repo: WordRepository = Depends(get_word_repo),
   |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
67 |     pagination: PaginationParams = Depends(get_pagination),
68 |     sort: SortParams = Depends(get_sort),
   |

src/floridify/api/routers/words.py:67:36: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
65 | async def list_words(
66 |     repo: WordRepository = Depends(get_word_repo),
67 |     pagination: PaginationParams = Depends(get_pagination),
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^ B008
68 |     sort: SortParams = Depends(get_sort),
69 |     fields: FieldSelection = Depends(get_fields),
   |

src/floridify/api/routers/words.py:68:24: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
66 |     repo: WordRepository = Depends(get_word_repo),
67 |     pagination: PaginationParams = Depends(get_pagination),
68 |     sort: SortParams = Depends(get_sort),
   |                        ^^^^^^^^^^^^^^^^^ B008
69 |     fields: FieldSelection = Depends(get_fields),
70 |     # Filter parameters
   |

src/floridify/api/routers/words.py:69:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
67 |     pagination: PaginationParams = Depends(get_pagination),
68 |     sort: SortParams = Depends(get_sort),
69 |     fields: FieldSelection = Depends(get_fields),
   |                              ^^^^^^^^^^^^^^^^^^^ B008
70 |     # Filter parameters
71 |     text: str | None = Query(None),
   |

src/floridify/api/routers/words.py:73:33: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
71 |     text: str | None = Query(None),
72 |     text_pattern: str | None = Query(None),
73 |     language: Language | None = Query(None),
   |                                 ^^^^^^^^^^^ B008
74 |     offensive_flag: bool | None = Query(None),
75 |     created_after: datetime | None = Query(None),
   |

src/floridify/api/routers/words.py:75:38: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
73 |     language: Language | None = Query(None),
74 |     offensive_flag: bool | None = Query(None),
75 |     created_after: datetime | None = Query(None),
   |                                      ^^^^^^^^^^^ B008
76 |     created_before: datetime | None = Query(None),
77 | ) -> ListResponse[Word]:
   |

src/floridify/api/routers/words.py:76:39: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
74 |     offensive_flag: bool | None = Query(None),
75 |     created_after: datetime | None = Query(None),
76 |     created_before: datetime | None = Query(None),
   |                                       ^^^^^^^^^^^ B008
77 | ) -> ListResponse[Word]:
78 |     """Retrieve paginated word list with filtering and sorting.
   |

src/floridify/api/routers/words.py:136:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
134 | async def create_word(
135 |     data: WordCreate,
136 |     repo: WordRepository = Depends(get_word_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
137 | ) -> ResourceResponse:
138 |     """Create new word entry.
    |

src/floridify/api/routers/words.py:189:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
187 |     request: Request,
188 |     response: Response,
189 |     repo: WordRepository = Depends(get_word_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
190 |     fields: FieldSelection = Depends(get_fields),
191 | ) -> Response | ResourceResponse:
    |

src/floridify/api/routers/words.py:190:30: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
188 |     response: Response,
189 |     repo: WordRepository = Depends(get_word_repo),
190 |     fields: FieldSelection = Depends(get_fields),
    |                              ^^^^^^^^^^^^^^^^^^^ B008
191 | ) -> Response | ResourceResponse:
192 |     """Retrieve word details by ID.
    |

src/floridify/api/routers/words.py:216:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
215 |       # Handle expansions
216 | /     if fields.expand:
217 | |         if "definitions" in fields.expand:
    | |__________________________________________^ SIM102
218 |               from ..repositories import DefinitionRepository
    |
    = help: Combine `if` statements using `and`

src/floridify/api/routers/words.py:218:13: PLC0415 `import` should be at the top-level of a file
    |
216 |     if fields.expand:
217 |         if "definitions" in fields.expand:
218 |             from ..repositories import DefinitionRepository
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
219 |
220 |             def_repo = DefinitionRepository()
    |

src/floridify/api/routers/words.py:218:13: TID252 Prefer absolute imports over relative imports from parent modules
    |
216 |     if fields.expand:
217 |         if "definitions" in fields.expand:
218 |             from ..repositories import DefinitionRepository
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
219 |
220 |             def_repo = DefinitionRepository()
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/api/routers/words.py:256:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
254 |     data: WordUpdate,
255 |     version: int | None = Query(None, description="Version for optimistic locking"),
256 |     repo: WordRepository = Depends(get_word_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
257 | ) -> ResourceResponse:
258 |     """Update word with optimistic concurrency control.
    |

src/floridify/api/routers/words.py:292:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
290 |     word_id: PydanticObjectId,
291 |     cascade: bool = Query(False, description="Delete related documents"),
292 |     repo: WordRepository = Depends(get_word_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
293 | ) -> None:
294 |     """Delete word and optionally cascade to related documents.
    |

src/floridify/api/routers/words.py:315:33: B008 Do not perform function call `Query` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
313 | async def search_words(
314 |     query: str,
315 |     language: Language | None = Query(None),
    |                                 ^^^^^^^^^^^ B008
316 |     limit: int = Query(10, ge=1, le=50),
317 |     repo: WordRepository = Depends(get_word_repo),
    |

src/floridify/api/routers/words.py:317:28: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
315 |     language: Language | None = Query(None),
316 |     limit: int = Query(10, ge=1, le=50),
317 |     repo: WordRepository = Depends(get_word_repo),
    |                            ^^^^^^^^^^^^^^^^^^^^^^ B008
318 | ) -> ListResponse[Word]:
319 |     """Search words by text pattern.
    |

src/floridify/audio/__init__.py:5:11: RUF022 [*] `__all__` is not sorted
  |
3 | from .synthesizer import AudioSynthesisConfig, AudioSynthesizer
4 |
5 | __all__ = ["AudioSynthesizer", "AudioSynthesisConfig"]
  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF022
  |
  = help: Apply an isort-style sorting to `__all__`

src/floridify/audio/synthesizer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from pydantic import BaseModel, Field
15 |
16 | from ..models import AudioMedia, Pronunciation
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..utils.config import Config
18 | from ..utils.paths import get_project_root
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/audio/synthesizer.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from pydantic import BaseModel, Field
15 |
16 | from ..models import AudioMedia, Pronunciation
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..utils.config import Config
18 | from ..utils.paths import get_project_root
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/audio/synthesizer.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..models import AudioMedia, Pronunciation
17 | from ..utils.config import Config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 | from ..utils.paths import get_project_root
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/audio/synthesizer.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ..models import AudioMedia, Pronunciation
17 | from ..utils.config import Config
18 | from ..utils.paths import get_project_root
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/audio/synthesizer.py:52:9: ANN204 Missing return type annotation for special method `__init__`
   |
50 |     """Synthesizes audio pronunciations using Google Cloud Text-to-Speech."""
51 |
52 |     def __init__(self, config: AudioSynthesisConfig | None = None):
   |         ^^^^^^^^ ANN204
53 |         """Initialize the audio synthesizer.
   |
   = help: Add return type annotation: `None`

src/floridify/audio/synthesizer.py:96:9: RET505 [*] Unnecessary `else` after `return` statement
   |
94 |                 british_voice_female=gc_config.tts_british_voice_female,
95 |             )
96 |         else:
   |         ^^^^ RET505
97 |             # Fallback to environment-based config
98 |             auth_dir = get_project_root() / "auth"
   |
   = help: Remove unnecessary `else`

src/floridify/caching/__init__.py:7:11: RUF022 [*] `__all__` is not sorted
   |
 5 |   from .http_client import get_cached_http_client
 6 |
 7 |   __all__ = [
   |  ___________^
 8 | |     "CacheManager",
 9 | |     "cached_api_call",
10 | |     "cached_computation",
11 | |     "deduplicated",
12 | |     "cached_api_call_with_dedup",
13 | |     "get_cached_http_client",
14 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/caching/cache_manager.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from typing import Any, TypeVar
10 |
11 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 |
13 | T = TypeVar("T")
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/caching/cache_manager.py:21:31: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`
   |
19 |     """Cache entry with TTL support."""
20 |
21 |     def __init__(self, value: Any, ttl_seconds: float | None = None) -> None:
   |                               ^^^ ANN401
22 |         self.value = value
23 |         self.created_at = time.time()
   |

src/floridify/caching/cache_manager.py:66:21: G004 Logging statement uses f-string
   |
64 |         self._memory_cache: dict[str, CacheEntry] = {}
65 |
66 |         logger.info(f"🗄️  Cache manager initialized: {self.cache_dir}, TTL={default_ttl_hours}h")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
67 |
68 |     def _generate_cache_key(self, key_parts: tuple[Any, ...]) -> str:
   |

src/floridify/caching/cache_manager.py:111:30: G004 Logging statement uses f-string
    |
109 |             entry = self._memory_cache[cache_key]
110 |             if not entry.is_expired:
111 |                 logger.debug(f"💨 Memory cache hit: {cache_key}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
112 |                 return entry.value  # type: ignore[no-any-return]
113 |             else:
    |

src/floridify/caching/cache_manager.py:113:13: RET505 [*] Unnecessary `else` after `return` statement
    |
111 |                 logger.debug(f"💨 Memory cache hit: {cache_key}")
112 |                 return entry.value  # type: ignore[no-any-return]
113 |             else:
    |             ^^^^ RET505
114 |                 # Remove expired entry
115 |                 del self._memory_cache[cache_key]
    |
    = help: Remove unnecessary `else`

src/floridify/caching/cache_manager.py:116:30: G004 Logging statement uses f-string
    |
114 |                 # Remove expired entry
115 |                 del self._memory_cache[cache_key]
116 |                 logger.debug(f"⏰ Memory cache expired: {cache_key}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
117 |
118 |         # Check file cache if requested
    |

src/floridify/caching/cache_manager.py:127:38: G004 Logging statement uses f-string
    |
126 |                     if not entry.is_expired:
127 |                         logger.debug(f"📁 File cache hit: {cache_key}")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
128 |                         # Promote to memory cache
129 |                         self._memory_cache[cache_key] = entry
    |

src/floridify/caching/cache_manager.py:132:21: RET505 [*] Unnecessary `else` after `return` statement
    |
130 |                         self._cleanup_memory_cache()
131 |                         return entry.value  # type: ignore[no-any-return]
132 |                     else:
    |                     ^^^^ RET505
133 |                         # Remove expired file
134 |                         file_path.unlink()
    |
    = help: Remove unnecessary `else`

src/floridify/caching/cache_manager.py:135:38: G004 Logging statement uses f-string
    |
133 |                         # Remove expired file
134 |                         file_path.unlink()
135 |                         logger.debug(f"⏰ File cache expired: {cache_key}")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
136 |
137 |                 except Exception as e:
    |

src/floridify/caching/cache_manager.py:138:36: G004 Logging statement uses f-string
    |
137 |                 except Exception as e:
138 |                     logger.warning(f"Failed to load cache file {file_path}: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
139 |
140 |         logger.debug(f"❌ Cache miss: {cache_key}")
    |

src/floridify/caching/cache_manager.py:140:22: G004 Logging statement uses f-string
    |
138 |                     logger.warning(f"Failed to load cache file {file_path}: {e}")
139 |
140 |         logger.debug(f"❌ Cache miss: {cache_key}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
141 |         return default
    |

src/floridify/caching/cache_manager.py:146:16: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`
    |
144 |         self,
145 |         key_parts: tuple[Any, ...],
146 |         value: Any,
    |                ^^^ ANN401
147 |         ttl_hours: float | None = None,
148 |         use_file_cache: bool = False,
    |

src/floridify/caching/cache_manager.py:161:9: SIM108 Use ternary operator `ttl_seconds = self.default_ttl_seconds if ttl_hours is None else ttl_hours * 3600` instead of `if`-`else`-block
    |
160 |           # Use default TTL if not specified
161 | /         if ttl_hours is None:
162 | |             ttl_seconds = self.default_ttl_seconds
163 | |         else:
164 | |             ttl_seconds = ttl_hours * 3600
    | |__________________________________________^ SIM108
165 |
166 |           entry = CacheEntry(value, ttl_seconds)
    |
    = help: Replace `if`-`else`-block with `ttl_seconds = self.default_ttl_seconds if ttl_hours is None else ttl_hours * 3600`

src/floridify/caching/cache_manager.py:178:30: G004 Logging statement uses f-string
    |
176 |                 with open(file_path, "wb") as f:
177 |                     pickle.dump(entry, f)
178 |                 logger.debug(f"💾 Cached to file: {cache_key}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
179 |             except Exception as e:
180 |                 logger.warning(f"Failed to save cache file {file_path}: {e}")
    |

src/floridify/caching/cache_manager.py:180:32: G004 Logging statement uses f-string
    |
178 |                 logger.debug(f"💾 Cached to file: {cache_key}")
179 |             except Exception as e:
180 |                 logger.warning(f"Failed to save cache file {file_path}: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
181 |
182 |         logger.debug(
    |

src/floridify/caching/cache_manager.py:183:13: G004 Logging statement uses f-string
    |
182 |         logger.debug(
183 |             f"✅ Cached: {cache_key} (TTL: {ttl_hours or self.default_ttl_seconds / 3600}h)"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
184 |         )
    |

src/floridify/caching/cache_manager.py:210:32: G004 Logging statement uses f-string
    |
208 |                 file_removed = True
209 |             except Exception as e:
210 |                 logger.warning(f"Failed to remove cache file {file_path}: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
211 |
212 |         if memory_removed or file_removed:
    |

src/floridify/caching/cache_manager.py:213:25: G004 Logging statement uses f-string
    |
212 |         if memory_removed or file_removed:
213 |             logger.info(f"🗑️  Invalidated cache: {cache_key}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
214 |             return True
    |

src/floridify/caching/cache_manager.py:231:32: G004 Logging statement uses f-string
    |
229 |                 file_count += 1
230 |             except Exception as e:
231 |                 logger.warning(f"Failed to remove {cache_file}: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
232 |
233 |         logger.info(f"🧹 Cleared all cache: {memory_count} memory + {file_count} file entries")
    |

src/floridify/caching/cache_manager.py:233:21: G004 Logging statement uses f-string
    |
231 |                 logger.warning(f"Failed to remove {cache_file}: {e}")
232 |
233 |         logger.info(f"🧹 Cleared all cache: {memory_count} memory + {file_count} file entries")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
234 |
235 |     def get_stats(self) -> dict[str, Any]:
    |

src/floridify/caching/cache_manager.py:257:12: PLW0603 Using the global statement to update `_cache_manager` is discouraged
    |
255 | def get_cache_manager() -> CacheManager:
256 |     """Get the global cache manager instance."""
257 |     global _cache_manager
    |            ^^^^^^^^^^^^^^ PLW0603
258 |     if _cache_manager is None:
259 |         _cache_manager = CacheManager()
    |

src/floridify/caching/decorators.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from fastapi import HTTPException
13 |
14 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from .cache_manager import get_cache_manager
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/caching/decorators.py:26:9: ANN204 Missing return type annotation for special method `__init__`
   |
24 |     """Manages in-flight requests to prevent duplicate executions."""
25 |     
26 |     def __init__(self, max_wait_time: float = 30.0, cleanup_interval: float = 60.0):
   |         ^^^^^^^^ ANN204
27 |         self._in_flight: dict[str, asyncio.Future[Any]] = {}
28 |         self._lock = asyncio.Lock()
   |
   = help: Add return type annotation: `None`

src/floridify/caching/decorators.py:37:16: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
35 |         key: str,
36 |         func: Callable[..., Awaitable[Any]],
37 |         *args: Any,
   |                ^^^ ANN401
38 |         **kwargs: Any,
39 |     ) -> Any:
   |

src/floridify/caching/decorators.py:38:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
36 |         func: Callable[..., Awaitable[Any]],
37 |         *args: Any,
38 |         **kwargs: Any,
   |                   ^^^ ANN401
39 |     ) -> Any:
40 |         """Execute function with deduplication."""
   |

src/floridify/caching/decorators.py:39:10: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `deduplicate`
   |
37 |         *args: Any,
38 |         **kwargs: Any,
39 |     ) -> Any:
   |          ^^^ ANN401
40 |         """Execute function with deduplication."""
41 |         async with self._lock:
   |

src/floridify/caching/decorators.py:45:29: G004 Logging statement uses f-string
   |
43 |             if key in self._in_flight:
44 |                 future = self._in_flight[key]
45 |                 logger.info(f"🔄 Deduplicating request: {key}")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
46 |             else:
47 |                 # Create new future for this request
   |

src/floridify/caching/decorators.py:50:29: G004 Logging statement uses f-string
   |
48 |                 future = asyncio.Future()
49 |                 self._in_flight[key] = future
50 |                 logger.info(f"🚀 Starting new request: {key}")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
51 |                 
52 |                 # Schedule the actual execution
   |

src/floridify/caching/decorators.py:53:17: RUF006 Store a reference to the return value of `asyncio.create_task`
   |
52 |                 # Schedule the actual execution
53 |                 asyncio.create_task(self._execute(key, future, func, *args, **kwargs))
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF006
54 |             
55 |             # Cleanup old entries periodically
   |

src/floridify/caching/decorators.py:61:16: UP041 [*] Replace aliased errors with `TimeoutError`
   |
59 |         try:
60 |             return await asyncio.wait_for(future, timeout=self._max_wait_time)
61 |         except asyncio.TimeoutError:
   |                ^^^^^^^^^^^^^^^^^^^^ UP041
62 |             logger.warning(f"⏱️ Timeout waiting for request: {key}")
63 |             raise HTTPException(status_code=504, detail="Request timeout")
   |
   = help: Replace `asyncio.TimeoutError` with builtin `TimeoutError`

src/floridify/caching/decorators.py:62:28: G004 Logging statement uses f-string
   |
60 |             return await asyncio.wait_for(future, timeout=self._max_wait_time)
61 |         except asyncio.TimeoutError:
62 |             logger.warning(f"⏱️ Timeout waiting for request: {key}")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
63 |             raise HTTPException(status_code=504, detail="Request timeout")
   |

src/floridify/caching/decorators.py:63:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
61 |         except asyncio.TimeoutError:
62 |             logger.warning(f"⏱️ Timeout waiting for request: {key}")
63 |             raise HTTPException(status_code=504, detail="Request timeout")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
64 |     
65 |     async def _execute(
   |

src/floridify/caching/decorators.py:70:16: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
68 |         future: asyncio.Future[Any],
69 |         func: Callable[..., Awaitable[Any]],
70 |         *args: Any,
   |                ^^^ ANN401
71 |         **kwargs: Any,
72 |     ) -> None:
   |

src/floridify/caching/decorators.py:71:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
69 |         func: Callable[..., Awaitable[Any]],
70 |         *args: Any,
71 |         **kwargs: Any,
   |                   ^^^ ANN401
72 |     ) -> None:
73 |         """Execute the actual function and set the future result."""
   |

src/floridify/caching/decorators.py:77:25: G004 Logging statement uses f-string
   |
75 |             result = await func(*args, **kwargs)
76 |             future.set_result(result)
77 |             logger.info(f"✅ Request completed: {key}")
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
78 |         except Exception as e:
79 |             future.set_exception(e)
   |

src/floridify/caching/decorators.py:80:13: TRY400 Use `logging.exception` instead of `logging.error`
   |
78 |         except Exception as e:
79 |             future.set_exception(e)
80 |             logger.error(f"❌ Request failed: {key} - {e}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
81 |         finally:
82 |             # Remove from in-flight after a short delay
   |
   = help: Replace with `exception`

src/floridify/caching/decorators.py:80:26: G004 Logging statement uses f-string
   |
78 |         except Exception as e:
79 |             future.set_exception(e)
80 |             logger.error(f"❌ Request failed: {key} - {e}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
81 |         finally:
82 |             # Remove from in-flight after a short delay
   |

src/floridify/caching/decorators.py:101:26: G004 Logging statement uses f-string
    |
 99 |         for key in stale_keys:
100 |             self._in_flight.pop(key, None)
101 |             logger.debug(f"🧹 Cleaned up stale request: {key}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/caching/decorators.py:128:34: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
126 |     def decorator(func: AF) -> AF:
127 |         @functools.wraps(func)
128 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                  ^^^ ANN401
129 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:128:49: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
126 |     def decorator(func: AF) -> AF:
127 |         @functools.wraps(func)
128 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                 ^^^ ANN401
129 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:128:57: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
    |
126 |     def decorator(func: AF) -> AF:
127 |         @functools.wraps(func)
128 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                         ^^^ ANN401
129 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:153:34: G004 Logging statement uses f-string
    |
151 |                 )
152 |                 if cached_result is not None:
153 |                     logger.debug(f"🎯 Cache hit: {func.__name__}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
154 |                     return cached_result
    |

src/floridify/caching/decorators.py:157:26: G004 Logging statement uses f-string
    |
156 |             # Execute function and cache result
157 |             logger.debug(f"🔄 Executing: {func.__name__}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
158 |             result = await func(*args, **kwargs)
    |

src/floridify/caching/decorators.py:195:33: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
193 |     def decorator(func: F) -> F:
194 |         @functools.wraps(func)
195 |         def sync_wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                 ^^^ ANN401
196 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:195:48: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
193 |     def decorator(func: F) -> F:
194 |         @functools.wraps(func)
195 |         def sync_wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                ^^^ ANN401
196 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:195:56: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `sync_wrapper`
    |
193 |     def decorator(func: F) -> F:
194 |         @functools.wraps(func)
195 |         def sync_wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                        ^^^ ANN401
196 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:220:34: G004 Logging statement uses f-string
    |
218 |                 )
219 |                 if cached_result is not None:
220 |                     logger.debug(f"🎯 Cache hit: {func.__name__}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
221 |                     return cached_result
    |

src/floridify/caching/decorators.py:224:26: G004 Logging statement uses f-string
    |
223 |             # Execute function and cache result
224 |             logger.debug(f"🔄 Computing: {func.__name__}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
225 |             result = func(*args, **kwargs)
    |

src/floridify/caching/decorators.py:238:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
237 |         @functools.wraps(func)
238 |         async def async_wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                        ^^^ ANN401
239 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:238:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
237 |         @functools.wraps(func)
238 |         async def async_wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                       ^^^ ANN401
239 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:238:63: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `async_wrapper`
    |
237 |         @functools.wraps(func)
238 |         async def async_wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                               ^^^ ANN401
239 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:263:34: G004 Logging statement uses f-string
    |
261 |                 )
262 |                 if cached_result is not None:
263 |                     logger.debug(f"🎯 Cache hit: {func.__name__}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
264 |                     return cached_result
    |

src/floridify/caching/decorators.py:267:26: G004 Logging statement uses f-string
    |
266 |             # Execute function and cache result
267 |             logger.debug(f"🔄 Computing: {func.__name__}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
268 |             result = await func(*args, **kwargs)
    |

src/floridify/caching/decorators.py:283:9: RET505 [*] Unnecessary `else` after `return` statement
    |
281 |         if inspect.iscoroutinefunction(func):
282 |             return async_wrapper  # type: ignore[return-value]
283 |         else:
    |         ^^^^ RET505
284 |             return sync_wrapper  # type: ignore[return-value]
    |
    = help: Remove unnecessary `else`

src/floridify/caching/decorators.py:289:29: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
289 | def openai_cache_key(*args: Any, **kwargs: Any) -> tuple[Any, ...]:
    |                             ^^^ ANN401
290 |     """Generate cache key for OpenAI API calls."""
291 |     # Extract common OpenAI parameters for cache key
    |

src/floridify/caching/decorators.py:289:44: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
289 | def openai_cache_key(*args: Any, **kwargs: Any) -> tuple[Any, ...]:
    |                                            ^^^ ANN401
290 |     """Generate cache key for OpenAI API calls."""
291 |     # Extract common OpenAI parameters for cache key
    |

src/floridify/caching/decorators.py:303:27: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
303 | def http_cache_key(*args: Any, **kwargs: Any) -> tuple[Any, ...]:
    |                           ^^^ ANN401
304 |     """Generate cache key for HTTP requests."""
305 |     # URL is typically the first argument
    |

src/floridify/caching/decorators.py:303:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
303 | def http_cache_key(*args: Any, **kwargs: Any) -> tuple[Any, ...]:
    |                                          ^^^ ANN401
304 |     """Generate cache key for HTTP requests."""
305 |     # URL is typically the first argument
    |

src/floridify/caching/decorators.py:316:30: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
316 | def lexicon_cache_key(*args: Any, **kwargs: Any) -> tuple[Any, ...]:
    |                              ^^^ ANN401
317 |     """Generate cache key for lexicon operations."""
318 |     # Include language and source information
    |

src/floridify/caching/decorators.py:316:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
316 | def lexicon_cache_key(*args: Any, **kwargs: Any) -> tuple[Any, ...]:
    |                                             ^^^ ANN401
317 |     """Generate cache key for lexicon operations."""
318 |     # Include language and source information
    |

src/floridify/caching/decorators.py:340:34: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
338 |     def decorator(func: AF) -> AF:
339 |         @functools.wraps(func)
340 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                  ^^^ ANN401
341 |             # Generate deduplication key
342 |             key = key_func(*args, **kwargs)
    |

src/floridify/caching/decorators.py:340:49: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
338 |     def decorator(func: AF) -> AF:
339 |         @functools.wraps(func)
340 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                 ^^^ ANN401
341 |             # Generate deduplication key
342 |             key = key_func(*args, **kwargs)
    |

src/floridify/caching/decorators.py:340:57: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
    |
338 |     def decorator(func: AF) -> AF:
339 |         @functools.wraps(func)
340 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                         ^^^ ANN401
341 |             # Generate deduplication key
342 |             key = key_func(*args, **kwargs)
    |

src/floridify/caching/decorators.py:379:34: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
377 |     def decorator(func: AF) -> AF:
378 |         @functools.wraps(func)
379 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                  ^^^ ANN401
380 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:379:49: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
377 |     def decorator(func: AF) -> AF:
378 |         @functools.wraps(func)
379 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                 ^^^ ANN401
380 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:379:57: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
    |
377 |     def decorator(func: AF) -> AF:
378 |         @functools.wraps(func)
379 |         async def wrapper(*args: Any, **kwargs: Any) -> Any:
    |                                                         ^^^ ANN401
380 |             cache_manager = get_cache_manager()
    |

src/floridify/caching/decorators.py:403:34: G004 Logging statement uses f-string
    |
401 |                 )
402 |                 if cached_result is not None:
403 |                     logger.debug(f"🎯 Cache hit: {func.__name__}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
404 |                     return cached_result
    |

src/floridify/caching/http_client.py:6:29: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
  |
5 | import time
6 | from collections.abc import Callable
  |                             ^^^^^^^^ TC003
7 | from pathlib import Path
8 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/caching/http_client.py:11:8: TC002 Move third-party import `httpx` into a type-checking block
   |
10 | import hishel
11 | import httpx
   |        ^^^^^ TC002
12 |
13 | from ..utils.logging import get_logger
   |
   = help: Move into type-checking block

src/floridify/caching/http_client.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | import httpx
12 |
13 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/caching/http_client.py:54:21: G004 Logging statement uses f-string
   |
52 |         )
53 |
54 |         logger.info(f"🌐 HTTP cache initialized: {cache_dir}, TTL={default_ttl_hours}h")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
55 |
56 |     async def get(
   |

src/floridify/caching/http_client.py:62:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
60 |         force_refresh: bool | None = None,
61 |         progress_callback: Callable[[str, dict[str, Any]], None] | None = None,
62 |         **kwargs: Any,
   |                   ^^^ ANN401
63 |     ) -> httpx.Response:
64 |         """Cached GET request.
   |

src/floridify/caching/http_client.py:85:26: G004 Logging statement uses f-string
   |
83 |             # Force fresh request
84 |             kwargs.setdefault("headers", {})["Cache-Control"] = "no-cache"
85 |             logger.debug(f"🔄 Force refresh: {url}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
86 |         else:
87 |             # Set max-age for TTL
   |

src/floridify/caching/http_client.py:101:22: G004 Logging statement uses f-string
    |
100 |         # Make request
101 |         logger.debug(f"🌐 HTTP GET: {url} (TTL: {ttl_hours}h)")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
102 |         connection_time = time.time()
    |

src/floridify/caching/http_client.py:133:30: G004 Logging statement uses f-string
    |
131 |             ):
132 |                 cache_status = response.extensions["cache"].get("status", "unknown")
133 |                 logger.debug(f"📡 {cache_status.upper()}: {url}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
134 |         except Exception:
135 |             # Ignore cache status logging errors
    |

src/floridify/caching/http_client.py:143:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
141 |         self,
142 |         url: str,
143 |         **kwargs: Any,
    |                   ^^^ ANN401
144 |     ) -> httpx.Response:
145 |         """Non-cached POST request.
    |

src/floridify/caching/http_client.py:154:22: G004 Logging statement uses f-string
    |
152 |             HTTP response
153 |         """
154 |         logger.debug(f"🌐 HTTP POST: {url}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^ G004
155 |         response = self._client.post(url, **kwargs)
156 |         if hasattr(response, "__await__"):
    |

src/floridify/caching/http_client.py:166:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
164 |         ttl_hours: float | None = None,
165 |         force_refresh: bool | None = None,
166 |         **kwargs: Any,
    |                   ^^^ ANN401
167 |     ) -> bool:
168 |         """Download file with caching.
    |

src/floridify/caching/http_client.py:190:34: G004 Logging statement uses f-string
    |
189 |                 if file_age_hours < ttl_hours:
190 |                     logger.debug(f"📁 Using cached file: {file_path}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
191 |                     return True
    |

src/floridify/caching/http_client.py:195:30: G004 Logging statement uses f-string
    |
193 |             # Download file with progress tracking
194 |             def file_progress_callback(stage: str, metadata: dict[str, Any]) -> None:
195 |                 logger.debug(f"📥 File download {stage}: {metadata}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
196 |
197 |             response = await self.get(
    |

src/floridify/caching/http_client.py:211:25: G004 Logging statement uses f-string
    |
209 |                 f.write(response.content)
210 |
211 |             logger.info(f"💾 Downloaded: {url} -> {file_path}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
212 |             return True
    |

src/floridify/caching/http_client.py:212:13: TRY300 Consider moving this statement to an `else` block
    |
211 |             logger.info(f"💾 Downloaded: {url} -> {file_path}")
212 |             return True
    |             ^^^^^^^^^^^ TRY300
213 |
214 |         except Exception as e:
    |

src/floridify/caching/http_client.py:215:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
214 |         except Exception as e:
215 |             logger.error(f"❌ Download failed: {url} -> {file_path}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
216 |             return False
    |
    = help: Replace with `exception`

src/floridify/caching/http_client.py:215:26: G004 Logging statement uses f-string
    |
214 |         except Exception as e:
215 |             logger.error(f"❌ Download failed: {url} -> {file_path}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
216 |             return False
    |

src/floridify/caching/http_client.py:232:25: G004 Logging statement uses f-string
    |
230 |                     cache_dir.rmdir()
231 |
232 |             logger.info(f"🧹 Cleared HTTP cache: {len(cache_files)} files")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
233 |
234 |         except Exception as e:
    |

src/floridify/caching/http_client.py:235:28: G004 Logging statement uses f-string
    |
234 |         except Exception as e:
235 |             logger.warning(f"Failed to clear HTTP cache: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
236 |
237 |     async def close(self) -> None:
    |

src/floridify/caching/http_client.py:245:28: G004 Logging statement uses f-string
    |
243 |                 self._client.close()
244 |         except Exception as e:
245 |             logger.warning(f"Error closing HTTP client: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/caching/http_client.py:257:12: PLW0603 Using the global statement to update `_http_client` is discouraged
    |
255 | ) -> CachedHTTPClient:
256 |     """Get the global cached HTTP client."""
257 |     global _http_client
    |            ^^^^^^^^^^^^ PLW0603
258 |     if _http_client is None:
259 |         _http_client = CachedHTTPClient(
    |

src/floridify/caching/http_client.py:268:12: PLW0603 Using the global statement to update `_http_client` is discouraged
    |
266 | async def close_http_client() -> None:
267 |     """Close the global HTTP client."""
268 |     global _http_client
    |            ^^^^^^^^^^^^ PLW0603
269 |     if _http_client is not None:
270 |         await _http_client.close()
    |

src/floridify/cli/commands/anki.py:1:1: INP001 File `src/floridify/cli/commands/anki.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/anki.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from rich.progress import Progress, SpinnerColumn, TextColumn
10 |
11 | from ...ai.factory import get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...anki.constants import CardType
13 | from ...anki.generator import AnkiCardGenerator
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...ai.factory import get_openai_connector
12 | from ...anki.constants import CardType
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...anki.generator import AnkiCardGenerator
14 | from ...constants import DictionaryProvider, Language
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...ai.factory import get_openai_connector
12 | from ...anki.constants import CardType
13 | from ...anki.generator import AnkiCardGenerator
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ...constants import DictionaryProvider, Language
15 | from ...core.lookup_pipeline import lookup_word_pipeline
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...anki.constants import CardType
13 | from ...anki.generator import AnkiCardGenerator
14 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...core.lookup_pipeline import lookup_word_pipeline
16 | from ...list import WordList
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...anki.constants import CardType
13 | from ...anki.generator import AnkiCardGenerator
14 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...core.lookup_pipeline import lookup_word_pipeline
16 | from ...list import WordList
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...anki.generator import AnkiCardGenerator
14 | from ...constants import DictionaryProvider, Language
15 | from ...core.lookup_pipeline import lookup_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...list import WordList
17 | from ...storage.mongodb import _ensure_initialized
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ...constants import DictionaryProvider, Language
15 | from ...core.lookup_pipeline import lookup_word_pipeline
16 | from ...list import WordList
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...storage.mongodb import _ensure_initialized
18 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...core.lookup_pipeline import lookup_word_pipeline
16 | from ...list import WordList
17 | from ...storage.mongodb import _ensure_initialized
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 | from ...utils.logging import get_logger
19 | from ..utils.formatting import console
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...list import WordList
17 | from ...storage.mongodb import _ensure_initialized
18 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from ..utils.formatting import console
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 | from ...storage.mongodb import _ensure_initialized
18 | from ...utils.logging import get_logger
19 | from ..utils.formatting import console
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 |
21 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:27:5: PIE790 [*] Unnecessary `pass` statement
   |
25 | def anki_command() -> None:
26 |     """Create and manage Anki flashcard decks from word lists."""
27 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/cli/commands/anki.py:63:5: PLR0913 Too many arguments in function definition (8 > 5)
   |
61 |     help="Force refresh all caches (bypass cache)",
62 | )
63 | def export(
   |     ^^^^^^ PLR0913
64 |     word_list_name: str,
65 |     output: str | None,
   |

src/floridify/cli/commands/anki.py:100:11: PLR0913 Too many arguments in function definition (8 > 5)
    |
100 | async def _export_async(
    |           ^^^^^^^^^^^^^ PLR0913
101 |     word_list_name: str,
102 |     output: str | None,
    |

src/floridify/cli/commands/anki.py:100:11: PLR0912 Too many branches (21 > 12)
    |
100 | async def _export_async(
    |           ^^^^^^^^^^^^^ PLR0912
101 |     word_list_name: str,
102 |     output: str | None,
    |

src/floridify/cli/commands/anki.py:100:11: PLR0915 Too many statements (90 > 50)
    |
100 | async def _export_async(
    |           ^^^^^^^^^^^^^ PLR0915
101 |     word_list_name: str,
102 |     output: str | None,
    |

src/floridify/cli/commands/anki.py:149:9: PLC0415 `import` should be at the top-level of a file
    |
147 |         # First pass: normalize words and build frequency map
148 |         console.print("🔍 Normalizing words and building frequency map...")
149 |         from ...core.search_pipeline import get_search_engine
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
150 |         from ...utils.text_utils import normalize_word
    |

src/floridify/cli/commands/anki.py:149:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
147 |         # First pass: normalize words and build frequency map
148 |         console.print("🔍 Normalizing words and building frequency map...")
149 |         from ...core.search_pipeline import get_search_engine
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
150 |         from ...utils.text_utils import normalize_word
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:150:9: PLC0415 `import` should be at the top-level of a file
    |
148 |         console.print("🔍 Normalizing words and building frequency map...")
149 |         from ...core.search_pipeline import get_search_engine
150 |         from ...utils.text_utils import normalize_word
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
151 |
152 |         search_engine = await get_search_engine(
    |

src/floridify/cli/commands/anki.py:150:9: TID252 Prefer absolute imports over relative imports from parent modules
    |
148 |         console.print("🔍 Normalizing words and building frequency map...")
149 |         from ...core.search_pipeline import get_search_engine
150 |         from ...utils.text_utils import normalize_word
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
151 |
152 |         search_engine = await get_search_engine(
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:216:46: RUF001 String contains ambiguous `×` (MULTIPLICATION SIGN). Did you mean `x` (LATIN SMALL LETTER X)?
    |
214 |                         all_cards.extend(cards)
215 |
216 |                         freq_indicator = f" (×{frequency})" if frequency > 1 else ""
    |                                              ^ RUF001
217 |                         console.print(
218 |                             f"  Generated {len(cards)} cards for '{canonical_word}'{freq_indicator}"
    |

src/floridify/cli/commands/anki.py:226:21: TRY400 Use `logging.exception` instead of `logging.error`
    |
225 |                 except Exception as e:
226 |                     logger.error(f"Error processing word '{canonical_word}': {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
227 |                     console.print(f"  [red]Error:[/red] Failed to process '{canonical_word}': {e}")
    |
    = help: Replace with `exception`

src/floridify/cli/commands/anki.py:226:34: G004 Logging statement uses f-string
    |
225 |                 except Exception as e:
226 |                     logger.error(f"Error processing word '{canonical_word}': {e}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
227 |                     console.print(f"  [red]Error:[/red] Failed to process '{canonical_word}': {e}")
    |

src/floridify/cli/commands/anki.py:285:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
284 |     except Exception as e:
285 |         logger.error(f"Error during Anki export: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
286 |         console.print(f"[red]Error:[/red] {e}")
    |
    = help: Replace with `exception`

src/floridify/cli/commands/anki.py:285:22: G004 Logging statement uses f-string
    |
284 |     except Exception as e:
285 |         logger.error(f"Error during Anki export: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
286 |         console.print(f"[red]Error:[/red] {e}")
    |

src/floridify/cli/commands/anki.py:292:5: PLC0415 `import` should be at the top-level of a file
    |
290 | def status() -> None:
291 |     """Check AnkiConnect availability and status."""
292 |     from ...anki.ankiconnect import AnkiDirectIntegration
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
293 |
294 |     console.print("Checking AnkiConnect status...")
    |

src/floridify/cli/commands/anki.py:292:5: TID252 Prefer absolute imports over relative imports from parent modules
    |
290 | def status() -> None:
291 |     """Check AnkiConnect availability and status."""
292 |     from ...anki.ankiconnect import AnkiDirectIntegration
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
293 |
294 |     console.print("Checking AnkiConnect status...")
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/anki.py:316:38: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
314 |                 for deck in sorted(deck_names)[:5]:
315 |                     console.print(f"  • {deck}")
316 |                 if len(deck_names) > 5:
    |                                      ^ PLR2004
317 |                     console.print(f"  ... and {len(deck_names) - 5} more")
    |

src/floridify/cli/commands/config.py:1:1: INP001 File `src/floridify/cli/commands/config.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/config.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from rich.table import Table
11 |
12 | from ...utils.paths import get_config_path
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.formatting import format_error, format_success, format_warning
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/config.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...utils.paths import get_config_path
13 | from ..utils.formatting import format_error, format_success, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/config.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...utils.paths import get_config_path
13 | from ..utils.formatting import format_error, format_success, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/config.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...utils.paths import get_config_path
13 | from ..utils.formatting import format_error, format_success, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/config.py:21:5: PIE790 [*] Unnecessary `pass` statement
   |
19 | def config_group() -> None:
20 |     """⚙️ Manage configuration and API keys."""
21 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/cli/commands/config.py:71:69: RUF010 [*] Use explicit conversion flag
   |
70 |     except Exception as e:
71 |         console.print(format_error(f"Failed to read configuration: {str(e)}"))
   |                                                                     ^^^^^^ RUF010
   |
   = help: Replace with conversion flag

src/floridify/cli/commands/config.py:90:9: SIM108 Use ternary operator `config = toml.load(config_file) if config_file.exists() else {}` instead of `if`-`else`-block
   |
89 |           # Load existing config or create new
90 | /         if config_file.exists():
91 | |             config = toml.load(config_file)
92 | |         else:
93 | |             config = {}
   | |_______________________^ SIM108
94 |
95 |           # Set value
   |
   = help: Replace `if`-`else`-block with `config = toml.load(config_file) if config_file.exists() else {}`

src/floridify/cli/commands/config.py:110:68: RUF010 [*] Use explicit conversion flag
    |
109 |     except Exception as e:
110 |         console.print(format_error(f"Failed to set configuration: {str(e)}"))
    |                                                                    ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/cli/commands/config.py:141:68: RUF010 [*] Use explicit conversion flag
    |
140 |     except Exception as e:
141 |         console.print(format_error(f"Failed to get configuration: {str(e)}"))
    |                                                                    ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/cli/commands/config.py:147:5: PIE790 [*] Unnecessary `pass` statement
    |
145 | def keys_group() -> None:
146 |     """Manage API keys."""
147 |     pass
    |     ^^^^ PIE790
    |
    = help: Remove unnecessary `pass`

src/floridify/cli/commands/config.py:180:64: RUF010 [*] Use explicit conversion flag
    |
179 |     except Exception as e:
180 |         console.print(format_error(f"Failed to list API keys: {str(e)}"))
    |                                                                ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/cli/commands/config.py:198:9: SIM108 Use ternary operator `config = toml.load(config_file) if config_file.exists() else {}` instead of `if`-`else`-block
    |
197 |           # Load existing config or create new
198 | /         if config_file.exists():
199 | |             config = toml.load(config_file)
200 | |         else:
201 | |             config = {}
    | |_______________________^ SIM108
202 |
203 |           # Set API key
    |
    = help: Replace `if`-`else`-block with `config = toml.load(config_file) if config_file.exists() else {}`

src/floridify/cli/commands/config.py:217:62: RUF010 [*] Use explicit conversion flag
    |
216 |     except Exception as e:
217 |         console.print(format_error(f"Failed to set API key: {str(e)}"))
    |                                                              ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/cli/commands/config.py:234:5: SIM108 Use ternary operator `services = ["openai", "oxford", "dictionary_com"] if service == "all" else [service]` instead of `if`-`else`-block
    |
232 |       console.print(f"[bold blue]Testing API connectivity for: {service}[/bold blue]")
233 |
234 | /     if service == "all":
235 | |         services = ["openai", "oxford", "dictionary_com"]
236 | |     else:
237 | |         services = [service]
    | |____________________________^ SIM108
238 |
239 |       for svc in services:
    |
    = help: Replace `if`-`else`-block with `services = ["openai", "oxford", "dictionary_com"] if service == "all" else [service]`

src/floridify/cli/commands/config.py:286:69: RUF010 [*] Use explicit conversion flag
    |
285 |     except Exception as e:
286 |         console.print(format_error(f"Failed to edit configuration: {str(e)}"))
    |                                                                     ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/cli/commands/config.py:293:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
291 |   def reset_config(confirm: bool) -> None:
292 |       """Reset configuration to defaults."""
293 | /     if not confirm:
294 | |         if not click.confirm("Reset all configuration to defaults?"):
    | |_____________________________________________________________________^ SIM102
295 |               console.print("Operation cancelled.")
296 |               return
    |
    = help: Combine `if` statements using `and`

src/floridify/cli/commands/config.py:307:70: RUF010 [*] Use explicit conversion flag
    |
306 |     except Exception as e:
307 |         console.print(format_error(f"Failed to reset configuration: {str(e)}"))
    |                                                                      ^^^^^^ RUF010
    |
    = help: Replace with conversion flag

src/floridify/cli/commands/config.py:315:5: RET505 [*] Unnecessary `elif` after `return` statement
    |
313 |     if value.lower() in ["true", "yes", "on"]:
314 |         return True
315 |     elif value.lower() in ["false", "no", "off"]:
    |     ^^^^ RET505
316 |         return False
    |
    = help: Remove unnecessary `elif`

src/floridify/cli/commands/database.py:1:1: INP001 File `src/floridify/cli/commands/database.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/database.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from rich.table import Table
10 |
11 | from ...constants import DictionaryProvider
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...models import (
13 |     SynthesizedDictionaryEntry,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/database.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ...constants import DictionaryProvider
12 | / from ...models import (
13 | |     SynthesizedDictionaryEntry,
14 | |     Word,
15 | | )
   | |_^ TID252
16 |   from ...storage.mongodb import MongoDBStorage
17 |   from ..utils.formatting import format_error
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/database.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ...constants import DictionaryProvider
12 | / from ...models import (
13 | |     SynthesizedDictionaryEntry,
14 | |     Word,
15 | | )
   | |_^ TID252
16 |   from ...storage.mongodb import MongoDBStorage
17 |   from ..utils.formatting import format_error
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/database.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 |     Word,
15 | )
16 | from ...storage.mongodb import MongoDBStorage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..utils.formatting import format_error
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/database.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | )
16 | from ...storage.mongodb import MongoDBStorage
17 | from ..utils.formatting import format_error
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/database.py:25:5: PIE790 [*] Unnecessary `pass` statement
   |
23 | def database_group() -> None:
24 |     """💾 Database operations and statistics."""
25 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/cli/commands/database.py:158:17: PLC0415 `import` should be at the top-level of a file
    |
156 |             if sample_entries:
157 |                 # Calculate average providers per word
158 |                 from ...models import ProviderData
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
159 |
160 |                 total_providers = 0
    |

src/floridify/cli/commands/database.py:158:17: TID252 Prefer absolute imports over relative imports from parent modules
    |
156 |             if sample_entries:
157 |                 # Calculate average providers per word
158 |                 from ...models import ProviderData
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
159 |
160 |                 total_providers = 0
    |
    = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/database.py:180:9: TRY300 Consider moving this statement to an `else` block
    |
178 |                 metrics["Words with definitions"] = f"{coverage_pct:.1f}%"
179 |
180 |         return metrics
    |         ^^^^^^^^^^^^^^ TRY300
181 |
182 |     except Exception:
    |

src/floridify/cli/commands/database.py:202:9: PLC0415 `import` should be at the top-level of a file
    |
200 |     """
201 |     if output is None:
202 |         from datetime import datetime
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
203 |
204 |         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    |

src/floridify/cli/commands/database.py:204:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
202 |         from datetime import datetime
203 |
204 |         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    |                     ^^^^^^^^^^^^^^ DTZ005
205 |         extension = "json.gz" if compress else backup_format
206 |         output = f"floridify_backup_{timestamp}.{extension}"
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/cli/commands/database.py:223:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
221 |       BACKUP_FILE: Path to the backup file
222 |       """
223 | /     if not confirm:
224 | |         if not click.confirm("This will overwrite existing data. Continue?"):
    | |_____________________________________________________________________________^ SIM102
225 |               console.print("Operation cancelled.")
226 |               return
    |
    = help: Combine `if` statements using `and`

src/floridify/cli/commands/database.py:249:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
247 |   def reindex_database(confirm: bool) -> None:
248 |       """Rebuild database indexes for optimal performance."""
249 | /     if not confirm:
250 | |         if not click.confirm("Reindexing may take several minutes. Continue?"):
    | |_______________________________________________________________________________^ SIM102
251 |               console.print("Operation cancelled.")
252 |               return
    |
    = help: Combine `if` statements using `and`

src/floridify/cli/commands/list.py:1:1: INP001 File `src/floridify/cli/commands/list.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/list.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from rich.table import Table
11 |
12 | from ...core.lookup_pipeline import lookup_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...list import WordList
14 | from ...list.parser import generate_name, parse_file
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...core.lookup_pipeline import lookup_word_pipeline
13 | from ...list import WordList
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ...list.parser import generate_name, parse_file
15 | from ...storage.mongodb import _ensure_initialized
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...core.lookup_pipeline import lookup_word_pipeline
13 | from ...list import WordList
14 | from ...list.parser import generate_name, parse_file
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...storage.mongodb import _ensure_initialized
16 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...core.lookup_pipeline import lookup_word_pipeline
13 | from ...list import WordList
14 | from ...list.parser import generate_name, parse_file
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...storage.mongodb import _ensure_initialized
16 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...list import WordList
14 | from ...list.parser import generate_name, parse_file
15 | from ...storage.mongodb import _ensure_initialized
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...utils.logging import get_logger
17 | from ..utils.formatting import console
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ...list.parser import generate_name, parse_file
15 | from ...storage.mongodb import _ensure_initialized
16 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..utils.formatting import console
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...storage.mongodb import _ensure_initialized
16 | from ...utils.logging import get_logger
17 | from ..utils.formatting import console
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 |
19 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/list.py:28:5: PIE790 [*] Unnecessary `pass` statement
   |
26 | def list_command() -> None:
27 |     """Manage word lists with dictionary lookup and storage."""
28 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/cli/commands/list.py:52:17: G004 Logging statement uses f-string
   |
50 | ) -> None:
51 |     """Async implementation of create command."""
52 |     logger.info(f"Processing word list from: {input_file}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
53 |
54 |     # Note: provider, language, semantic, no_ai parameters used for lookup configuration
   |

src/floridify/cli/commands/list.py:153:28: PLR2004 Magic value used in comparison, consider replacing `80` with a constant variable
    |
152 |         # Color based on frequency
153 |         if heat_percent >= 80:
    |                            ^^ PLR2004
154 |             heat_color = "red"
155 |             heat_bar = "█" * 8
    |

src/floridify/cli/commands/list.py:156:30: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
154 |             heat_color = "red"
155 |             heat_bar = "█" * 8
156 |         elif heat_percent >= 60:
    |                              ^^ PLR2004
157 |             heat_color = "yellow"
158 |             heat_bar = "█" * 6 + "▓" * 2
    |

src/floridify/cli/commands/list.py:159:30: PLR2004 Magic value used in comparison, consider replacing `40` with a constant variable
    |
157 |             heat_color = "yellow"
158 |             heat_bar = "█" * 6 + "▓" * 2
159 |         elif heat_percent >= 40:
    |                              ^^ PLR2004
160 |             heat_color = "green"
161 |             heat_bar = "█" * 4 + "▓" * 4
    |

src/floridify/cli/commands/list.py:162:30: PLR2004 Magic value used in comparison, consider replacing `20` with a constant variable
    |
160 |             heat_color = "green"
161 |             heat_bar = "█" * 4 + "▓" * 4
162 |         elif heat_percent >= 20:
    |                              ^^ PLR2004
163 |             heat_color = "blue"
164 |             heat_bar = "█" * 2 + "▓" * 6
    |

src/floridify/cli/commands/list.py:288:17: PERF401 Use a list comprehension to create a transformed list
    |
286 |             tasks = []
287 |             for word in batch:
288 |                 tasks.append(_lookup_word(word))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
289 |
290 |             # Execute batch
    |
    = help: Replace for loop with list comprehension

src/floridify/cli/commands/list.py:296:37: B905 [*] `zip()` without an explicit `strict=` parameter
    |
294 |                 # Track success/failure
295 |                 successful = 0
296 |                 for word, result in zip(batch, results):
    |                                     ^^^^^^^^^^^^^^^^^^^ B905
297 |                     if isinstance(result, Exception):
298 |                         logger.warning(f"Failed to process '{word}': {result}")
    |
    = help: Add explicit value for parameter `strict=`

src/floridify/cli/commands/list.py:298:40: G004 Logging statement uses f-string
    |
296 |                 for word, result in zip(batch, results):
297 |                     if isinstance(result, Exception):
298 |                         logger.warning(f"Failed to process '{word}': {result}")
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
299 |                     elif result:
300 |                         successful += 1
    |

src/floridify/cli/commands/list.py:301:38: G004 Logging statement uses f-string
    |
299 |                     elif result:
300 |                         successful += 1
301 |                         logger.debug(f"Successfully processed '{word}'")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
302 |                     else:
303 |                         logger.debug(f"No definition found for '{word}'")
    |

src/floridify/cli/commands/list.py:303:38: G004 Logging statement uses f-string
    |
301 |                         logger.debug(f"Successfully processed '{word}'")
302 |                     else:
303 |                         logger.debug(f"No definition found for '{word}'")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
304 |
305 |                 logger.debug(f"Batch {i // BATCH_SIZE + 1}: {successful}/{len(batch)} successful")
    |

src/floridify/cli/commands/list.py:305:30: G004 Logging statement uses f-string
    |
303 |                         logger.debug(f"No definition found for '{word}'")
304 |
305 |                 logger.debug(f"Batch {i // BATCH_SIZE + 1}: {successful}/{len(batch)} successful")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
306 |
307 |             except Exception as e:
    |

src/floridify/cli/commands/list.py:308:32: G004 Logging statement uses f-string
    |
307 |             except Exception as e:
308 |                 logger.warning(f"Batch processing error: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
309 |
310 |             progress.update(task, advance=len(batch))
    |

src/floridify/cli/commands/list.py:312:17: G004 Logging statement uses f-string
    |
310 |             progress.update(task, advance=len(batch))
311 |
312 |     logger.info(f"Completed processing {total_words} words")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/cli/commands/list.py:323:26: G004 Logging statement uses f-string
    |
322 |         if result:
323 |             logger.debug(f"Successfully looked up '{word}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
324 |             return True
325 |         else:
    |

src/floridify/cli/commands/list.py:325:9: RET505 [*] Unnecessary `else` after `return` statement
    |
323 |             logger.debug(f"Successfully looked up '{word}'")
324 |             return True
325 |         else:
    |         ^^^^ RET505
326 |             logger.debug(f"No definition found for '{word}'")
327 |             return False
    |
    = help: Remove unnecessary `else`

src/floridify/cli/commands/list.py:326:26: G004 Logging statement uses f-string
    |
324 |             return True
325 |         else:
326 |             logger.debug(f"No definition found for '{word}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
327 |             return False
    |

src/floridify/cli/commands/list.py:330:24: G004 Logging statement uses f-string
    |
329 |     except Exception as e:
330 |         logger.warning(f"Error looking up '{word}': {e}")
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
331 |         return False
    |

src/floridify/cli/commands/lookup.py:1:1: INP001 File `src/floridify/cli/commands/lookup.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/lookup.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from rich.console import Console
 9 |
10 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...core.lookup_pipeline import lookup_word_pipeline
12 | from ...models import Definition
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from rich.console import Console
 9 |
10 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ...core.lookup_pipeline import lookup_word_pipeline
12 | from ...models import Definition
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...constants import DictionaryProvider, Language
11 | from ...core.lookup_pipeline import lookup_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...models import Definition
13 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...constants import DictionaryProvider, Language
11 | from ...core.lookup_pipeline import lookup_word_pipeline
12 | from ...models import Definition
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...utils.logging import get_logger
14 | from ..utils.formatting import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:12:23: TC001 Move application import `...models.Definition` into a type-checking block
   |
10 | from ...constants import DictionaryProvider, Language
11 | from ...core.lookup_pipeline import lookup_word_pipeline
12 | from ...models import Definition
   |                       ^^^^^^^^^^ TC001
13 | from ...utils.logging import get_logger
14 | from ..utils.formatting import (
   |
   = help: Move into type-checking block

src/floridify/cli/commands/lookup.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...core.lookup_pipeline import lookup_word_pipeline
12 | from ...models import Definition
13 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..utils.formatting import (
15 |     format_error,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ...models import Definition
13 |   from ...utils.logging import get_logger
14 | / from ..utils.formatting import (
15 | |     format_error,
16 | |     format_meaning_based_definition,
17 | |     format_warning,
18 | | )
   | |_^ TID252
19 |
20 |   console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ...models import Definition
13 |   from ...utils.logging import get_logger
14 | / from ..utils.formatting import (
15 | |     format_error,
16 | |     format_meaning_based_definition,
17 | |     format_warning,
18 | | )
   | |_^ TID252
19 |
20 |   console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ...models import Definition
13 |   from ...utils.logging import get_logger
14 | / from ..utils.formatting import (
15 | |     format_error,
16 | |     format_meaning_based_definition,
17 | |     format_warning,
18 | | )
   | |_^ TID252
19 |
20 |   console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/lookup.py:55:5: PLR0913 Too many arguments in function definition (6 > 5)
   |
53 |     help="Force refresh all caches (bypass cache)",
54 | )
55 | def lookup(
   |     ^^^^^^ PLR0913
56 |     word: str,
57 |     provider: tuple[str, ...],
   |

src/floridify/cli/commands/lookup.py:70:11: PLR0913 Too many arguments in function definition (6 > 5)
   |
70 | async def _lookup_async(
   |           ^^^^^^^^^^^^^ PLR0913
71 |     word: str,
72 |     provider: tuple[str, ...],
   |

src/floridify/cli/commands/lookup.py:79:17: G004 Logging statement uses f-string
   |
77 | ) -> None:
78 |     """Async implementation of word lookup."""
79 |     logger.info(f"Looking up word: '{word}' with providers: {', '.join(provider)}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
80 |
81 |     try:
   |

src/floridify/cli/commands/lookup.py:116:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
115 |     except Exception as e:
116 |         logger.error(f"Lookup failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
117 |         console.print(format_error(f"Lookup failed: {e}"))
    |
    = help: Replace with `exception`

src/floridify/cli/commands/lookup.py:116:22: G004 Logging statement uses f-string
    |
115 |     except Exception as e:
116 |         logger.error(f"Lookup failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^ G004
117 |         console.print(format_error(f"Lookup failed: {e}"))
    |

src/floridify/cli/commands/search.py:1:1: INP001 File `src/floridify/cli/commands/search.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/search.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from rich.table import Table
10 |
11 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ...core.search_pipeline import get_search_engine, search_word_pipeline
13 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/search.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...constants import Language
12 | from ...core.search_pipeline import get_search_engine, search_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...utils.logging import get_logger
14 | from ..utils.formatting import format_error, format_warning
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/search.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...constants import Language
12 | from ...core.search_pipeline import get_search_engine, search_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ...utils.logging import get_logger
14 | from ..utils.formatting import format_error, format_warning
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/search.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ...constants import Language
12 | from ...core.search_pipeline import get_search_engine, search_word_pipeline
13 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..utils.formatting import format_error, format_warning
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/search.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...core.search_pipeline import get_search_engine, search_word_pipeline
13 | from ...utils.logging import get_logger
14 | from ..utils.formatting import format_error, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/search.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ...core.search_pipeline import get_search_engine, search_word_pipeline
13 | from ...utils.logging import get_logger
14 | from ..utils.formatting import format_error, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/search.py:23:5: PIE790 [*] Unnecessary `pass` statement
   |
21 | def search_group() -> None:
22 |     """🔎 Search functionality - find words across lexicons."""
23 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/cli/commands/search.py:94:17: G004 Logging statement uses f-string
   |
92 | ) -> None:
93 |     """Async implementation of word search."""
94 |     logger.info(f"Searching for: '{query}' (semantic: {semantic})")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
95 |
96 |     try:
   |

src/floridify/cli/commands/search.py:128:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
127 |     except Exception as e:
128 |         logger.error(f"Search failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
129 |         console.print(format_error(f"Search failed: {e}"))
    |
    = help: Replace with `exception`

src/floridify/cli/commands/search.py:128:22: G004 Logging statement uses f-string
    |
127 |     except Exception as e:
128 |         logger.error(f"Search failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^ G004
129 |         console.print(format_error(f"Search failed: {e}"))
    |

src/floridify/cli/commands/search.py:134:17: G004 Logging statement uses f-string
    |
132 | async def _search_similar_async(word: str, language: tuple[str, ...], max_results: int) -> None:
133 |     """Async implementation of similar word search."""
134 |     logger.info(f"Finding similar words for: '{word}'")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
135 |
136 |     try:
    |

src/floridify/cli/commands/search.py:170:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
169 |     except Exception as e:
170 |         logger.error(f"Similar word search failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
171 |         console.print(format_error(f"Similar word search failed: {e}"))
    |
    = help: Replace with `exception`

src/floridify/cli/commands/search.py:170:22: G004 Logging statement uses f-string
    |
169 |     except Exception as e:
170 |         logger.error(f"Similar word search failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
171 |         console.print(format_error(f"Similar word search failed: {e}"))
    |

src/floridify/cli/commands/search.py:202:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
201 |     except Exception as e:
202 |         logger.error(f"Stats retrieval failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
203 |         console.print(format_error(f"Stats retrieval failed: {e}"))
    |
    = help: Replace with `exception`

src/floridify/cli/commands/search.py:202:22: G004 Logging statement uses f-string
    |
201 |     except Exception as e:
202 |         logger.error(f"Stats retrieval failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
203 |         console.print(format_error(f"Stats retrieval failed: {e}"))
    |

src/floridify/cli/commands/similar.py:1:1: INP001 File `src/floridify/cli/commands/similar.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/commands/similar.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from rich.text import Text
12 |
13 | from ...ai import get_openai_connector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
15 | from ...constants import DictionaryProvider, Language
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...ai import get_openai_connector
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...constants import DictionaryProvider, Language
16 | from ...core.lookup_pipeline import lookup_word_pipeline
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...ai import get_openai_connector
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ...constants import DictionaryProvider, Language
16 | from ...core.lookup_pipeline import lookup_word_pipeline
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:14:26: TC001 Move application import `...ai.models.SynonymCandidate` into a type-checking block
   |
13 | from ...ai import get_openai_connector
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
   |                          ^^^^^^^^^^^^^^^^ TC001
15 | from ...constants import DictionaryProvider, Language
16 | from ...core.lookup_pipeline import lookup_word_pipeline
   |
   = help: Move into type-checking block

src/floridify/cli/commands/similar.py:14:44: TC001 Move application import `...ai.models.SynonymGenerationResponse` into a type-checking block
   |
13 | from ...ai import get_openai_connector
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ TC001
15 | from ...constants import DictionaryProvider, Language
16 | from ...core.lookup_pipeline import lookup_word_pipeline
   |
   = help: Move into type-checking block

src/floridify/cli/commands/similar.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...ai import get_openai_connector
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
15 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...core.lookup_pipeline import lookup_word_pipeline
17 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...ai import get_openai_connector
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
15 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...core.lookup_pipeline import lookup_word_pipeline
17 | from ...utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ...ai.models import SynonymCandidate, SynonymGenerationResponse
15 | from ...constants import DictionaryProvider, Language
16 | from ...core.lookup_pipeline import lookup_word_pipeline
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ...utils.logging import get_logger
18 | from ..utils.formatting import format_error, format_warning
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...constants import DictionaryProvider, Language
16 | from ...core.lookup_pipeline import lookup_word_pipeline
17 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 | from ..utils.formatting import format_error, format_warning
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...core.lookup_pipeline import lookup_word_pipeline
17 | from ...utils.logging import get_logger
18 | from ..utils.formatting import format_error, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 |
20 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...core.lookup_pipeline import lookup_word_pipeline
17 | from ...utils.logging import get_logger
18 | from ..utils.formatting import format_error, format_warning
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 |
20 | console = Console()
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/commands/similar.py:67:17: G004 Logging statement uses f-string
   |
65 | ) -> None:
66 |     """Async implementation of similar command."""
67 |     logger.info(f"Finding synonyms for: '{word}' (count: {count})")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
68 |
69 |     try:
   |

src/floridify/cli/commands/similar.py:107:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
106 |     except Exception as e:
107 |         logger.error(f"Similar command failed: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
108 |         console.print(format_error(f"Failed to find synonyms for '{word}': {e}"))
    |
    = help: Replace with `exception`

src/floridify/cli/commands/similar.py:107:22: G004 Logging statement uses f-string
    |
106 |     except Exception as e:
107 |         logger.error(f"Similar command failed: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
108 |         console.print(format_error(f"Failed to find synonyms for '{word}': {e}"))
    |

src/floridify/cli/commands/similar.py:138:33: PLR2004 Magic value used in comparison, consider replacing `0.9` with a constant variable
    |
137 |         # Color-code relevance
138 |         if synonym.relevance >= 0.9:
    |                                 ^^^ PLR2004
139 |             relevance_style = "bright_green"
140 |         elif synonym.relevance >= 0.7:
    |

src/floridify/cli/commands/similar.py:140:35: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
138 |         if synonym.relevance >= 0.9:
139 |             relevance_style = "bright_green"
140 |         elif synonym.relevance >= 0.7:
    |                                   ^^^ PLR2004
141 |             relevance_style = "green"
142 |         elif synonym.relevance >= 0.5:
    |

src/floridify/cli/commands/similar.py:142:35: PLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable
    |
140 |         elif synonym.relevance >= 0.7:
141 |             relevance_style = "green"
142 |         elif synonym.relevance >= 0.5:
    |                                   ^^^ PLR2004
143 |             relevance_style = "yellow"
144 |         else:
    |

src/floridify/cli/commands/similar.py:148:37: PLR2004 Magic value used in comparison, consider replacing `0.9` with a constant variable
    |
147 |         # Color-code efflorescence
148 |         if synonym.efflorescence >= 0.9:
    |                                     ^^^ PLR2004
149 |             efflorescence_style = "bright_magenta"
150 |         elif synonym.efflorescence >= 0.7:
    |

src/floridify/cli/commands/similar.py:150:39: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
148 |         if synonym.efflorescence >= 0.9:
149 |             efflorescence_style = "bright_magenta"
150 |         elif synonym.efflorescence >= 0.7:
    |                                       ^^^ PLR2004
151 |             efflorescence_style = "magenta"
152 |         elif synonym.efflorescence >= 0.5:
    |

src/floridify/cli/commands/similar.py:152:39: PLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable
    |
150 |         elif synonym.efflorescence >= 0.7:
151 |             efflorescence_style = "magenta"
152 |         elif synonym.efflorescence >= 0.5:
    |                                       ^^^ PLR2004
153 |             efflorescence_style = "blue"
154 |         else:
    |

src/floridify/cli/commands/similar.py:231:28: G004 Logging statement uses f-string
    |
230 |         except Exception as e:
231 |             logger.warning(f"Failed to get definition for '{synonym.word}': {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
232 |             continue
    |

src/floridify/cli/utils/formatting.py:1:1: INP001 File `src/floridify/cli/utils/formatting.py` is part of an implicit namespace package. Add an `__init__.py`.
src/floridify/cli/utils/formatting.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 | from rich.text import Text
18 |
19 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 | from rich.text import Text
18 |
19 | from ...constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:19:26: TC001 Move application import `...constants.DictionaryProvider` into a type-checking block
   |
17 | from rich.text import Text
18 |
19 | from ...constants import DictionaryProvider, Language
   |                          ^^^^^^^^^^^^^^^^^^ TC001
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
   |
   = help: Move into type-checking block

src/floridify/cli/utils/formatting.py:19:46: TC001 Move application import `...constants.Language` into a type-checking block
   |
17 | from rich.text import Text
18 |
19 | from ...constants import DictionaryProvider, Language
   |                                              ^^^^^^^^ TC001
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
   |
   = help: Move into type-checking block

src/floridify/cli/utils/formatting.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...constants import DictionaryProvider, Language
20 | from ...models import Definition, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...search import SearchResult
22 | from ...search.constants import SearchMethod
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...constants import DictionaryProvider, Language
20 | from ...models import Definition, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ...search import SearchResult
22 | from ...search.constants import SearchMethod
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:20:23: TC001 Move application import `...models.Definition` into a type-checking block
   |
19 | from ...constants import DictionaryProvider, Language
20 | from ...models import Definition, SynthesizedDictionaryEntry
   |                       ^^^^^^^^^^ TC001
21 | from ...search import SearchResult
22 | from ...search.constants import SearchMethod
   |
   = help: Move into type-checking block

src/floridify/cli/utils/formatting.py:20:35: TC001 Move application import `...models.SynthesizedDictionaryEntry` into a type-checking block
   |
19 | from ...constants import DictionaryProvider, Language
20 | from ...models import Definition, SynthesizedDictionaryEntry
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ TC001
21 | from ...search import SearchResult
22 | from ...search.constants import SearchMethod
   |
   = help: Move into type-checking block

src/floridify/cli/utils/formatting.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...constants import DictionaryProvider, Language
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ...search.constants import SearchMethod
23 | from ...utils.text_utils import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:21:23: TC001 Move application import `...search.SearchResult` into a type-checking block
   |
19 | from ...constants import DictionaryProvider, Language
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
   |                       ^^^^^^^^^^^^ TC001
22 | from ...search.constants import SearchMethod
23 | from ...utils.text_utils import (
   |
   = help: Move into type-checking block

src/floridify/cli/utils/formatting.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ...models import Definition, SynthesizedDictionaryEntry
21 | from ...search import SearchResult
22 | from ...search.constants import SearchMethod
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from ...utils.text_utils import (
24 |     bold_word_in_text,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 |   from ...search import SearchResult
22 |   from ...search.constants import SearchMethod
23 | / from ...utils.text_utils import (
24 | |     bold_word_in_text,
25 | |     clean_markdown,
26 | |     ensure_sentence_case,
27 | | )
   | |_^ TID252
28 |
29 |   # Unicode superscript mapping for meaning counters
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 |   from ...search import SearchResult
22 |   from ...search.constants import SearchMethod
23 | / from ...utils.text_utils import (
24 | |     bold_word_in_text,
25 | |     clean_markdown,
26 | |     ensure_sentence_case,
27 | | )
   | |_^ TID252
28 |
29 |   # Unicode superscript mapping for meaning counters
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 |   from ...search import SearchResult
22 |   from ...search.constants import SearchMethod
23 | / from ...utils.text_utils import (
24 | |     bold_word_in_text,
25 | |     clean_markdown,
26 | |     ensure_sentence_case,
27 | | )
   | |_^ TID252
28 |
29 |   # Unicode superscript mapping for meaning counters
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/cli/utils/formatting.py:58:5: RET505 [*] Unnecessary `else` after `return` statement
   |
56 |         meaning_parts = parts[1:]  # Skip word prefix like 'bank_'
57 |         return " ".join(word.lower() for word in meaning_parts)
58 |     else:
   |     ^^^^ RET505
59 |         # Fallback for single words
60 |         return meaning_id.lower()
   |
   = help: Remove unnecessary `else`

src/floridify/cli/utils/formatting.py:135:43: PLR2004 Magic value used in comparison, consider replacing `90` with a constant variable
    |
133 |     content.append(
134 |         f"📈 Success Rate: {success_rate:.1f}%",
135 |         style=("green" if success_rate >= 90 else "yellow" if success_rate >= 75 else "red"),
    |                                           ^^ PLR2004
136 |     )
    |

src/floridify/cli/utils/formatting.py:135:79: PLR2004 Magic value used in comparison, consider replacing `75` with a constant variable
    |
133 |     content.append(
134 |         f"📈 Success Rate: {success_rate:.1f}%",
135 |         style=("green" if success_rate >= 90 else "yellow" if success_rate >= 75 else "red"),
    |                                                                               ^^ PLR2004
136 |     )
    |

src/floridify/cli/utils/formatting.py:252:28: PLR2004 Magic value used in comparison, consider replacing `0.9` with a constant variable
    |
251 |         # Color-code by score
252 |         if result.score >= 0.9:
    |                            ^^^ PLR2004
253 |             score_style = "bright_green"
254 |         elif result.score >= 0.7:
    |

src/floridify/cli/utils/formatting.py:254:30: PLR2004 Magic value used in comparison, consider replacing `0.7` with a constant variable
    |
252 |         if result.score >= 0.9:
253 |             score_style = "bright_green"
254 |         elif result.score >= 0.7:
    |                              ^^^ PLR2004
255 |             score_style = "green"
256 |         elif result.score >= 0.5:
    |

src/floridify/cli/utils/formatting.py:256:30: PLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable
    |
254 |         elif result.score >= 0.7:
255 |             score_style = "green"
256 |         elif result.score >= 0.5:
    |                              ^^^ PLR2004
257 |             score_style = "yellow"
258 |         else:
    |

src/floridify/cli/utils/formatting.py:295:9: SIM108 Use ternary operator `value_str = f"{value:,}" if isinstance(value, int) and value > 1000 else str(value)` instead of `if`-`else`-block
    |
293 |       for metric, value in stats.items():
294 |           # Format large numbers with commas
295 | /         if isinstance(value, int) and value > 1000:
296 | |             value_str = f"{value:,}"
297 | |         else:
298 | |             value_str = str(value)
    | |__________________________________^ SIM108
299 |           table.add_row(metric.replace("_", " ").title(), value_str)
    |
    = help: Replace `if`-`else`-block with `value_str = f"{value:,}" if isinstance(value, int) and value > 1000 else str(value)`

src/floridify/cli/utils/formatting.py:295:47: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
293 |     for metric, value in stats.items():
294 |         # Format large numbers with commas
295 |         if isinstance(value, int) and value > 1000:
    |                                               ^^^^ PLR2004
296 |             value_str = f"{value:,}"
297 |         else:
    |

src/floridify/cli/utils/formatting.py:430:41: PGH003 Use specific rule codes when ignoring type issues
    |
428 |     use_superscripts = len(meaning_groups) > 1
429 |
430 |     content_group: Group | Text = None  # type: ignore
    |                                         ^^^^^^^^^^^^^^ PGH003
431 |
432 |     if use_superscripts:
    |

src/floridify/connectors/__init__.py:10:11: RUF022 [*] `__all__` is not sorted
   |
 8 |   Connector = WiktionaryConnector | OxfordConnector | DictionaryComConnector
 9 |
10 |   __all__ = [
   |  ___________^
11 | |     "DictionaryConnector",
12 | |     "WiktionaryConnector",
13 | |     "OxfordConnector",
14 | |     "DictionaryComConnector",
15 | |     "Connector",
16 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/connectors/apple_dictionary.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from typing import Any
 8 |
 9 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
12 | from ..storage.mongodb import get_storage
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
12 | from ..storage.mongodb import get_storage
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..constants import Language
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..core.state_tracker import Stages, StateTracker
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
12 | from ..storage.mongodb import get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
14 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ..models import Definition, Etymology, Example, Pronunciation, ProviderData, Word
12 | from ..storage.mongodb import get_storage
13 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/apple_dictionary.py:22:5: PIE790 [*] Unnecessary `pass` statement
   |
20 |     """Base exception for Apple Dictionary Service errors."""
21 |
22 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/apple_dictionary.py:28:5: PIE790 [*] Unnecessary `pass` statement
   |
26 |     """Raised when platform doesn't support Dictionary Services."""
27 |
28 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/apple_dictionary.py:34:5: PIE790 [*] Unnecessary `pass` statement
   |
32 |     """Raised when required PyObjC modules cannot be imported."""
33 |
34 |     pass
   |     ^^^^ PIE790
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/apple_dictionary.py:59:28: G004 Logging statement uses f-string
   |
57 |         """Check if running on macOS (Darwin)."""
58 |         if platform.system() != "Darwin":
59 |             logger.warning(f"Apple Dictionary Services not available on {platform.system()}")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
60 |             return False
61 |         return True
   |

src/floridify/connectors/apple_dictionary.py:70:13: PLC0415 `import` should be at the top-level of a file
   |
69 |         try:
70 |             from CoreServices import DCSCopyTextDefinition  # type: ignore[import-not-found]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
71 |
72 |             self._dictionary_service = DCSCopyTextDefinition
   |

src/floridify/connectors/apple_dictionary.py:76:17: G004 Logging statement uses f-string
   |
74 |           except ImportError as e:
75 |               logger.warning(
76 | /                 f"Failed to import CoreServices.DictionaryServices: {e}. "
77 | |                 "Install PyObjC with: pip install pyobjc-framework-CoreServices"
   | |________________________________________________________________________________^ G004
78 |               )
79 |               self._dictionary_service = None
   |

src/floridify/connectors/apple_dictionary.py:108:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
106 |             return str(definition) if definition else None
107 |         except Exception as e:
108 |             logger.error(f"Dictionary lookup failed for '{word}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
109 |             return None
    |
    = help: Replace with `exception`

src/floridify/connectors/apple_dictionary.py:108:26: G004 Logging statement uses f-string
    |
106 |             return str(definition) if definition else None
107 |         except Exception as e:
108 |             logger.error(f"Dictionary lookup failed for '{word}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
109 |             return None
    |

src/floridify/connectors/apple_dictionary.py:120:46: RUF003 Comment contains ambiguous `ˈ` (MODIFIER LETTER VERTICAL LINE). Did you mean ``` (GRAVE ACCENT)?
    |
118 |             Cleaned definition text
119 |         """
120 |         # Remove pronunciation markers like |ˈæpəl|
    |                                              ^ RUF003
121 |         text = re.sub(r"\|[^|]+\|", "", text)
    |

src/floridify/connectors/apple_dictionary.py:127:16: RET504 Unnecessary assignment to `text` before `return` statement
    |
125 |         text = text.strip()
126 |
127 |         return text
    |                ^^^^ RET504
128 |
129 |     def _extract_main_definition(self, text: str) -> str:
    |
    = help: Remove unnecessary assignment

src/floridify/connectors/apple_dictionary.py:168:41: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
166 |             matches = re.findall(pattern, definition_text)
167 |             for match in matches:
168 |                 if len(match.strip()) > 5:  # Filter out very short matches
    |                                         ^ PLR2004
169 |                     examples.append(match.strip())
    |

src/floridify/connectors/apple_dictionary.py:169:21: PERF401 Use `list.extend` to create a transformed list
    |
167 |             for match in matches:
168 |                 if len(match.strip()) > 5:  # Filter out very short matches
169 |                     examples.append(match.strip())
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
170 |
171 |         return examples
    |
    = help: Replace for loop with list.extend

src/floridify/connectors/apple_dictionary.py:196:16: RET504 Unnecessary assignment to `text` before `return` statement
    |
194 |         text = text.strip()
195 |
196 |         return text
    |                ^^^^ RET504
197 |
198 |     def _normalize_part_of_speech(self, part_of_speech: str) -> str:
    |
    = help: Remove unnecessary assignment

src/floridify/connectors/apple_dictionary.py:283:30: G004 Logging statement uses f-string
    |
282 |             if not raw_definition:
283 |                 logger.debug(f"No definition found for '{word}' in Apple Dictionary")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
284 |                 if state_tracker:
285 |                     await state_tracker.update_stage(Stages.PROVIDER_FETCH_COMPLETE)
    |

src/floridify/connectors/apple_dictionary.py:308:25: G004 Logging statement uses f-string
    |
306 |                 await state_tracker.update_stage(Stages.PROVIDER_FETCH_COMPLETE)
307 |
308 |             logger.info(f"Successfully fetched definition for '{word}' from Apple Dictionary")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
309 |             return provider_data
    |

src/floridify/connectors/apple_dictionary.py:309:13: TRY300 Consider moving this statement to an `else` block
    |
308 |             logger.info(f"Successfully fetched definition for '{word}' from Apple Dictionary")
309 |             return provider_data
    |             ^^^^^^^^^^^^^^^^^^^^ TRY300
310 |
311 |         except Exception as e:
    |

src/floridify/connectors/apple_dictionary.py:312:73: RUF010 [*] Use explicit conversion flag
    |
311 |         except Exception as e:
312 |             error_msg = f"Apple Dictionary lookup failed for '{word}': {str(e)}"
    |                                                                         ^^^^^^ RUF010
313 |             logger.error(error_msg)
314 |             if state_tracker:
    |
    = help: Replace with conversion flag

src/floridify/connectors/apple_dictionary.py:313:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
311 |         except Exception as e:
312 |             error_msg = f"Apple Dictionary lookup failed for '{word}': {str(e)}"
313 |             logger.error(error_msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^ TRY400
314 |             if state_tracker:
315 |                 await state_tracker.update_error(error_msg)
    |
    = help: Replace with `exception`

src/floridify/connectors/apple_dictionary.py:345:52: RUF003 Comment contains ambiguous `ˈ` (MODIFIER LETTER VERTICAL LINE). Did you mean ``` (GRAVE ACCENT)?
    |
343 |             return None
344 |
345 |         # Apple Dictionary includes IPA in format |ˈæpəl|
    |                                                    ^ RUF003
346 |         ipa_match = re.search(r"\|([^|]+)\|", raw_data["raw_definition"])
347 |         if ipa_match:
    |

src/floridify/connectors/apple_dictionary.py:465:14: RUF001 String contains ambiguous `ɪ` (LATIN LETTER SMALL CAPITAL I). Did you mean `i` (LATIN SMALL LETTER I)?
    |
463 |             "æ": "a",
464 |             "ə": "uh",
465 |             "ɪ": "i",
    |              ^ RUF001
466 |             "ʊ": "u",
467 |             "ɛ": "e",
    |

src/floridify/connectors/apple_dictionary.py:469:14: RUF001 String contains ambiguous `ɑ` (LATIN SMALL LETTER ALPHA). Did you mean `a` (LATIN SMALL LETTER A)?
    |
467 |             "ɛ": "e",
468 |             "ɔ": "aw",
469 |             "ɑ": "ah",
    |              ^ RUF001
470 |             "ʌ": "u",
471 |             "ˈ": "",  # Remove stress marks
    |

src/floridify/connectors/apple_dictionary.py:471:14: RUF001 String contains ambiguous `ˈ` (MODIFIER LETTER VERTICAL LINE). Did you mean ``` (GRAVE ACCENT)?
    |
469 |             "ɑ": "ah",
470 |             "ʌ": "u",
471 |             "ˈ": "",  # Remove stress marks
    |              ^ RUF001
472 |             "ˌ": "",
473 |         }
    |

src/floridify/connectors/base.py:7:29: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
  |
5 | import asyncio
6 | from abc import ABC, abstractmethod
7 | from collections.abc import Callable
  |                             ^^^^^^^^ TC003
8 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/connectors/base.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from typing import Any
 9 |
10 | from ..constants import DictionaryProvider
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:11:34: TC001 Move application import `..core.state_tracker.StateTracker` into a type-checking block
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
   |                                  ^^^^^^^^^^^^ TC001
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
13 | from ..utils.logging import get_logger
   |
   = help: Move into type-checking block

src/floridify/connectors/base.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..constants import DictionaryProvider
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ..core.state_tracker import StateTracker
12 | from ..models import Definition, Etymology, Pronunciation, ProviderData, Word
13 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/base.py:36:9: PIE790 [*] Unnecessary `pass` statement
   |
34 |     def provider_name(self) -> str:
35 |         """Name of the dictionary provider."""
36 |         pass
   |         ^^^^ PIE790
37 |
38 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/base.py:54:9: PIE790 [*] Unnecessary `pass` statement
   |
52 |             ProviderData if successful, None if not found or error
53 |         """
54 |         pass
   |         ^^^^ PIE790
55 |
56 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/base.py:66:9: PIE790 [*] Unnecessary `pass` statement
   |
64 |             Pronunciation if found, None otherwise
65 |         """
66 |         pass
   |         ^^^^ PIE790
67 |
68 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/base.py:79:9: PIE790 [*] Unnecessary `pass` statement
   |
77 |             List of Definition objects
78 |         """
79 |         pass
   |         ^^^^ PIE790
80 |
81 |     @abstractmethod
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/base.py:91:9: PIE790 [*] Unnecessary `pass` statement
   |
89 |             Etymology if found, None otherwise
90 |         """
91 |         pass
   |         ^^^^ PIE790
92 |
93 |     async def _enforce_rate_limit(self) -> None:
   |
   = help: Remove unnecessary `pass`

src/floridify/connectors/base.py:102:30: G004 Logging statement uses f-string
    |
100 |             if time_since_last < min_interval:
101 |                 wait_time = min_interval - time_since_last
102 |                 logger.debug(f"Rate limiting: waiting {wait_time:.2f}s for {self.provider_name}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
103 |                 await asyncio.sleep(wait_time)
    |

src/floridify/connectors/base.py:118:28: G004 Logging statement uses f-string
    |
116 |         """
117 |         if not response_data:
118 |             logger.warning(f"Empty response data for word '{word.text}' from {self.provider_name}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
119 |             response_data = {}
    |

src/floridify/connectors/base.py:122:19: TRY003 Avoid specifying long messages outside the exception class
    |
121 |         if not word or not word.id:
122 |             raise ValueError(f"Invalid word object provided to {self.provider_name}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
123 |
124 |         try:
    |

src/floridify/connectors/base.py:122:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
121 |         if not word or not word.id:
122 |             raise ValueError(f"Invalid word object provided to {self.provider_name}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
123 |
124 |         try:
    |
    = help: Assign to variable; remove f-string literal

src/floridify/connectors/base.py:130:32: G004 Logging statement uses f-string
    |
128 |                 pronunciation = await self.extract_pronunciation(response_data)
129 |             except Exception as e:
130 |                 logger.warning(f"Failed to extract pronunciation from {self.provider_name} for '{word.text}': {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
131 |
132 |             definitions = []
    |

src/floridify/connectors/base.py:136:32: G004 Logging statement uses f-string
    |
134 |                 definitions = await self.extract_definitions(response_data, str(word.id))
135 |             except Exception as e:
136 |                 logger.warning(f"Failed to extract definitions from {self.provider_name} for '{word.text}': {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
137 |
138 |             etymology = None
    |

src/floridify/connectors/base.py:142:32: G004 Logging statement uses f-string
    |
140 |                 etymology = await self.extract_etymology(response_data)
141 |             except Exception as e:
142 |                 logger.warning(f"Failed to extract etymology from {self.provider_name} for '{word.text}': {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
143 |
144 |             # Save pronunciation if found
    |

src/floridify/connectors/base.py:152:21: TRY400 Use `logging.exception` instead of `logging.error`
    |
150 |                     pronunciation_id = str(pronunciation.id)
151 |                 except Exception as e:
152 |                     logger.error(f"Failed to save pronunciation from {self.provider_name} for '{word.text}': {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
153 |
154 |             # Save definitions and collect IDs
    |
    = help: Replace with `exception`

src/floridify/connectors/base.py:152:34: G004 Logging statement uses f-string
    |
150 |                     pronunciation_id = str(pronunciation.id)
151 |                 except Exception as e:
152 |                     logger.error(f"Failed to save pronunciation from {self.provider_name} for '{word.text}': {e}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
153 |
154 |             # Save definitions and collect IDs
    |

src/floridify/connectors/base.py:161:21: TRY400 Use `logging.exception` instead of `logging.error`
    |
159 |                     definition_ids.append(str(definition.id))
160 |                 except Exception as e:
161 |                     logger.error(f"Failed to save definition from {self.provider_name} for '{word.text}': {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
162 |
163 |             # Create and save provider data
    |
    = help: Replace with `exception`

src/floridify/connectors/base.py:161:34: G004 Logging statement uses f-string
    |
159 |                     definition_ids.append(str(definition.id))
160 |                 except Exception as e:
161 |                     logger.error(f"Failed to save definition from {self.provider_name} for '{word.text}': {e}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
162 |
163 |             # Create and save provider data
    |

src/floridify/connectors/base.py:181:26: G004 Logging statement uses f-string
    |
179 |               await provider_data.save()
180 |
181 |               logger.debug(f"Successfully normalized response from {self.provider_name} for '{word.text}': "
    |  __________________________^
182 | |                         f"{len(definition_ids)} definitions, pronunciation: {pronunciation_id is not None}")
    | |___________________________________________________________________________________________________________^ G004
183 |
184 |               return provider_data
    |

src/floridify/connectors/base.py:184:13: TRY300 Consider moving this statement to an `else` block
    |
182 |                         f"{len(definition_ids)} definitions, pronunciation: {pronunciation_id is not None}")
183 |
184 |             return provider_data
    |             ^^^^^^^^^^^^^^^^^^^^ TRY300
185 |
186 |         except Exception as e:
    |

src/floridify/connectors/base.py:187:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
186 |         except Exception as e:
187 |             logger.error(f"Failed to normalize response from {self.provider_name} for '{word.text}': {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
188 |             raise
    |
    = help: Replace with `exception`

src/floridify/connectors/base.py:187:26: G004 Logging statement uses f-string
    |
186 |         except Exception as e:
187 |             logger.error(f"Failed to normalize response from {self.provider_name} for '{word.text}': {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
188 |             raise
    |

src/floridify/connectors/dictionary_com.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from typing import Any
11 |
12 | from ..core.state_tracker import Stages, StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..models import (
14 |     Definition,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from typing import Any
11 |
12 | from ..core.state_tracker import Stages, StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..models import (
14 |     Definition,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..core.state_tracker import Stages, StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Pronunciation,
17 | |     ProviderData,
18 | | )
   | |_^ TID252
19 |   from ..utils.logging import get_logger
20 |   from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..core.state_tracker import Stages, StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Pronunciation,
17 | |     ProviderData,
18 | | )
   | |_^ TID252
19 |   from ..utils.logging import get_logger
20 |   from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..core.state_tracker import Stages, StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Pronunciation,
17 | |     ProviderData,
18 | | )
   | |_^ TID252
19 |   from ..utils.logging import get_logger
20 |   from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..core.state_tracker import Stages, StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Pronunciation,
17 | |     ProviderData,
18 | | )
   | |_^ TID252
19 |   from ..utils.logging import get_logger
20 |   from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:14:5: TC001 Move application import `..models.Definition` into a type-checking block
   |
12 | from ..core.state_tracker import Stages, StateTracker
13 | from ..models import (
14 |     Definition,
   |     ^^^^^^^^^^ TC001
15 |     Etymology,
16 |     Pronunciation,
   |
   = help: Move into type-checking block

src/floridify/connectors/dictionary_com.py:15:5: TC001 Move application import `..models.Etymology` into a type-checking block
   |
13 | from ..models import (
14 |     Definition,
15 |     Etymology,
   |     ^^^^^^^^^ TC001
16 |     Pronunciation,
17 |     ProviderData,
   |
   = help: Move into type-checking block

src/floridify/connectors/dictionary_com.py:16:5: TC001 Move application import `..models.Pronunciation` into a type-checking block
   |
14 |     Definition,
15 |     Etymology,
16 |     Pronunciation,
   |     ^^^^^^^^^^^^^ TC001
17 |     ProviderData,
18 | )
   |
   = help: Move into type-checking block

src/floridify/connectors/dictionary_com.py:17:5: TC001 Move application import `..models.ProviderData` into a type-checking block
   |
15 |     Etymology,
16 |     Pronunciation,
17 |     ProviderData,
   |     ^^^^^^^^^^^^ TC001
18 | )
19 | from ..utils.logging import get_logger
   |
   = help: Move into type-checking block

src/floridify/connectors/dictionary_com.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
17 |     ProviderData,
18 | )
19 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/dictionary_com.py:70:25: G004 Logging statement uses f-string
   |
69 |             # TODO: Implement Dictionary.com API integration
70 |             logger.info(f"Dictionary.com connector stub called for word: {word}")
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
71 |
72 |             # Simulate some work for the stub
   |

src/floridify/connectors/dictionary_com.py:83:13: TRY300 Consider moving this statement to an `else` block
   |
81 |                 )
82 |
83 |             return None
   |             ^^^^^^^^^^^ TRY300
84 |
85 |         except Exception as e:
   |

src/floridify/connectors/dictionary_com.py:87:69: RUF010 [*] Use explicit conversion flag
   |
85 |         except Exception as e:
86 |             if state_tracker:
87 |                 await state_tracker.update_error(f"Provider error: {str(e)}")
   |                                                                     ^^^^^^ RUF010
88 |
89 |             logger.error(f"Error in Dictionary.com stub for {word}: {e}")
   |
   = help: Replace with conversion flag

src/floridify/connectors/dictionary_com.py:89:13: TRY400 Use `logging.exception` instead of `logging.error`
   |
87 |                 await state_tracker.update_error(f"Provider error: {str(e)}")
88 |
89 |             logger.error(f"Error in Dictionary.com stub for {word}: {e}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
90 |
91 |             return None
   |
   = help: Replace with `exception`

src/floridify/connectors/dictionary_com.py:89:26: G004 Logging statement uses f-string
   |
87 |                 await state_tracker.update_error(f"Provider error: {str(e)}")
88 |
89 |             logger.error(f"Error in Dictionary.com stub for {word}: {e}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
90 |
91 |             return None
   |

src/floridify/connectors/oxford.py:6:29: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
  |
5 | import asyncio
6 | from collections.abc import Callable
  |                             ^^^^^^^^ TC003
7 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/connectors/oxford.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | import httpx
10 |
11 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..core.state_tracker import StateTracker
13 | from ..models import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ..constants import Language
12 | from ..core.state_tracker import StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..models import (
14 |     Definition,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:12:34: TC001 Move application import `..core.state_tracker.StateTracker` into a type-checking block
   |
11 | from ..constants import Language
12 | from ..core.state_tracker import StateTracker
   |                                  ^^^^^^^^^^^^ TC001
13 | from ..models import (
14 |     Definition,
   |
   = help: Move into type-checking block

src/floridify/connectors/oxford.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ..constants import Language
12 |   from ..core.state_tracker import StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Example,
17 | |     Pronunciation,
18 | |     ProviderData,
19 | |     Word,
20 | | )
   | |_^ TID252
21 |   from ..storage.mongodb import get_storage
22 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ..constants import Language
12 |   from ..core.state_tracker import StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Example,
17 | |     Pronunciation,
18 | |     ProviderData,
19 | |     Word,
20 | | )
   | |_^ TID252
21 |   from ..storage.mongodb import get_storage
22 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ..constants import Language
12 |   from ..core.state_tracker import StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Example,
17 | |     Pronunciation,
18 | |     ProviderData,
19 | |     Word,
20 | | )
   | |_^ TID252
21 |   from ..storage.mongodb import get_storage
22 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ..constants import Language
12 |   from ..core.state_tracker import StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Example,
17 | |     Pronunciation,
18 | |     ProviderData,
19 | |     Word,
20 | | )
   | |_^ TID252
21 |   from ..storage.mongodb import get_storage
22 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ..constants import Language
12 |   from ..core.state_tracker import StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Example,
17 | |     Pronunciation,
18 | |     ProviderData,
19 | |     Word,
20 | | )
   | |_^ TID252
21 |   from ..storage.mongodb import get_storage
22 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 |   from ..constants import Language
12 |   from ..core.state_tracker import StateTracker
13 | / from ..models import (
14 | |     Definition,
15 | |     Etymology,
16 | |     Example,
17 | |     Pronunciation,
18 | |     ProviderData,
19 | |     Word,
20 | | )
   | |_^ TID252
21 |   from ..storage.mongodb import get_storage
22 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 |     Word,
20 | )
21 | from ..storage.mongodb import get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ..utils.logging import get_logger
23 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | )
21 | from ..storage.mongodb import get_storage
22 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/oxford.py:92:40: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable
   |
90 |             response = await self.session.get(url)
91 |
92 |             if response.status_code == 404:
   |                                        ^^^ PLR2004
93 |                 return None  # Word not found
94 |             elif response.status_code == 429:
   |

src/floridify/connectors/oxford.py:94:13: RET505 [*] Unnecessary `elif` after `return` statement
   |
92 |             if response.status_code == 404:
93 |                 return None  # Word not found
94 |             elif response.status_code == 429:
   |             ^^^^ RET505
95 |                 # Rate limited - wait and retry once
96 |                 await asyncio.sleep(1)
   |
   = help: Remove unnecessary `elif`

src/floridify/connectors/oxford.py:94:42: PLR2004 Magic value used in comparison, consider replacing `429` with a constant variable
   |
92 |             if response.status_code == 404:
93 |                 return None  # Word not found
94 |             elif response.status_code == 429:
   |                                          ^^^ PLR2004
95 |                 # Rate limited - wait and retry once
96 |                 await asyncio.sleep(1)
   |

src/floridify/connectors/oxford.py:105:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
104 |         except Exception as e:
105 |             logger.error(f"Error fetching {word} from Oxford: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
106 |             return None
    |
    = help: Replace with `exception`

src/floridify/connectors/oxford.py:105:26: G004 Logging statement uses f-string
    |
104 |         except Exception as e:
105 |             logger.error(f"Error fetching {word} from Oxford: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
106 |             return None
    |

src/floridify/connectors/oxford.py:196:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
194 |                         )
195 |         except Exception as e:
196 |             logger.error(f"Error extracting pronunciation: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
197 |
198 |         return None
    |
    = help: Replace with `exception`

src/floridify/connectors/oxford.py:196:26: G004 Logging statement uses f-string
    |
194 |                         )
195 |         except Exception as e:
196 |             logger.error(f"Error extracting pronunciation: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
197 |
198 |         return None
    |

src/floridify/connectors/oxford.py:200:15: PLR0912 Too many branches (14 > 12)
    |
198 |         return None
199 |
200 |     async def extract_definitions(self, raw_data: dict[str, Any], word_id: str) -> list[Definition]:
    |               ^^^^^^^^^^^^^^^^^^^ PLR0912
201 |         """Extract definitions from Oxford data.
    |

src/floridify/connectors/oxford.py:287:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
286 |         except Exception as e:
287 |             logger.error(f"Error extracting definitions: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
288 |
289 |         return definitions
    |
    = help: Replace with `exception`

src/floridify/connectors/oxford.py:287:26: G004 Logging statement uses f-string
    |
286 |         except Exception as e:
287 |             logger.error(f"Error extracting definitions: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
288 |
289 |         return definitions
    |

src/floridify/connectors/oxford.py:320:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
318 |                             )
319 |         except Exception as e:
320 |             logger.error(f"Error extracting etymology: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
321 |
322 |         return None
    |
    = help: Replace with `exception`

src/floridify/connectors/oxford.py:320:26: G004 Logging statement uses f-string
    |
318 |                             )
319 |         except Exception as e:
320 |             logger.error(f"Error extracting etymology: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
321 |
322 |         return None
    |

src/floridify/connectors/wiktionary.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | import wikitextparser as wtp  # type: ignore[import-untyped]
11 |
12 | from ..caching import get_cached_http_client
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..constants import Language
14 | from ..core.state_tracker import Stages, StateTracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..caching import get_cached_http_client
13 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..core.state_tracker import Stages, StateTracker
15 | from ..models import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..caching import get_cached_http_client
13 | from ..constants import Language
14 | from ..core.state_tracker import Stages, StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..models import (
16 |     Definition,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..caching import get_cached_http_client
13 | from ..constants import Language
14 | from ..core.state_tracker import Stages, StateTracker
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..models import (
16 |     Definition,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 |   from ..constants import Language
14 |   from ..core.state_tracker import Stages, StateTracker
15 | / from ..models import (
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     Word,
22 | | )
   | |_^ TID252
23 |   from ..storage.mongodb import get_storage
24 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 |   from ..constants import Language
14 |   from ..core.state_tracker import Stages, StateTracker
15 | / from ..models import (
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     Word,
22 | | )
   | |_^ TID252
23 |   from ..storage.mongodb import get_storage
24 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 |   from ..constants import Language
14 |   from ..core.state_tracker import Stages, StateTracker
15 | / from ..models import (
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     Word,
22 | | )
   | |_^ TID252
23 |   from ..storage.mongodb import get_storage
24 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 |   from ..constants import Language
14 |   from ..core.state_tracker import Stages, StateTracker
15 | / from ..models import (
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     Word,
22 | | )
   | |_^ TID252
23 |   from ..storage.mongodb import get_storage
24 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 |   from ..constants import Language
14 |   from ..core.state_tracker import Stages, StateTracker
15 | / from ..models import (
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     Word,
22 | | )
   | |_^ TID252
23 |   from ..storage.mongodb import get_storage
24 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 |   from ..constants import Language
14 |   from ..core.state_tracker import Stages, StateTracker
15 | / from ..models import (
16 | |     Definition,
17 | |     Etymology,
18 | |     Example,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     Word,
22 | | )
   | |_^ TID252
23 |   from ..storage.mongodb import get_storage
24 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:23:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
21 |     Word,
22 | )
23 | from ..storage.mongodb import get_storage
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
24 | from ..utils.logging import get_logger
25 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:24:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
22 | )
23 | from ..storage.mongodb import get_storage
24 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
25 | from .base import DictionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/connectors/wiktionary.py:99:20: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 98 |       # Word type mappings
 99 |       POS_MAPPINGS = {
    |  ____________________^
100 | |         "noun": "noun",
101 | |         "verb": "verb",
102 | |         "adjective": "adjective",
103 | |         "adverb": "adverb",
104 | |         "pronoun": "pronoun",
105 | |         "preposition": "preposition",
106 | |         "conjunction": "conjunction",
107 | |         "interjection": "interjection",
108 | |         "determiner": "adjective",  # Map to adjective
109 | |         "article": "adjective",  # Map to adjective
110 | |     }
    | |_____^ RUF012
111 |
112 |       def __init__(self, rate_limit: float = 8.0, force_refresh: bool = False) -> None:
    |

src/floridify/connectors/wiktionary.py:168:21: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
166 |                   if stage == "connecting" and state_tracker:
167 |                       # Schedule async progress report
168 | /                     asyncio.create_task(
169 | |                         state_tracker.update(
170 | |                             stage="PROVIDER_FETCH_HTTP_CONNECTING",
171 | |                             message=f"Connecting to {self.provider_name}",
172 | |                             details={"word": word, **metadata},
173 | |                         )
174 | |                     )
    | |_____________________^ RUF006
175 |                   elif stage == "downloaded":
176 |                       if state_tracker:
    |

src/floridify/connectors/wiktionary.py:175:17: SIM102 Use a single `if` statement instead of nested `if` statements
    |
173 |                           )
174 |                       )
175 | /                 elif stage == "downloaded":
176 | |                     if state_tracker:
    | |_____________________________________^ SIM102
177 |                           # Schedule async progress report
178 |                           asyncio.create_task(
    |
    = help: Combine `if` statements using `and`

src/floridify/connectors/wiktionary.py:178:25: RUF006 Store a reference to the return value of `asyncio.create_task`
    |
176 |                       if state_tracker:
177 |                           # Schedule async progress report
178 | /                         asyncio.create_task(
179 | |                             state_tracker.update(
180 | |                                 stage="PROVIDER_FETCH_HTTP_DOWNLOADING",
181 | |                                 message=f"Downloading from {self.provider_name}",
182 | |                                 details={"word": word, **metadata},
183 | |                             )
184 | |                         )
    | |_________________________^ RUF006
185 |
186 |               response = await self.http_client.get(
    |

src/floridify/connectors/wiktionary.py:195:40: PLR2004 Magic value used in comparison, consider replacing `429` with a constant variable
    |
193 |             )
194 |
195 |             if response.status_code == 429:
    |                                        ^^^ PLR2004
196 |                 logger.warning("Rate limited by Wiktionary, waiting 60s...")
197 |                 if state_tracker:
    |

src/floridify/connectors/wiktionary.py:227:13: TRY300 Consider moving this statement to an `else` block
    |
225 |                 await state_tracker.update(stage=Stages.PROVIDER_FETCH_HTTP_COMPLETE, progress=58)
226 |
227 |             return result
    |             ^^^^^^^^^^^^^ TRY300
228 |
229 |         except Exception as e:
    |

src/floridify/connectors/wiktionary.py:231:69: RUF010 [*] Use explicit conversion flag
    |
229 |         except Exception as e:
230 |             if state_tracker:
231 |                 await state_tracker.update_error(f"Provider error: {str(e)}")
    |                                                                     ^^^^^^ RUF010
232 |
233 |             logger.error(f"Error fetching {word} from Wiktionary: {e}")
    |
    = help: Replace with conversion flag

src/floridify/connectors/wiktionary.py:233:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
231 |                 await state_tracker.update_error(f"Provider error: {str(e)}")
232 |
233 |             logger.error(f"Error fetching {word} from Wiktionary: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
234 |             return None
    |
    = help: Replace with `exception`

src/floridify/connectors/wiktionary.py:233:26: G004 Logging statement uses f-string
    |
231 |                 await state_tracker.update_error(f"Provider error: {str(e)}")
232 |
233 |             logger.error(f"Error fetching {word} from Wiktionary: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
234 |             return None
    |

src/floridify/connectors/wiktionary.py:270:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
269 |         except Exception as e:
270 |             logger.error(f"Error parsing Wiktionary response for {word}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
271 |             return None
    |
    = help: Replace with `exception`

src/floridify/connectors/wiktionary.py:270:26: G004 Logging statement uses f-string
    |
269 |         except Exception as e:
270 |             logger.error(f"Error parsing Wiktionary response for {word}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
271 |             return None
    |

src/floridify/connectors/wiktionary.py:301:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
300 |         except Exception as e:
301 |             logger.error(f"Error in comprehensive extraction: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
302 |             return WiktionaryExtractedData(definitions=[])
    |
    = help: Replace with `exception`

src/floridify/connectors/wiktionary.py:301:26: G004 Logging statement uses f-string
    |
300 |         except Exception as e:
301 |             logger.error(f"Error in comprehensive extraction: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
302 |             return WiktionaryExtractedData(definitions=[])
    |

src/floridify/connectors/wiktionary.py:310:38: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
308 |                 section.title
309 |                 and section.title.strip().lower() == language.lower()
310 |                 and section.level == 2
    |                                      ^ PLR2004
311 |             ):  # Language sections are level 2 (==)
312 |                 return section
    |

src/floridify/connectors/wiktionary.py:339:60: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
338 |             for idx, def_text in enumerate(definition_texts):
339 |                 if not def_text or len(def_text.strip()) < 5:
    |                                                            ^ PLR2004
340 |                     continue
    |

src/floridify/connectors/wiktionary.py:385:43: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
383 |             # Clean up the definition text
384 |             content = match.strip()
385 |             if content and len(content) > 5:  # Basic quality filter
    |                                           ^ PLR2004
386 |                 items.append(content)
    |

src/floridify/connectors/wiktionary.py:401:17: SIM102 Use a single `if` statement instead of nested `if` statements
    |
399 |                   template_name = template.name.strip().lower()
400 |
401 | /                 if template_name in ["ux", "uxi", "usex"]:
402 | |                     # Usage example templates
403 | |                     if len(template.arguments) >= 2:
    | |____________________________________________________^ SIM102
404 |                           example_text = str(template.arguments[1].value).strip()
405 |                           clean_example = self.cleaner.clean_text(
    |
    = help: Combine `if` statements using `and`

src/floridify/connectors/wiktionary.py:403:51: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
401 |                 if template_name in ["ux", "uxi", "usex"]:
402 |                     # Usage example templates
403 |                     if len(template.arguments) >= 2:
    |                                                   ^ PLR2004
404 |                         example_text = str(template.arguments[1].value).strip()
405 |                         clean_example = self.cleaner.clean_text(
    |

src/floridify/connectors/wiktionary.py:408:67: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
406 |                             example_text, preserve_structure=True
407 |                         )
408 |                         if clean_example and len(clean_example) > 10:
    |                                                                   ^^ PLR2004
409 |                             example = Example(
410 |                                 definition_id=definition_id,
    |

src/floridify/connectors/wiktionary.py:417:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
415 |                             examples.append(example)
416 |         except Exception as e:
417 |             logger.error(f"Error extracting examples: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
418 |
419 |         return examples
    |
    = help: Replace with `exception`

src/floridify/connectors/wiktionary.py:417:26: G004 Logging statement uses f-string
    |
415 |                             examples.append(example)
416 |         except Exception as e:
417 |             logger.error(f"Error extracting examples: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
418 |
419 |         return examples
    |

src/floridify/connectors/wiktionary.py:441:26: G004 Logging statement uses f-string
    |
440 |         except Exception as e:
441 |             logger.debug(f"Error extracting synonyms: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
442 |
443 |         return synonyms[:10]  # Limit to 10 synonyms
    |

src/floridify/connectors/wiktionary.py:453:9: PLR0912 Too many branches (22 > 12)
    |
451 |         return None
452 |
453 |     def _extract_pronunciation(self, section: wtp.Section, word_id: str) -> Pronunciation | None:
    |         ^^^^^^^^^^^^^^^^^^^^^^ PLR0912
454 |         """Extract pronunciation comprehensively."""
455 |         ipa_american = None
    |

src/floridify/connectors/wiktionary.py:511:25: SIM102 Use a single `if` statement instead of nested `if` statements
    |
509 |                           arg_value = str(arg.value).strip()
510 |                           # Filter out file extensions and language codes
511 | /                         if (
512 | |                             arg_value
513 | |                             and len(arg_value) > 2
514 | |                             and not any(
515 | |                                 marker in arg_value.lower()
516 | |                                 for marker in [
517 | |                                     ".ogg",
518 | |                                     ".mp3",
519 | |                                     ".wav",
520 | |                                     "audio",
521 | |                                     "file:",
522 | |                                     "en",
523 | |                                     "us",
524 | |                                     "uk",
525 | |                                 ]
526 | |                             )
527 | |                             and "/" not in arg_value
528 | |                             and "|" not in arg_value
529 | |                         ):  # Avoid template syntax
530 | |                             # This might be a phonetic pronunciation
531 | |                             if not phonetic and not arg_value.startswith("{{"):
    | |_______________________________________________________________________________^ SIM102
532 |                                   phonetic = arg_value
533 |                                   break
    |
    = help: Combine `if` statements using `and`

src/floridify/connectors/wiktionary.py:513:50: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
511 |                         if (
512 |                             arg_value
513 |                             and len(arg_value) > 2
    |                                                  ^ PLR2004
514 |                             and not any(
515 |                                 marker in arg_value.lower()
    |

src/floridify/connectors/wiktionary.py:554:26: G004 Logging statement uses f-string
    |
553 |         except Exception as e:
554 |             logger.debug(f"Error extracting pronunciation: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
555 |
556 |         return None
    |

src/floridify/connectors/wiktionary.py:596:38: RUF001 String contains ambiguous `ˈ` (MODIFIER LETTER VERTICAL LINE). Did you mean ``` (GRAVE ACCENT)?
    |
595 |         phonetic = ipa.replace("/", "").replace("[", "").replace("]", "")
596 |         phonetic = phonetic.replace("ˈ", "").replace("ˌ", "")  # Remove stress
    |                                      ^ RUF001
597 |
598 |         # Enhanced IPA to phonetic mapping
    |

src/floridify/connectors/wiktionary.py:600:14: RUF001 String contains ambiguous `ɪ` (LATIN LETTER SMALL CAPITAL I). Did you mean `i` (LATIN SMALL LETTER I)?
    |
598 |         # Enhanced IPA to phonetic mapping
599 |         substitutions = {
600 |             "ɪ": "i",
    |              ^ RUF001
601 |             "ɛ": "e",
602 |             "æ": "a",
    |

src/floridify/connectors/wiktionary.py:603:14: RUF001 String contains ambiguous `ɑ` (LATIN SMALL LETTER ALPHA). Did you mean `a` (LATIN SMALL LETTER A)?
    |
601 |             "ɛ": "e",
602 |             "æ": "a",
603 |             "ɑ": "ah",
    |              ^ RUF001
604 |             "ɔ": "aw",
605 |             "ʊ": "u",
    |

src/floridify/connectors/wiktionary.py:616:14: RUF001 String contains ambiguous `ʔ` (LATIN LETTER GLOTTAL STOP). Did you mean `?` (QUESTION MARK)?
    |
614 |             "ɹ": "r",
615 |             "ɾ": "t",
616 |             "ʔ": "",
    |              ^ RUF001
617 |             "ː": "",
618 |             "ˑ": "",
    |

src/floridify/connectors/wiktionary.py:617:14: RUF001 String contains ambiguous `ː` (MODIFIER LETTER TRIANGULAR COLON). Did you mean `:` (COLON)?
    |
615 |             "ɾ": "t",
616 |             "ʔ": "",
617 |             "ː": "",
    |              ^ RUF001
618 |             "ˑ": "",
619 |             "eɪ": "ay",
    |

src/floridify/connectors/wiktionary.py:619:15: RUF001 String contains ambiguous `ɪ` (LATIN LETTER SMALL CAPITAL I). Did you mean `i` (LATIN SMALL LETTER I)?
    |
617 |             "ː": "",
618 |             "ˑ": "",
619 |             "eɪ": "ay",
    |               ^ RUF001
620 |             "aɪ": "eye",
621 |             "ɔɪ": "oy",
    |

src/floridify/connectors/wiktionary.py:620:15: RUF001 String contains ambiguous `ɪ` (LATIN LETTER SMALL CAPITAL I). Did you mean `i` (LATIN SMALL LETTER I)?
    |
618 |             "ˑ": "",
619 |             "eɪ": "ay",
620 |             "aɪ": "eye",
    |               ^ RUF001
621 |             "ɔɪ": "oy",
622 |             "aʊ": "ow",
    |

src/floridify/connectors/wiktionary.py:640:28: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
638 |         # Validation
639 |         if (
640 |             len(cleaned) < 2
    |                            ^ PLR2004
641 |             or len(cleaned) > 50
642 |             or cleaned.lower() in {"thesaurus", "see", "also", "compare", "etc", "and", "or"}
    |

src/floridify/connectors/wiktionary.py:641:31: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
639 |         if (
640 |             len(cleaned) < 2
641 |             or len(cleaned) > 50
    |                               ^^ PLR2004
642 |             or cleaned.lower() in {"thesaurus", "see", "also", "compare", "etc", "and", "or"}
643 |         ):
    |

src/floridify/core/lookup_pipeline.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | import time
 8 |
 9 | from ..ai import get_definition_synthesizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..connectors.apple_dictionary import AppleDictionaryConnector
11 | from ..connectors.dictionary_com import DictionaryComConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..ai import get_definition_synthesizer
10 | from ..connectors.apple_dictionary import AppleDictionaryConnector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..connectors.dictionary_com import DictionaryComConnector
12 | from ..connectors.oxford import OxfordConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from ..ai import get_definition_synthesizer
10 | from ..connectors.apple_dictionary import AppleDictionaryConnector
11 | from ..connectors.dictionary_com import DictionaryComConnector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from ..connectors.oxford import OxfordConnector
13 | from ..connectors.wiktionary import WiktionaryConnector
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ..connectors.apple_dictionary import AppleDictionaryConnector
11 | from ..connectors.dictionary_com import DictionaryComConnector
12 | from ..connectors.oxford import OxfordConnector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from ..connectors.dictionary_com import DictionaryComConnector
12 | from ..connectors.oxford import OxfordConnector
13 | from ..connectors.wiktionary import WiktionaryConnector
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..constants import DictionaryProvider, Language
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..connectors.oxford import OxfordConnector
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
16 | from ..storage.mongodb import get_synthesized_entry
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..connectors.oxford import OxfordConnector
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
16 | from ..storage.mongodb import get_synthesized_entry
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..storage.mongodb import get_synthesized_entry
17 | from ..utils.config import Config
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ..storage.mongodb import get_synthesized_entry
17 | from ..utils.config import Config
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:15:29: TC001 Move application import `..models.models.ProviderData` into a type-checking block
   |
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
   |                             ^^^^^^^^^^^^ TC001
16 | from ..storage.mongodb import get_synthesized_entry
17 | from ..utils.config import Config
   |
   = help: Move into type-checking block

src/floridify/core/lookup_pipeline.py:15:43: TC001 Move application import `..models.models.SynthesizedDictionaryEntry` into a type-checking block
   |
13 | from ..connectors.wiktionary import WiktionaryConnector
14 | from ..constants import DictionaryProvider, Language
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ TC001
16 | from ..storage.mongodb import get_synthesized_entry
17 | from ..utils.config import Config
   |
   = help: Move into type-checking block

src/floridify/core/lookup_pipeline.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
14 | from ..constants import DictionaryProvider, Language
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
16 | from ..storage.mongodb import get_synthesized_entry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..utils.config import Config
18 | from ..utils.logging import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ..models.models import ProviderData, SynthesizedDictionaryEntry
16 | from ..storage.mongodb import get_synthesized_entry
17 | from ..utils.config import Config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 | from ..utils.logging import (
19 |     get_logger,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 |   from ..storage.mongodb import get_synthesized_entry
17 |   from ..utils.config import Config
18 | / from ..utils.logging import (
19 | |     get_logger,
20 | |     log_metrics,
21 | |     log_provider_fetch,
22 | |     log_stage,
23 | |     log_timing,
24 | | )
   | |_^ TID252
25 |   from .search_pipeline import find_best_match
26 |   from .state_tracker import Stages, StateTracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 |   from ..storage.mongodb import get_synthesized_entry
17 |   from ..utils.config import Config
18 | / from ..utils.logging import (
19 | |     get_logger,
20 | |     log_metrics,
21 | |     log_provider_fetch,
22 | |     log_stage,
23 | |     log_timing,
24 | | )
   | |_^ TID252
25 |   from .search_pipeline import find_best_match
26 |   from .state_tracker import Stages, StateTracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 |   from ..storage.mongodb import get_synthesized_entry
17 |   from ..utils.config import Config
18 | / from ..utils.logging import (
19 | |     get_logger,
20 | |     log_metrics,
21 | |     log_provider_fetch,
22 | |     log_stage,
23 | |     log_timing,
24 | | )
   | |_^ TID252
25 |   from .search_pipeline import find_best_match
26 |   from .state_tracker import Stages, StateTracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 |   from ..storage.mongodb import get_synthesized_entry
17 |   from ..utils.config import Config
18 | / from ..utils.logging import (
19 | |     get_logger,
20 | |     log_metrics,
21 | |     log_provider_fetch,
22 | |     log_stage,
23 | |     log_timing,
24 | | )
   | |_^ TID252
25 |   from .search_pipeline import find_best_match
26 |   from .state_tracker import Stages, StateTracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 |   from ..storage.mongodb import get_synthesized_entry
17 |   from ..utils.config import Config
18 | / from ..utils.logging import (
19 | |     get_logger,
20 | |     log_metrics,
21 | |     log_provider_fetch,
22 | |     log_stage,
23 | |     log_timing,
24 | | )
   | |_^ TID252
25 |   from .search_pipeline import find_best_match
26 |   from .state_tracker import Stages, StateTracker
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/lookup_pipeline.py:33:11: PLR0913 Too many arguments in function definition (7 > 5)
   |
31 | @log_timing
32 | @log_stage("Word Lookup Pipeline", "📚")
33 | async def lookup_word_pipeline(
   |           ^^^^^^^^^^^^^^^^^^^^ PLR0913
34 |     word: str,
35 |     providers: list[DictionaryProvider] | None = None,
   |

src/floridify/core/lookup_pipeline.py:33:11: PLR0911 Too many return statements (10 > 6)
   |
31 | @log_timing
32 | @log_stage("Word Lookup Pipeline", "📚")
33 | async def lookup_word_pipeline(
   |           ^^^^^^^^^^^^^^^^^^^^ PLR0911
34 |     word: str,
35 |     providers: list[DictionaryProvider] | None = None,
   |

src/floridify/core/lookup_pipeline.py:33:11: PLR0912 Too many branches (23 > 12)
   |
31 | @log_timing
32 | @log_stage("Word Lookup Pipeline", "📚")
33 | async def lookup_word_pipeline(
   |           ^^^^^^^^^^^^^^^^^^^^ PLR0912
34 |     word: str,
35 |     providers: list[DictionaryProvider] | None = None,
   |

src/floridify/core/lookup_pipeline.py:33:11: PLR0915 Too many statements (67 > 50)
   |
31 | @log_timing
32 | @log_stage("Word Lookup Pipeline", "📚")
33 | async def lookup_word_pipeline(
   |           ^^^^^^^^^^^^^^^^^^^^ PLR0915
34 |     word: str,
35 |     providers: list[DictionaryProvider] | None = None,
   |

src/floridify/core/lookup_pipeline.py:93:28: G004 Logging statement uses f-string
   |
92 |         if not best_match_result:
93 |             logger.warning(f"No search results found for '{word}' after {search_duration:.2f}s")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
94 |             # Try AI fallback if no results and AI is enabled
95 |             if not no_ai:
   |

src/floridify/core/lookup_pipeline.py:96:29: G004 Logging statement uses f-string
   |
94 |             # Try AI fallback if no results and AI is enabled
95 |             if not no_ai:
96 |                 logger.info(f"No search results, trying AI fallback for '{word}'")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
97 |                 return await _ai_fallback_lookup(word, force_refresh, state_tracker)
   |

src/floridify/core/lookup_pipeline.py:104:13: G004 Logging statement uses f-string
    |
102 |           best_match = best_match_result.word
103 |           logger.info(
104 | /             f"✅ Found best match: '{best_match}' "
105 | |             f"(score: {best_match_result.score:.3f}, method: {best_match_result.method}, "
106 | |             f"search_time: {search_duration:.2f}s)"
    | |___________________________________________________^ G004
107 |           )
    |

src/floridify/core/lookup_pipeline.py:113:29: G004 Logging statement uses f-string
    |
111 |             existing = await get_synthesized_entry(word)
112 |             if existing:
113 |                 logger.info(f"📋 Using cached synthesized entry for '{best_match}'")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
114 |                 return existing
    |

src/floridify/core/lookup_pipeline.py:121:13: G004 Logging statement uses f-string
    |
120 |         logger.info(
121 |             f"🔄 Fetching from {len(providers)} providers in parallel: {[p.value for p in providers]}"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
122 |         )
123 |         provider_fetch_start = time.perf_counter()
    |

src/floridify/core/lookup_pipeline.py:137:32: G004 Logging statement uses f-string
    |
135 |             provider = providers[i]
136 |             if isinstance(result, Exception):
137 |                 logger.warning(f"❌ Provider {provider.value} failed with exception: {result}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
138 |             elif result is None:
139 |                 logger.warning(f"❌ Provider {provider.value} returned no data for '{best_match}'")
    |

src/floridify/core/lookup_pipeline.py:139:32: G004 Logging statement uses f-string
    |
137 |                 logger.warning(f"❌ Provider {provider.value} failed with exception: {result}")
138 |             elif result is None:
139 |                 logger.warning(f"❌ Provider {provider.value} returned no data for '{best_match}'")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
140 |             else:
141 |                 providers_data.append(result)
    |

src/floridify/core/lookup_pipeline.py:142:30: G004 Logging statement uses f-string
    |
140 |             else:
141 |                 providers_data.append(result)
142 |                 logger.debug(f"✅ Provider {provider.value} returned data for '{best_match}'")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
143 |
144 |         total_provider_time = time.perf_counter() - provider_fetch_start
    |

src/floridify/core/lookup_pipeline.py:146:13: G004 Logging statement uses f-string
    |
144 |         total_provider_time = time.perf_counter() - provider_fetch_start
145 |         logger.info(
146 |             f"✅ Fetched from {len(providers_data)}/{len(providers)} providers in {total_provider_time:.2f}s"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
147 |         )
    |

src/floridify/core/lookup_pipeline.py:154:25: G004 Logging statement uses f-string
    |
152 |         # Only try AI fallback if ALL providers failed
153 |         if not providers_data and not no_ai:
154 |             logger.info(f"All providers failed, trying AI fallback for '{best_match}'")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
155 |             return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
156 |         elif not providers_data:
    |

src/floridify/core/lookup_pipeline.py:156:9: RET505 [*] Unnecessary `elif` after `return` statement
    |
154 |             logger.info(f"All providers failed, trying AI fallback for '{best_match}'")
155 |             return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
156 |         elif not providers_data:
    |         ^^^^ RET505
157 |             logger.error(f"All providers failed and AI is disabled for '{best_match}'")
158 |             return None
    |
    = help: Remove unnecessary `elif`

src/floridify/core/lookup_pipeline.py:157:26: G004 Logging statement uses f-string
    |
155 |             return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
156 |         elif not providers_data:
157 |             logger.error(f"All providers failed and AI is disabled for '{best_match}'")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
158 |             return None
    |

src/floridify/core/lookup_pipeline.py:164:21: G004 Logging statement uses f-string
    |
162 |             try:
163 |                 logger.info(
164 |                     f"🤖 Starting AI synthesis for '{best_match}' with {len(providers_data)} providers"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
165 |                 )
166 |                 ai_start = time.perf_counter()
    |

src/floridify/core/lookup_pipeline.py:180:25: G004 Logging statement uses f-string
    |
178 |                   if synthesized_entry:
179 |                       logger.info(
180 | /                         f"✅ Successfully synthesized entry for '{best_match}' "
181 | |                         f"in {ai_duration:.2f}s"
    | |________________________________________________^ G004
182 |                       )
    |

src/floridify/core/lookup_pipeline.py:193:17: RET505 [*] Unnecessary `else` after `return` statement
    |
191 |                     )
192 |                     return synthesized_entry
193 |                 else:
    |                 ^^^^ RET505
194 |                     logger.warning(
195 |                         f"⚠️  AI synthesis returned empty result for '{best_match}' "
    |
    = help: Remove unnecessary `else`

src/floridify/core/lookup_pipeline.py:195:25: G004 Logging statement uses f-string
    |
193 |                   else:
194 |                       logger.warning(
195 | /                         f"⚠️  AI synthesis returned empty result for '{best_match}' "
196 | |                         f"after {ai_duration:.2f}s"
    | |___________________________________________________^ G004
197 |                       )
198 |                       # Try fallback if synthesis fails
    |

src/floridify/core/lookup_pipeline.py:201:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
199 |                     return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
200 |             except Exception as e:
201 |                 logger.error(f"❌ AI synthesis failed: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
202 |                 # Try fallback if synthesis fails
203 |                 return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
    |
    = help: Replace with `exception`

src/floridify/core/lookup_pipeline.py:201:30: G004 Logging statement uses f-string
    |
199 |                     return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
200 |             except Exception as e:
201 |                 logger.error(f"❌ AI synthesis failed: {e}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
202 |                 # Try fallback if synthesis fails
203 |                 return await _ai_fallback_lookup(best_match, force_refresh, state_tracker)
    |

src/floridify/core/lookup_pipeline.py:207:17: G004 Logging statement uses f-string
    |
205 |             # When AI is disabled, we can't return a SynthesizedDictionaryEntry
206 |             logger.warning(
207 |                 f"AI synthesis disabled, cannot return synthesized entry for '{best_match}'"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
208 |             )
209 |             return None
    |

src/floridify/core/lookup_pipeline.py:212:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
211 |     except Exception as e:
212 |         logger.error(f"❌ Lookup pipeline failed for '{word}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
213 |         log_metrics(
214 |             word=word,
    |
    = help: Replace with `exception`

src/floridify/core/lookup_pipeline.py:212:22: G004 Logging statement uses f-string
    |
211 |     except Exception as e:
212 |         logger.error(f"❌ Lookup pipeline failed for '{word}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
213 |         log_metrics(
214 |             word=word,
    |

src/floridify/core/lookup_pipeline.py:233:18: G004 Logging statement uses f-string
    |
231 |         Tuple of (provider_data, provider_metrics)
232 |     """
233 |     logger.debug(f"📖 Fetching definition from {provider.value} for '{word}'")
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
234 |     start_time = time.perf_counter()
    |

src/floridify/core/lookup_pipeline.py:246:17: TRY301 Abstract `raise` to an inner function
    |
244 |               config = Config.from_file()
245 |               if not config.oxford.app_id or not config.oxford.api_key:
246 | /                 raise ValueError(
247 | |                     "Oxford Dictionary API credentials not configured. "
248 | |                     "Please update auth/config.toml with your Oxford app_id and api_key."
249 | |                 )
    | |_________________^ TRY301
250 |               connector = OxfordConnector(app_id=config.oxford.app_id, api_key=config.oxford.api_key)
251 |           elif provider == DictionaryProvider.DICTIONARY_COM:
    |

src/floridify/core/lookup_pipeline.py:246:23: TRY003 Avoid specifying long messages outside the exception class
    |
244 |               config = Config.from_file()
245 |               if not config.oxford.app_id or not config.oxford.api_key:
246 |                   raise ValueError(
    |  _______________________^
247 | |                     "Oxford Dictionary API credentials not configured. "
248 | |                     "Please update auth/config.toml with your Oxford app_id and api_key."
249 | |                 )
    | |_________________^ TRY003
250 |               connector = OxfordConnector(app_id=config.oxford.app_id, api_key=config.oxford.api_key)
251 |           elif provider == DictionaryProvider.DICTIONARY_COM:
    |

src/floridify/core/lookup_pipeline.py:247:21: EM101 Exception must not use a string literal, assign to variable first
    |
245 |               if not config.oxford.app_id or not config.oxford.api_key:
246 |                   raise ValueError(
247 | /                     "Oxford Dictionary API credentials not configured. "
248 | |                     "Please update auth/config.toml with your Oxford app_id and api_key."
    | |_________________________________________________________________________________________^ EM101
249 |                   )
250 |               connector = OxfordConnector(app_id=config.oxford.app_id, api_key=config.oxford.api_key)
    |
    = help: Assign to variable; remove string literal

src/floridify/core/lookup_pipeline.py:254:17: TRY301 Abstract `raise` to an inner function
    |
252 |               config = Config.from_file()
253 |               if not config.dictionary_com.authorization:
254 | /                 raise ValueError(
255 | |                     "Dictionary.com API authorization not configured. "
256 | |                     "Please update auth/config.toml with your Dictionary.com authorization token."
257 | |                 )
    | |_________________^ TRY301
258 |               connector = DictionaryComConnector(
259 |                   api_key=config.dictionary_com.authorization, force_refresh=force_refresh
    |

src/floridify/core/lookup_pipeline.py:254:23: TRY003 Avoid specifying long messages outside the exception class
    |
252 |               config = Config.from_file()
253 |               if not config.dictionary_com.authorization:
254 |                   raise ValueError(
    |  _______________________^
255 | |                     "Dictionary.com API authorization not configured. "
256 | |                     "Please update auth/config.toml with your Dictionary.com authorization token."
257 | |                 )
    | |_________________^ TRY003
258 |               connector = DictionaryComConnector(
259 |                   api_key=config.dictionary_com.authorization, force_refresh=force_refresh
    |

src/floridify/core/lookup_pipeline.py:255:21: EM101 Exception must not use a string literal, assign to variable first
    |
253 |               if not config.dictionary_com.authorization:
254 |                   raise ValueError(
255 | /                     "Dictionary.com API authorization not configured. "
256 | |                     "Please update auth/config.toml with your Dictionary.com authorization token."
    | |__________________________________________________________________________________________________^ EM101
257 |                   )
258 |               connector = DictionaryComConnector(
    |
    = help: Assign to variable; remove string literal

src/floridify/core/lookup_pipeline.py:264:28: G004 Logging statement uses f-string
    |
262 |             connector = AppleDictionaryConnector()
263 |         else:
264 |             logger.warning(f"Unsupported provider: {provider.value}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
265 |             return None
    |

src/floridify/core/lookup_pipeline.py:290:30: G004 Logging statement uses f-string
    |
288 |                     duration=fetch_duration,
289 |                 )
290 |                 logger.debug(f"⚠️  Provider {provider.value} returned no results for '{word}'")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
291 |
292 |             return result
    |

src/floridify/core/lookup_pipeline.py:294:9: TRY300 Consider moving this statement to an `else` block
    |
292 |             return result
293 |
294 |         return None
    |         ^^^^^^^^^^^ TRY300
295 |
296 |     except Exception as e:
    |

src/floridify/core/lookup_pipeline.py:302:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
300 |             provider_name=provider.value, word=word, success=False, duration=duration
301 |         )
302 |         logger.error(f"❌ Provider {provider.value} failed for '{word}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
303 |         return None
    |
    = help: Replace with `exception`

src/floridify/core/lookup_pipeline.py:302:22: G004 Logging statement uses f-string
    |
300 |             provider_name=provider.value, word=word, success=False, duration=duration
301 |         )
302 |         logger.error(f"❌ Provider {provider.value} failed for '{word}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
303 |         return None
    |

src/floridify/core/lookup_pipeline.py:316:18: G004 Logging statement uses f-string
    |
314 | ) -> SynthesizedDictionaryEntry | None:
315 |     """Synthesize definition using AI."""
316 |     logger.debug(f"🤖 Starting AI synthesis for '{word}' with {len(providers)} providers")
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
317 |
318 |     # Log provider data quality
    |

src/floridify/core/lookup_pipeline.py:320:18: G004 Logging statement uses f-string
    |
318 |     # Log provider data quality
319 |     total_definitions = sum(len(p.definition_ids) if p.definition_ids else 0 for p in providers)
320 |     logger.debug(f"📊 Total definitions to synthesize: {total_definitions}")
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
321 |
322 |     try:
    |

src/floridify/core/lookup_pipeline.py:334:17: G004 Logging statement uses f-string
    |
332 |           if result:
333 |               logger.debug(
334 | /                 f"✅ AI synthesis complete: {len(result.definition_ids) if result.definition_ids else 0} "
335 | |                 f"synthesized definitions"
    | |__________________________________________^ G004
336 |               )
337 |           else:
    |

src/floridify/core/lookup_pipeline.py:338:28: G004 Logging statement uses f-string
    |
336 |             )
337 |         else:
338 |             logger.warning(f"⚠️  AI synthesis returned empty result for '{word}'")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
339 |
340 |         return result
    |

src/floridify/core/lookup_pipeline.py:340:9: TRY300 Consider moving this statement to an `else` block
    |
338 |             logger.warning(f"⚠️  AI synthesis returned empty result for '{word}'")
339 |
340 |         return result
    |         ^^^^^^^^^^^^^ TRY300
341 |     except Exception as e:
342 |         logger.error(f"❌ AI synthesis failed for '{word}': {e}")
    |

src/floridify/core/lookup_pipeline.py:342:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
340 |         return result
341 |     except Exception as e:
342 |         logger.error(f"❌ AI synthesis failed for '{word}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
343 |         return None
    |
    = help: Replace with `exception`

src/floridify/core/lookup_pipeline.py:342:22: G004 Logging statement uses f-string
    |
340 |         return result
341 |     except Exception as e:
342 |         logger.error(f"❌ AI synthesis failed for '{word}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
343 |         return None
    |

src/floridify/core/lookup_pipeline.py:352:17: G004 Logging statement uses f-string
    |
350 | ) -> SynthesizedDictionaryEntry | None:
351 |     """AI fallback when no provider definitions are found."""
352 |     logger.info(f"🔮 Attempting AI fallback generation for '{word}'")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
353 |
354 |     try:
    |

src/floridify/core/lookup_pipeline.py:365:17: G004 Logging statement uses f-string
    |
363 |           if ai_entry and ai_entry.definition_ids:
364 |               logger.info(
365 | /                 f"✅ AI fallback successful for '{word}': "
366 | |                 f"{len(ai_entry.definition_ids)} definitions generated in {duration:.2f}s"
    | |__________________________________________________________________________________________^ G004
367 |               )
    |

src/floridify/core/lookup_pipeline.py:377:9: RET505 [*] Unnecessary `else` after `return` statement
    |
376 |             return ai_entry
377 |         else:
    |         ^^^^ RET505
378 |             logger.warning(
379 |                 f"⚠️  AI fallback returned no definitions for '{word}' after {duration:.2f}s"
    |
    = help: Remove unnecessary `else`

src/floridify/core/lookup_pipeline.py:379:17: G004 Logging statement uses f-string
    |
377 |         else:
378 |             logger.warning(
379 |                 f"⚠️  AI fallback returned no definitions for '{word}' after {duration:.2f}s"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
380 |             )
381 |             return None
    |

src/floridify/core/lookup_pipeline.py:384:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
383 |     except Exception as e:
384 |         logger.error(f"❌ AI fallback failed for '{word}': {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
385 |         return None
    |
    = help: Replace with `exception`

src/floridify/core/lookup_pipeline.py:384:22: G004 Logging statement uses f-string
    |
383 |     except Exception as e:
384 |         logger.error(f"❌ AI fallback failed for '{word}': {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
385 |         return None
    |

src/floridify/core/search_pipeline.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 6 | from typing import TYPE_CHECKING
 7 |
 8 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
 9 | from ..search.core import SearchResult
10 | from ..search.language import LanguageSearch, get_language_search
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from ..constants import Language
 9 | from ..search.core import SearchResult
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..search.language import LanguageSearch, get_language_search
11 | from ..utils.logging import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:9:27: TC001 Move application import `..search.core.SearchResult` into a type-checking block
   |
 8 | from ..constants import Language
 9 | from ..search.core import SearchResult
   |                           ^^^^^^^^^^^^ TC001
10 | from ..search.language import LanguageSearch, get_language_search
11 | from ..utils.logging import (
   |
   = help: Move into type-checking block

src/floridify/core/search_pipeline.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from ..constants import Language
 9 | from ..search.core import SearchResult
10 | from ..search.language import LanguageSearch, get_language_search
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..utils.logging import (
12 |     get_logger,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from ..constants import Language
 9 | from ..search.core import SearchResult
10 | from ..search.language import LanguageSearch, get_language_search
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..utils.logging import (
12 |     get_logger,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ..search.core import SearchResult
10 |   from ..search.language import LanguageSearch, get_language_search
11 | / from ..utils.logging import (
12 | |     get_logger,
13 | |     log_metrics,
14 | |     log_search_method,
15 | |     log_stage,
16 | |     log_timing,
17 | | )
   | |_^ TID252
18 |
19 |   if TYPE_CHECKING:
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ..search.core import SearchResult
10 |   from ..search.language import LanguageSearch, get_language_search
11 | / from ..utils.logging import (
12 | |     get_logger,
13 | |     log_metrics,
14 | |     log_search_method,
15 | |     log_stage,
16 | |     log_timing,
17 | | )
   | |_^ TID252
18 |
19 |   if TYPE_CHECKING:
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ..search.core import SearchResult
10 |   from ..search.language import LanguageSearch, get_language_search
11 | / from ..utils.logging import (
12 | |     get_logger,
13 | |     log_metrics,
14 | |     log_search_method,
15 | |     log_stage,
16 | |     log_timing,
17 | | )
   | |_^ TID252
18 |
19 |   if TYPE_CHECKING:
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ..search.core import SearchResult
10 |   from ..search.language import LanguageSearch, get_language_search
11 | / from ..utils.logging import (
12 | |     get_logger,
13 | |     log_metrics,
14 | |     log_search_method,
15 | |     log_stage,
16 | |     log_timing,
17 | | )
   | |_^ TID252
18 |
19 |   if TYPE_CHECKING:
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 |   from ..search.core import SearchResult
10 |   from ..search.language import LanguageSearch, get_language_search
11 | / from ..utils.logging import (
12 | |     get_logger,
13 | |     log_metrics,
14 | |     log_search_method,
15 | |     log_stage,
16 | |     log_timing,
17 | | )
   | |_^ TID252
18 |
19 |   if TYPE_CHECKING:
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/search_pipeline.py:20:5: TC005 [*] Found empty type-checking block
   |
19 | if TYPE_CHECKING:
20 |     pass
   |     ^^^^ TC005
21 |
22 | logger = get_logger(__name__)
   |
   = help: Delete empty type-checking block

src/floridify/core/search_pipeline.py:41:12: PLW0603 Using the global statement to update `_search_engine` is discouraged
   |
39 |         Initialized LanguageSearch instance
40 |     """
41 |     global _search_engine
   |            ^^^^^^^^^^^^^^ PLW0603
42 |
43 |     # Use simplified approach - delegate to get_language_search
   |

src/floridify/core/search_pipeline.py:55:12: PLW0603 Using the global statement to update `_search_engine` is discouraged
   |
53 | async def reset_search_engine() -> None:
54 |     """Reset the search engine singleton (for testing/cleanup)."""
55 |     global _search_engine
   |            ^^^^^^^^^^^^^^ PLW0603
56 |     _search_engine = None
57 |     logger.info("SearchEngine singleton reset")
   |

src/floridify/core/search_pipeline.py:105:13: G004 Logging statement uses f-string
    |
103 |         pipeline_time = time.perf_counter() - pipeline_start
104 |         logger.info(
105 |             f"✅ Search completed: {len(results)} results for '{word}' in {pipeline_time:.2f}s"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
106 |         )
    |

src/floridify/core/search_pipeline.py:119:9: TRY300 Consider moving this statement to an `else` block
    |
117 |             )
118 |
119 |         return results
    |         ^^^^^^^^^^^^^^ TRY300
120 |
121 |     except Exception as e:
    |

src/floridify/core/search_pipeline.py:123:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
121 |     except Exception as e:
122 |         pipeline_time = time.perf_counter() - pipeline_start
123 |         logger.error(f"❌ Search pipeline failed for '{word}' after {pipeline_time:.2f}s: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
124 |
125 |         log_metrics(
    |
    = help: Replace with `exception`

src/floridify/core/search_pipeline.py:123:22: G004 Logging statement uses f-string
    |
121 |     except Exception as e:
122 |         pipeline_time = time.perf_counter() - pipeline_start
123 |         logger.error(f"❌ Search pipeline failed for '{word}' after {pipeline_time:.2f}s: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
124 |
125 |         log_metrics(
    |

src/floridify/core/search_pipeline.py:164:13: G004 Logging statement uses f-string
    |
162 |         best = results[0]
163 |         logger.debug(
164 |             f"✅ Best match for '{word}': '{best.word}' (score: {best.score:.3f}, method: {best.method})"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
165 |         )
166 |         return best
    |

src/floridify/core/search_pipeline.py:167:5: RET505 [*] Unnecessary `else` after `return` statement
    |
165 |         )
166 |         return best
167 |     else:
    |     ^^^^ RET505
168 |         logger.debug(f"❌ No match found for '{word}'")
169 |         return None
    |
    = help: Remove unnecessary `else`

src/floridify/core/search_pipeline.py:168:22: G004 Logging statement uses f-string
    |
166 |         return best
167 |     else:
168 |         logger.debug(f"❌ No match found for '{word}'")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
169 |         return None
    |

src/floridify/core/state_tracker.py:6:29: TC003 Move standard library import `collections.abc.AsyncGenerator` into a type-checking block
  |
5 | import asyncio
6 | from collections.abc import AsyncGenerator
  |                             ^^^^^^^^^^^^^^ TC003
7 | from contextlib import asynccontextmanager
8 | from datetime import datetime
  |
  = help: Move into type-checking block

src/floridify/core/state_tracker.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from pydantic import BaseModel, Field
12 |
13 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 |
15 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/core/state_tracker.py:43:20: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
42 |       # Progress mapping for automatic progress calculation
43 |       PROGRESS_MAP = {
   |  ____________________^
44 | |         START: 5,
45 | |         SEARCH_START: 10,
46 | |         SEARCH_COMPLETE: 20,
47 | |         PROVIDER_FETCH_START: 25,
48 | |         PROVIDER_FETCH_COMPLETE: 60,
49 | |         AI_CLUSTERING: 70,
50 | |         AI_SYNTHESIS: 85,
51 | |         AI_FALLBACK: 90,
52 | |         STORAGE_SAVE: 95,
53 | |         COMPLETE: 100,
54 | |         ERROR: 0,
55 | |     }
   | |_____^ RUF012
   |

src/floridify/core/state_tracker.py:106:15: PLR0913 Too many arguments in function definition (6 > 5)
    |
104 |         self._subscribers: set[asyncio.Queue[PipelineState]] = set()
105 |
106 |     async def update(
    |               ^^^^^^ PLR0913
107 |         self,
108 |         stage: str,
    |

src/floridify/core/state_tracker.py:133:23: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
131 |             message=message,
132 |             details=details,
133 |             timestamp=datetime.now(),
    |                       ^^^^^^^^^^^^^^ DTZ005
134 |             is_complete=is_complete,
135 |             error=error,
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/__init__.py:6:11: RUF022 [*] `__all__` is not sorted
  |
4 | from .parser import generate_name, parse_file
5 |
6 | __all__ = ["WordList", "parse_file", "generate_name"]
  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF022
  |
  = help: Apply an isort-style sorting to `__all__`

src/floridify/list/models.py:46:22: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
44 |     def update_sm2(self, quality: int) -> None:
45 |         """Update using SM-2 algorithm (quality: 0-5)."""
46 |         if quality < 3:
   |                      ^ PLR2004
47 |             self.repetitions = 0
48 |             self.interval = 1
   |

src/floridify/list/models.py:54:38: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
52 |             if self.repetitions == 1:
53 |                 self.interval = 1
54 |             elif self.repetitions == 2:
   |                                      ^ PLR2004
55 |                 self.interval = 6
56 |             else:
   |

src/floridify/list/models.py:60:23: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
59 |         # Update ease factor
60 |         if quality >= 3:
   |                       ^ PLR2004
61 |             new_ef = self.ease_factor + 0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02)
62 |             self.ease_factor = max(1.3, new_ef)
   |

src/floridify/list/models.py:65:33: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
64 |         # Calculate next review date
65 |         self.last_review_date = datetime.now()
   |                                 ^^^^^^^^^^^^^^ DTZ005
66 |         self.next_review_date = self.last_review_date + timedelta(days=self.interval)
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:110:27: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
108 |         """Increment frequency and update timestamp."""
109 |         self.frequency += 1
110 |         self.updated_at = datetime.now()
    |                           ^^^^^^^^^^^^^^ DTZ005
111 |
112 |     def mark_visited(self) -> None:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:114:29: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
112 |     def mark_visited(self) -> None:
113 |         """Mark word as visited/viewed."""
114 |         self.last_visited = datetime.now()
    |                             ^^^^^^^^^^^^^^ DTZ005
115 |         self.temperature = Temperature.HOT
116 |         self.updated_at = datetime.now()
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:116:27: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
114 |         self.last_visited = datetime.now()
115 |         self.temperature = Temperature.HOT
116 |         self.updated_at = datetime.now()
    |                           ^^^^^^^^^^^^^^ DTZ005
117 |
118 |     def review(self, quality: int) -> None:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:121:29: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
119 |         """Process a review session."""
120 |         self.review_data.update_sm2(quality)
121 |         self.last_visited = datetime.now()
    |                             ^^^^^^^^^^^^^^ DTZ005
122 |         self.temperature = Temperature.HOT
123 |         self.updated_at = datetime.now()
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:123:27: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
121 |         self.last_visited = datetime.now()
122 |         self.temperature = Temperature.HOT
123 |         self.updated_at = datetime.now()
    |                           ^^^^^^^^^^^^^^ DTZ005
124 |
125 |         # Update mastery based on performance
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:126:44: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
125 |         # Update mastery based on performance
126 |         if self.review_data.repetitions >= 10 and self.review_data.ease_factor >= 2.5:
    |                                            ^^ PLR2004
127 |             self.mastery_level = MasteryLevel.GOLD
128 |         elif self.review_data.repetitions >= 5:
    |

src/floridify/list/models.py:126:83: PLR2004 Magic value used in comparison, consider replacing `2.5` with a constant variable
    |
125 |         # Update mastery based on performance
126 |         if self.review_data.repetitions >= 10 and self.review_data.ease_factor >= 2.5:
    |                                                                                   ^^^ PLR2004
127 |             self.mastery_level = MasteryLevel.GOLD
128 |         elif self.review_data.repetitions >= 5:
    |

src/floridify/list/models.py:128:46: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
126 |         if self.review_data.repetitions >= 10 and self.review_data.ease_factor >= 2.5:
127 |             self.mastery_level = MasteryLevel.GOLD
128 |         elif self.review_data.repetitions >= 5:
    |                                              ^ PLR2004
129 |             self.mastery_level = MasteryLevel.SILVER
    |

src/floridify/list/models.py:166:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
164 |       class Settings:
165 |           name = "word_lists"
166 |           indexes = [
    |  ___________________^
167 | |             "name",
168 | |             "hash_id",
169 | |             [("name", "text")],
170 | |             "created_at",
171 | |             "updated_at",
172 | |             "last_accessed",
173 | |             "owner_id",
174 | |         ]
    | |_________^ RUF012
175 |
176 |       @classmethod
    |

src/floridify/list/models.py:180:31: C401 Unnecessary generator (rewrite as a set comprehension)
    |
178 |         """Generate content-based hash from word list."""
179 |         # Sort words to ensure consistent hash regardless of order
180 |         sorted_words = sorted(set(w.lower().strip() for w in words if w.strip()))
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C401
181 |         content = "|".join(sorted_words)
182 |         return hashlib.sha256(content.encode()).hexdigest()[:16]
    |
    = help: Rewrite as a set comprehension

src/floridify/list/models.py:207:27: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
205 |         self.unique_words = len(self.words)
206 |         self.total_words = sum(w.frequency for w in self.words)
207 |         self.updated_at = datetime.now()
    |                           ^^^^^^^^^^^^^^ DTZ005
208 |
209 |         # Update learning statistics
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:232:15: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
230 |     def get_due_for_review(self, limit: int | None = None) -> list[WordListItem]:
231 |         """Get words due for review, ordered by urgency."""
232 |         now = datetime.now()
    |               ^^^^^^^^^^^^^^ DTZ005
233 |         due_words = [w for w in self.words if w.review_data.next_review_date <= now]
234 |         # Sort by how overdue they are
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:266:30: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
264 |     def mark_accessed(self) -> None:
265 |         """Mark list as accessed."""
266 |         self.last_accessed = datetime.now()
    |                              ^^^^^^^^^^^^^^ DTZ005
267 |         self.updated_at = datetime.now()
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:267:27: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
265 |         """Mark list as accessed."""
266 |         self.last_accessed = datetime.now()
267 |         self.updated_at = datetime.now()
    |                           ^^^^^^^^^^^^^^ DTZ005
268 |
269 |     def record_study_session(self, duration_minutes: int) -> None:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/models.py:275:15: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
274 |         # Update streak
275 |         now = datetime.now()
    |               ^^^^^^^^^^^^^^ DTZ005
276 |         if self.learning_stats.last_study_date:
277 |             days_since = (now.date() - self.learning_stats.last_study_date.date()).days
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/list/parser.py:6:21: TC003 Move standard library import `pathlib.Path` into a type-checking block
  |
5 | import re
6 | from pathlib import Path
  |                     ^^^^ TC003
7 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/list/parser.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from pydantic import BaseModel, Field
11 |
12 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/list/parser.py:28:15: TRY003 Avoid specifying long messages outside the exception class
   |
26 |     """Parse word list from file with format detection."""
27 |     if not file_path.exists():
28 |         raise FileNotFoundError(f"Word list file not found: {file_path}")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
29 |
30 |     logger.info(f"📋 Parsing word list from: {file_path}")
   |

src/floridify/list/parser.py:28:33: EM102 Exception must not use an f-string literal, assign to variable first
   |
26 |     """Parse word list from file with format detection."""
27 |     if not file_path.exists():
28 |         raise FileNotFoundError(f"Word list file not found: {file_path}")
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
29 |
30 |     logger.info(f"📋 Parsing word list from: {file_path}")
   |
   = help: Assign to variable; remove f-string literal

src/floridify/list/parser.py:30:17: G004 Logging statement uses f-string
   |
28 |         raise FileNotFoundError(f"Word list file not found: {file_path}")
29 |
30 |     logger.info(f"📋 Parsing word list from: {file_path}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
31 |
32 |     try:
   |

src/floridify/list/parser.py:35:24: G004 Logging statement uses f-string
   |
33 |         content = file_path.read_text(encoding="utf-8")
34 |     except UnicodeDecodeError:
35 |         logger.warning(f"UTF-8 decode failed, trying latin-1 for: {file_path}")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
36 |         content = file_path.read_text(encoding="latin-1")
   |

src/floridify/list/parser.py:47:17: G004 Logging statement uses f-string
   |
45 |     }
46 |
47 |     logger.info(f"✅ Extracted {len(words)} words from {metadata['raw_lines']} lines")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
48 |
49 |     return ParsedWordList(words=words, metadata=metadata, source_file=str(file_path))
   |

src/floridify/list/parser.py:57:22: G004 Logging statement uses f-string
   |
55 |         # Generate a cool name with adjective + animal format
56 |         name: str = coolname.generate_slug(2)  # 2 words: adjective-animal
57 |         logger.debug(f"Generated name: {name}")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ G004
58 |         return name
59 |     except Exception as e:
   |

src/floridify/list/parser.py:58:9: TRY300 Consider moving this statement to an `else` block
   |
56 |         name: str = coolname.generate_slug(2)  # 2 words: adjective-animal
57 |         logger.debug(f"Generated name: {name}")
58 |         return name
   |         ^^^^^^^^^^^ TRY300
59 |     except Exception as e:
60 |         logger.warning(f"Failed to generate cool name: {e}")
   |

src/floridify/list/parser.py:60:24: G004 Logging statement uses f-string
   |
58 |         return name
59 |     except Exception as e:
60 |         logger.warning(f"Failed to generate cool name: {e}")
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
61 |         # Fallback to hash-based name
62 |         from .models import WordList
   |

src/floridify/list/parser.py:62:9: PLC0415 `import` should be at the top-level of a file
   |
60 |         logger.warning(f"Failed to generate cool name: {e}")
61 |         # Fallback to hash-based name
62 |         from .models import WordList
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
63 |
64 |         hash_id = WordList.generate_hash(words)
   |

src/floridify/list/parser.py:74:9: PLW2901 `for` loop variable `line` overwritten by assignment target
   |
73 |     for line in lines:
74 |         line = line.strip()
   |         ^^^^ PLW2901
75 |         if not line or line.startswith("#"):  # Skip empty lines and comments
76 |             continue
   |

src/floridify/list/parser.py:114:9: RET505 [*] Unnecessary `else` after `return` statement
    |
112 |         if _looks_like_phrase(line):
113 |             return [line]
114 |         else:
    |         ^^^^ RET505
115 |             return words
    |
    = help: Remove unnecessary `else`

src/floridify/list/parser.py:140:26: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
138 |     }
139 |     words = text.lower().split()
140 |     return len(words) <= 5 and any(word in phrase_indicators for word in words)
    |                          ^ PLR2004
    |

src/floridify/list/parser.py:152:20: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
151 |     # Skip very short or very long words
152 |     if len(word) < 2 or len(word) > 50:
    |                    ^ PLR2004
153 |         return ""
    |

src/floridify/list/parser.py:152:37: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
151 |     # Skip very short or very long words
152 |     if len(word) < 2 or len(word) > 50:
    |                                     ^^ PLR2004
153 |         return ""
    |

src/floridify/list/parser.py:172:5: RET505 [*] Unnecessary `elif` after `return` statement
    |
170 |     if numbered_count >= len(lines) * 0.5:
171 |         return "numbered_list"
172 |     elif comma_count >= len(lines) * 0.5:
    |     ^^^^ RET505
173 |         return "comma_separated"
174 |     elif tab_count >= len(lines) * 0.5:
    |
    = help: Remove unnecessary `elif`

src/floridify/models/__init__.py:34:11: RUF022 `__all__` is not sorted
   |
32 |   )
33 |
34 |   __all__ = [
   |  ___________^
35 | |     # Base models
36 | |     "BaseMetadata",
37 | |     "Etymology",
38 | |     "ImageMedia",
39 | |     "AudioMedia",
40 | |     "ModelInfo",
41 | |     # Core documents
42 | |     "Word",
43 | |     "Definition",
44 | |     "Example",
45 | |     "Fact",
46 | |     "Pronunciation",
47 | |     "ProviderData",
48 | |     "SynthesizedDictionaryEntry",
49 | |     "LiteratureSource",
50 | |     # Relationships
51 | |     "WordForm",
52 | |     "GrammarPattern",
53 | |     "Collocation",
54 | |     "UsageNote",
55 | |     "MeaningCluster",
56 | |     "WordRelationship",
57 | |     "PhrasalExpression",
58 | |     # Constants
59 | |     "LiteratureSourceType",
60 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/models/models.py:5:22: TC003 Move standard library import `datetime.datetime` into a type-checking block
  |
3 | from __future__ import annotations
4 |
5 | from datetime import datetime
  |                      ^^^^^^^^ TC003
6 | from typing import Any, Literal
  |
  = help: Move into type-checking block

src/floridify/models/models.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from pydantic import BaseModel, Field
10 |
11 | from ..constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from .base import BaseMetadata, Etymology, ModelInfo
13 | from .relationships import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/models/models.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from pydantic import BaseModel, Field
10 |
11 | from ..constants import DictionaryProvider, Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from .base import BaseMetadata, Etymology, ModelInfo
13 | from .relationships import (
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/models/models.py:14:5: TC001 Move application import `.relationships.Collocation` into a type-checking block
   |
12 | from .base import BaseMetadata, Etymology, ModelInfo
13 | from .relationships import (
14 |     Collocation,
   |     ^^^^^^^^^^^ TC001
15 |     GrammarPattern,
16 |     MeaningCluster,
   |
   = help: Move into type-checking block

src/floridify/models/models.py:15:5: TC001 Move application import `.relationships.GrammarPattern` into a type-checking block
   |
13 | from .relationships import (
14 |     Collocation,
15 |     GrammarPattern,
   |     ^^^^^^^^^^^^^^ TC001
16 |     MeaningCluster,
17 |     UsageNote,
   |
   = help: Move into type-checking block

src/floridify/models/models.py:16:5: TC001 Move application import `.relationships.MeaningCluster` into a type-checking block
   |
14 |     Collocation,
15 |     GrammarPattern,
16 |     MeaningCluster,
   |     ^^^^^^^^^^^^^^ TC001
17 |     UsageNote,
18 |     WordForm,
   |
   = help: Move into type-checking block

src/floridify/models/models.py:17:5: TC001 Move application import `.relationships.UsageNote` into a type-checking block
   |
15 |     GrammarPattern,
16 |     MeaningCluster,
17 |     UsageNote,
   |     ^^^^^^^^^ TC001
18 |     WordForm,
19 | )
   |
   = help: Move into type-checking block

src/floridify/models/models.py:18:5: TC001 Move application import `.relationships.WordForm` into a type-checking block
   |
16 |     MeaningCluster,
17 |     UsageNote,
18 |     WordForm,
   |     ^^^^^^^^ TC001
19 | )
   |
   = help: Move into type-checking block

src/floridify/models/models.py:28:33: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
26 |     phonetic: str  # e.g., "on koo-LEES"
27 |     ipa: str = ""  # American IPA - default to empty string for backwards compatibility
28 |     audio_file_ids: list[str] = []  # FK to AudioMedia documents
   |                                 ^^ RUF012
29 |     syllables: list[str] = []
30 |     stress_pattern: str | None = None  # Primary/secondary stress
   |

src/floridify/models/models.py:29:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
27 |     ipa: str = ""  # American IPA - default to empty string for backwards compatibility
28 |     audio_file_ids: list[str] = []  # FK to AudioMedia documents
29 |     syllables: list[str] = []
   |                            ^^ RUF012
30 |     stress_pattern: str | None = None  # Primary/secondary stress
   |

src/floridify/models/models.py:84:34: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
82 |     meaning_cluster: MeaningCluster | None = None
83 |     sense_number: str | None = None  # e.g., "1a", "2b"
84 |     word_forms: list[WordForm] = []  # List of WordForm objects
   |                                  ^^ RUF012
85 |
86 |     # Examples and relationships
   |

src/floridify/models/models.py:87:30: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
86 |     # Examples and relationships
87 |     example_ids: list[str] = []  # FK to Example documents
   |                              ^^ RUF012
88 |     synonyms: list[str] = []
89 |     antonyms: list[str] = []
   |

src/floridify/models/models.py:88:27: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
86 |     # Examples and relationships
87 |     example_ids: list[str] = []  # FK to Example documents
88 |     synonyms: list[str] = []
   |                           ^^ RUF012
89 |     antonyms: list[str] = []
   |

src/floridify/models/models.py:89:27: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
87 |     example_ids: list[str] = []  # FK to Example documents
88 |     synonyms: list[str] = []
89 |     antonyms: list[str] = []
   |                           ^^ RUF012
90 |
91 |     # Usage and context
   |

src/floridify/models/models.py:97:36: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
95 |     domain: str | None = None  # medical, legal, computing
96 |     region: str | None = None  # US, UK, AU
97 |     usage_notes: list[UsageNote] = []
   |                                    ^^ RUF012
98 |
99 |     # Grammar and patterns
   |

src/floridify/models/models.py:100:46: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 99 |     # Grammar and patterns
100 |     grammar_patterns: list[GrammarPattern] = []
    |                                              ^^ RUF012
101 |     collocations: list[Collocation] = []
102 |     transitivity: Literal["transitive", "intransitive", "both"] | None = None
    |

src/floridify/models/models.py:101:39: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 99 |     # Grammar and patterns
100 |     grammar_patterns: list[GrammarPattern] = []
101 |     collocations: list[Collocation] = []
    |                                       ^^ RUF012
102 |     transitivity: Literal["transitive", "intransitive", "both"] | None = None
    |

src/floridify/models/models.py:111:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
110 |     # Media and provenance
111 |     image_ids: list[str] = []  # FK to ImageMedia documents
    |                            ^^ RUF012
112 |     provider_data_id: str | None = None  # FK to ProviderData if from provider
    |

src/floridify/models/models.py:116:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
114 |     class Settings:
115 |         name = "definitions"
116 |         indexes = ["word_id", "part_of_speech", [("word_id", 1), ("part_of_speech", 1)]]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
    |

src/floridify/models/models.py:124:33: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
122 |     word_id: str  # FK to Word
123 |     provider: DictionaryProvider
124 |     definition_ids: list[str] = []  # FK to Definition documents
    |                                 ^^ RUF012
125 |     pronunciation_id: str | None = None  # FK to Pronunciation
126 |     etymology: Etymology | None = None
    |

src/floridify/models/models.py:131:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
129 |     class Settings:
130 |         name = "provider_data"
131 |         indexes = ["word_id", "provider", [("word_id", 1), ("provider", 1)]]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
    |

src/floridify/models/models.py:150:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
148 |       class Settings:
149 |           name = "words"
150 |           indexes = [
    |  ___________________^
151 | |             [("text", 1), ("language", 1)],
152 | |             "normalized",
153 | |             [("text", 1), ("homograph_number", 1)],
154 | |         ]
    | |_________^ RUF012
    |

src/floridify/models/models.py:164:33: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
162 |     # Synthesized content references
163 |     pronunciation_id: str | None = None  # FK to Pronunciation
164 |     definition_ids: list[str] = []  # FK to Definition documents
    |                                 ^^ RUF012
165 |     etymology: Etymology | None = None  # Embedded as it's lightweight
166 |     fact_ids: list[str] = []  # FK to Fact documents
    |

src/floridify/models/models.py:166:27: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
164 |     definition_ids: list[str] = []  # FK to Definition documents
165 |     etymology: Etymology | None = None  # Embedded as it's lightweight
166 |     fact_ids: list[str] = []  # FK to Fact documents
    |                           ^^ RUF012
167 |
168 |     # Synthesis metadata
    |

src/floridify/models/models.py:170:43: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
168 |     # Synthesis metadata
169 |     model_info: ModelInfo
170 |     source_provider_data_ids: list[str] = []  # FK to ProviderData documents
    |                                           ^^ RUF012
171 |
172 |     # Access tracking
    |

src/floridify/models/models.py:178:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
176 |       class Settings:
177 |           name = "synthesized_dictionary_entries"
178 |           indexes = [
    |  ___________________^
179 | |             "word_id",
180 | |             [("word_id", 1), ("version", -1)],
181 | |             [("word_id", 1), ("model_info.generation_count", -1)],
182 | |             [("word_id", 1), ("accessed_at", -1)],
183 | |         ]
    | |_________^ RUF012
    |

src/floridify/models/phrasal.py:18:33: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
16 |     expression: str  # Full expression text
17 |     type: Literal["phrasal_verb", "idiom", "colloquialism", "proverb"]
18 |     definition_ids: list[str] = []  # FK to Definition documents
   |                                 ^^ RUF012
19 |     separable: bool | None = None  # For phrasal verbs
   |

src/floridify/models/phrasal.py:23:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
21 |     class Settings:
22 |         name = "phrasal_expressions"
23 |         indexes = ["base_word_id", "type", "expression"]
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
   |

src/floridify/models/relationships.py:71:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
69 |       class Settings:
70 |           name = "word_relationships"
71 |           indexes = [
   |  ___________________^
72 | |             [("from_word_id", 1), ("relationship_type", 1)],
73 | |             [("to_word_id", 1), ("relationship_type", 1)],
74 | |         ]
   | |_________^ RUF012
   |

src/floridify/search/__init__.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from __future__ import annotations
 9 |
10 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from .constants import EmbeddingLevel, FuzzySearchMethod, SearchMethod
12 | from .core import SearchEngine, SearchResult
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/__init__.py:22:11: RUF022 [*] `__all__` is not sorted
   |
20 |   from .trie import TrieSearch
21 |
22 |   __all__ = [
   |  ___________^
23 | |     "SearchEngine",
24 | |     "SearchResult",
25 | |     "SearchMethod",
26 | |     "LanguageSearch",
27 | |     "LexiconLanguageLoader",
28 | |     "Language",
29 | |     "LexiconSourceConfig",
30 | |     "TrieSearch",
31 | |     "FuzzySearch",
32 | |     "FuzzySearchMethod",
33 | |     "SemanticSearch",
34 | |     "EmbeddingLevel",
35 | |     "PhraseNormalizer",
36 | |     "MultiWordExpression",
37 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/search/core.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from pydantic import BaseModel, Field
13 |
14 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from .constants import SearchMethod
16 | from .fuzzy import FuzzySearch
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/core.py:17:27: TC001 Move application import `.lexicon.core.Lexicon` into a type-checking block
   |
15 | from .constants import SearchMethod
16 | from .fuzzy import FuzzySearch
17 | from .lexicon.core import Lexicon
   |                           ^^^^^^^ TC001
18 | from .phrase import PhraseNormalizer
19 | from .trie import TrieSearch
   |
   = help: Move into type-checking block

src/floridify/search/core.py:56:22: G004 Logging statement uses f-string
   |
54 |         self.fuzzy_search = FuzzySearch(min_score=min_score)
55 |
56 |         logger.debug(f"GeneralizedSearch initialized: {len(words)} words, {len(phrases)} phrases")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
57 |
58 |     async def search(
   |

src/floridify/search/corpus.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from pydantic import BaseModel, Field
17 |
18 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from .core import SearchEngine
20 | from .lexicon.core import SimpleLexicon
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/corpus.py:52:24: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
50 |             corpus_id=corpus_id,
51 |             name=name,
52 |             expires_at=datetime.now() + timedelta(hours=ttl_hours),
   |                        ^^^^^^^^^^^^^^ DTZ005
53 |             word_count=len(words),
54 |             phrase_count=len(phrases or []),
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/search/corpus.py:61:16: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
59 |     def is_expired(self) -> bool:
60 |         """Check if corpus has expired."""
61 |         return datetime.now() > self.metadata.expires_at
   |                ^^^^^^^^^^^^^^ DTZ005
62 |
63 |     def touch(self) -> None:
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/search/corpus.py:65:39: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
63 |     def touch(self) -> None:
64 |         """Update last accessed time and increment search count."""
65 |         self.metadata.last_accessed = datetime.now()
   |                                       ^^^^^^^^^^^^^^ DTZ005
66 |         self.metadata.search_count += 1
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/search/corpus.py:102:21: G004 Logging statement uses f-string
    |
100 |         self._started = True
101 |         self._cleanup_task = asyncio.create_task(self._cleanup_loop())
102 |         logger.info(f"Started corpus cache with max_size={self.max_size}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
103 |
104 |     async def stop(self) -> None:
    |

src/floridify/search/corpus.py:108:13: SIM105 Use `contextlib.suppress(asyncio.CancelledError)` instead of `try`-`except`-`pass`
    |
106 |           if self._cleanup_task:
107 |               self._cleanup_task.cancel()
108 | /             try:
109 | |                 await self._cleanup_task
110 | |             except asyncio.CancelledError:
111 | |                 pass
    | |____________________^ SIM105
112 |           self._started = False
113 |           logger.info("Stopped corpus cache")
    |
    = help: Replace with `contextlib.suppress(asyncio.CancelledError)`

src/floridify/search/corpus.py:148:13: G004 Logging statement uses f-string
    |
146 |           self._cache[corpus_id] = entry
147 |           logger.info(
148 | /             f"Created corpus {corpus_id[:8]} with {len(words)} words, "
149 | |             f"{len(phrases or [])} phrases, TTL={ttl_hours}h"
    | |_____________________________________________________________^ G004
150 |           )
    |

src/floridify/search/corpus.py:178:19: TRY003 Avoid specifying long messages outside the exception class
    |
176 |         entry = self._cache.get(corpus_id)
177 |         if not entry:
178 |             raise ValueError(f"Corpus {corpus_id} not found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
179 |
180 |         if entry.is_expired():
    |

src/floridify/search/corpus.py:178:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
176 |         entry = self._cache.get(corpus_id)
177 |         if not entry:
178 |             raise ValueError(f"Corpus {corpus_id} not found")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
179 |
180 |         if entry.is_expired():
    |
    = help: Assign to variable; remove f-string literal

src/floridify/search/corpus.py:182:19: TRY003 Avoid specifying long messages outside the exception class
    |
180 |         if entry.is_expired():
181 |             del self._cache[corpus_id]
182 |             raise ValueError(f"Corpus {corpus_id} has expired")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
183 |
184 |         entry.touch()
    |

src/floridify/search/corpus.py:182:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
180 |         if entry.is_expired():
181 |             del self._cache[corpus_id]
182 |             raise ValueError(f"Corpus {corpus_id} has expired")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
183 |
184 |         entry.touch()
    |
    = help: Assign to variable; remove f-string literal

src/floridify/search/corpus.py:244:22: G004 Logging statement uses f-string
    |
242 |         oldest_id = min(self._cache.keys(), key=lambda k: self._cache[k].metadata.created_at)
243 |         del self._cache[oldest_id]
244 |         logger.debug(f"Evicted corpus {oldest_id[:8]} (cache full)")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
245 |
246 |     def _cleanup_expired(self) -> None:
    |

src/floridify/search/corpus.py:252:26: G004 Logging statement uses f-string
    |
250 |         for corpus_id in expired_ids:
251 |             del self._cache[corpus_id]
252 |             logger.debug(f"Removed expired corpus {corpus_id[:8]}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
253 |
254 |     async def _cleanup_loop(self) -> None:
    |

src/floridify/search/corpus.py:263:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
261 |                 break
262 |             except Exception as e:
263 |                 logger.error(f"Error in corpus cache cleanup: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
    |
    = help: Replace with `exception`

src/floridify/search/corpus.py:263:30: G004 Logging statement uses f-string
    |
261 |                 break
262 |             except Exception as e:
263 |                 logger.error(f"Error in corpus cache cleanup: {e}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/search/corpus.py:272:12: PLW0603 Using the global statement to update `_corpus_cache` is discouraged
    |
270 | async def get_corpus_cache() -> CorpusCache:
271 |     """Get or create the global corpus cache."""
272 |     global _corpus_cache
    |            ^^^^^^^^^^^^^ PLW0603
273 |     if _corpus_cache is None:
274 |         _corpus_cache = CorpusCache()
    |

src/floridify/search/corpus.py:281:12: PLW0603 Using the global statement to update `_corpus_cache` is discouraged
    |
279 | async def shutdown_corpus_cache() -> None:
280 |     """Shutdown the global corpus cache."""
281 |     global _corpus_cache
    |            ^^^^^^^^^^^^^ PLW0603
282 |     if _corpus_cache:
283 |         await _corpus_cache.stop()
    |

src/floridify/search/fuzzy.py:133:9: RET505 [*] Unnecessary `elif` after `return` statement
    |
131 |             # Numbers: RapidFuzz handles mixed alphanumeric content well
132 |             return FuzzySearchMethod.RAPIDFUZZ
133 |         elif query_len <= 2:
    |         ^^^^ RET505
134 |             # Very short: Jaro-Winkler for abbreviations
135 |             return FuzzySearchMethod.JARO_WINKLER
    |
    = help: Remove unnecessary `elif`

src/floridify/search/fuzzy.py:133:27: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
131 |             # Numbers: RapidFuzz handles mixed alphanumeric content well
132 |             return FuzzySearchMethod.RAPIDFUZZ
133 |         elif query_len <= 2:
    |                           ^ PLR2004
134 |             # Very short: Jaro-Winkler for abbreviations
135 |             return FuzzySearchMethod.JARO_WINKLER
    |

src/floridify/search/fuzzy.py:136:27: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
134 |             # Very short: Jaro-Winkler for abbreviations
135 |             return FuzzySearchMethod.JARO_WINKLER
136 |         elif query_len <= 3:
    |                           ^ PLR2004
137 |             # Short: Jaro-Winkler excels at short strings
138 |             return FuzzySearchMethod.JARO_WINKLER
    |

src/floridify/search/fuzzy.py:139:27: PLR2004 Magic value used in comparison, consider replacing `8` with a constant variable
    |
137 |             # Short: Jaro-Winkler excels at short strings
138 |             return FuzzySearchMethod.JARO_WINKLER
139 |         elif query_len <= 8:
    |                           ^ PLR2004
140 |             # Medium: RapidFuzz (C++ optimized) for general typos
141 |             return FuzzySearchMethod.RAPIDFUZZ
    |

src/floridify/search/fuzzy.py:157:9: RET505 [*] Unnecessary `elif` after `return` statement
    |
155 |         if method == FuzzySearchMethod.RAPIDFUZZ:
156 |             return self._search_rapidfuzz(query, word_list, max_results)
157 |         elif method == FuzzySearchMethod.JARO_WINKLER:
    |         ^^^^ RET505
158 |             return self._search_jaro_winkler(query, word_list, max_results)
159 |         elif method == FuzzySearchMethod.SOUNDEX:
    |
    = help: Remove unnecessary `elif`

src/floridify/search/fuzzy.py:190:31: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
188 |         for result in results:
189 |             # RapidFuzz returns (string, score, index) tuples
190 |             if len(result) == 3:
    |                               ^ PLR2004
191 |                 word, score, _ = result
192 |             else:
    |

src/floridify/search/fuzzy.py:227:30: RUF034 Useless `if`-`else` condition
    |
225 |             try:
226 |                 # Use cached lowercase if available
227 |                 word_lower = word.lower() if not self._cached_lowercase_words else word.lower()
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF034
228 |                 score = jellyfish.jaro_winkler_similarity(query, word_lower)
    |

src/floridify/search/fuzzy.py:332:13: SIM108 Use ternary operator `similarity = 1.0 if max_length == 0 else 1.0 - distance / max_length` instead of `if`-`else`-block
    |
330 |               max_length = max(len(query_lower), len(word_lower))
331 |
332 | /             if max_length == 0:
333 | |                 similarity = 1.0
334 | |             else:
335 | |                 similarity = 1.0 - (distance / max_length)
    | |__________________________________________________________^ SIM108
336 |
337 |               if similarity >= self.min_score:
    |
    = help: Replace `if`-`else`-block with `similarity = 1.0 if max_length == 0 else 1.0 - distance / max_length`

src/floridify/search/fuzzy.py:361:26: PLR2004 Magic value used in comparison, consider replacing `0.99` with a constant variable
    |
360 |         # No correction needed for perfect matches
361 |         if base_score >= 0.99:
    |                          ^^^^ PLR2004
362 |             return base_score
    |

src/floridify/search/fuzzy.py:377:52: PLR2004 Magic value used in comparison, consider replacing `0.6` with a constant variable
    |
375 |         elif is_query_phrase and is_candidate_phrase:
376 |             # Both phrases - bonus for length similarity
377 |             phrase_penalty = 1.1 if length_ratio > 0.6 else 1.0
    |                                                    ^^^ PLR2004
378 |
379 |         # Short fragment penalty (aggressive for very short candidates)
    |

src/floridify/search/fuzzy.py:380:29: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
379 |         # Short fragment penalty (aggressive for very short candidates)
380 |         if candidate_len <= 3 and query_len > 6:
    |                             ^ PLR2004
381 |             # Very short candidates for longer queries get heavy penalty
382 |             short_penalty = 0.5
    |

src/floridify/search/fuzzy.py:380:47: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
    |
379 |         # Short fragment penalty (aggressive for very short candidates)
380 |         if candidate_len <= 3 and query_len > 6:
    |                                               ^ PLR2004
381 |             # Very short candidates for longer queries get heavy penalty
382 |             short_penalty = 0.5
    |

src/floridify/search/language.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from typing import Any
11 |
12 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..utils.logging import get_logger
14 | from .core import SearchEngine, SearchResult
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/language.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from ..constants import Language
13 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from .core import SearchEngine, SearchResult
15 | from .lexicon.core import SimpleLexicon
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/language.py:67:21: G004 Logging statement uses f-string
   |
66 |         self._initialized = True
67 |         logger.info(f"Language search initialized for {self.languages}")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
68 |
69 |     async def search(
   |

src/floridify/search/language.py:113:12: PLW0603 Using the global statement to update `_language_search` is discouraged
    |
111 | ) -> LanguageSearch:
112 |     """Get or create global language search instance."""
113 |     global _language_search
    |            ^^^^^^^^^^^^^^^^ PLW0603
114 |
115 |     # Create or recreate if languages changed
    |

src/floridify/search/lexicon/__init__.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from __future__ import annotations
 9 |
10 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
11 | from ..constants import LexiconFormat
12 | from .core import Lexicon, SimpleLexicon
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/__init__.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from ...constants import Language
11 | from ..constants import LexiconFormat
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
12 | from .core import Lexicon, SimpleLexicon
13 | from .language_loader import LexiconData, LexiconLanguageLoader
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/__init__.py:16:11: RUF022 [*] `__all__` is not sorted
   |
14 |   from .sources import LEXICON_SOURCES, LexiconSourceConfig
15 |
16 |   __all__ = [
   |  ___________^
17 | |     "LexiconLanguageLoader",
18 | |     "LexiconData",
19 | |     "SimpleLexicon",
20 | |     "Lexicon",
21 | |     "LexiconSourceConfig",
22 | |     "LEXICON_SOURCES",
23 | |     "Language",
24 | |     "LexiconFormat",
25 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/search/lexicon/core.py:11:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 9 | from typing import Protocol
10 |
11 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/core.py:33:37: B006 Do not use mutable data structures for argument defaults
   |
31 |         words: list[str],
32 |         phrases: list[str] | None = None,
33 |         languages: list[Language] = [Language.ENGLISH],
   |                                     ^^^^^^^^^^^^^^^^^^ B006
34 |     ) -> None:
35 |         """Initialize with pre-normalized word and phrase lists."""
   |
   = help: Replace with `None`; initialize within function

src/floridify/search/lexicon/language_loader.py:13:21: TC003 Move standard library import `pathlib.Path` into a type-checking block
   |
11 | import json
12 | import pickle
13 | from pathlib import Path
   |                     ^^^^ TC003
14 | from typing import Any
   |
   = help: Move into type-checking block

src/floridify/search/lexicon/language_loader.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from pydantic import BaseModel, Field
17 |
18 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 | from ...utils.logging import get_logger
20 | from ..constants import LexiconFormat
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/language_loader.py:19:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ...constants import Language
19 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
20 | from ..constants import LexiconFormat
21 | from ..phrase import MultiWordExpression, PhraseNormalizer
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/language_loader.py:20:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
18 | from ...constants import Language
19 | from ...utils.logging import get_logger
20 | from ..constants import LexiconFormat
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
21 | from ..phrase import MultiWordExpression, PhraseNormalizer
22 | from ..utils import normalize_lexicon_entry
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/language_loader.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...utils.logging import get_logger
20 | from ..constants import LexiconFormat
21 | from ..phrase import MultiWordExpression, PhraseNormalizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ..utils import normalize_lexicon_entry
23 | from .sources import LEXICON_SOURCES, LexiconSourceConfig
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/language_loader.py:21:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
19 | from ...utils.logging import get_logger
20 | from ..constants import LexiconFormat
21 | from ..phrase import MultiWordExpression, PhraseNormalizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
22 | from ..utils import normalize_lexicon_entry
23 | from .sources import LEXICON_SOURCES, LexiconSourceConfig
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/language_loader.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 | from ..constants import LexiconFormat
21 | from ..phrase import MultiWordExpression, PhraseNormalizer
22 | from ..utils import normalize_lexicon_entry
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from .sources import LEXICON_SOURCES, LexiconSourceConfig
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/language_loader.py:110:17: TRY300 Consider moving this statement to an `else` block
    |
108 |                 with cache_file.open("rb") as f:
109 |                     self.lexicons[language] = pickle.load(f)
110 |                 return
    |                 ^^^^^^ TRY300
111 |             except Exception:
112 |                 # Cache corrupted, reload from sources
    |

src/floridify/search/lexicon/language_loader.py:132:9: PLC0415 `import` should be at the top-level of a file
    |
131 |         # Load all sources in parallel for performance
132 |         import asyncio
    |         ^^^^^^^^^^^^^^ PLC0415
133 |
134 |         source_tasks = [self._load_source(source) for source in sources]
    |

src/floridify/search/lexicon/language_loader.py:139:32: G004 Logging statement uses f-string
    |
137 |         for source, result in zip(sources, source_results, strict=False):
138 |             if isinstance(result, Exception):
139 |                 logger.warning(f"Failed to load lexicon source {source.name}: {result}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
140 |                 continue
141 |             if not isinstance(result, tuple):
    |

src/floridify/search/lexicon/language_loader.py:142:32: G004 Logging statement uses f-string
    |
140 |                 continue
141 |             if not isinstance(result, tuple):
142 |                 logger.warning(f"Invalid result type from source {source.name}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
143 |                 continue
    |

src/floridify/search/lexicon/language_loader.py:195:15: PLR0911 Too many return statements (12 > 6)
    |
193 |         return ".json" if source.format.value.startswith("json") else ".txt"
194 |
195 |     async def _load_source(
    |               ^^^^^^^^^^^^ PLR0911
196 |         self, source: LexiconSourceConfig
197 |     ) -> tuple[list[str], list[MultiWordExpression]]:
    |

src/floridify/search/lexicon/language_loader.py:195:15: PLR0912 Too many branches (13 > 12)
    |
193 |         return ".json" if source.format.value.startswith("json") else ".txt"
194 |
195 |     async def _load_source(
    |               ^^^^^^^^^^^^ PLR0912
196 |         self, source: LexiconSourceConfig
197 |     ) -> tuple[list[str], list[MultiWordExpression]]:
    |

src/floridify/search/lexicon/language_loader.py:204:25: G004 Logging statement uses f-string
    |
203 |         if not self.force_rebuild and cache_filepath.exists():
204 |             logger.info(f"Loading cached data for {source.name}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
205 |             return await self._load_from_cache_file(cache_filepath, source)
    |

src/floridify/search/lexicon/language_loader.py:208:21: G004 Logging statement uses f-string
    |
207 |         # Use the downloader function (handles both regular URLs and custom scraping)
208 |         logger.info(f"Downloading data for source: {source.name}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
209 |         # Pass force_rebuild to scraper for cache invalidation
210 |         result = await source.scraper(source.url)
    |

src/floridify/search/lexicon/language_loader.py:211:22: G004 Logging statement uses f-string
    |
209 |         # Pass force_rebuild to scraper for cache invalidation
210 |         result = await source.scraper(source.url)
211 |         logger.debug(f"Downloaded data for {source.name}, type: {type(result).__name__}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
212 |
213 |         # Handle custom scraper results (returns dict) vs regular HTTP responses
    |

src/floridify/search/lexicon/language_loader.py:222:28: G004 Logging statement uses f-string
    |
220 |         response = result
221 |         if not hasattr(response, "text"):
222 |             logger.warning(f"Invalid response type from downloader for {source.name}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
223 |             return [], []
    |

src/floridify/search/lexicon/language_loader.py:226:21: G004 Logging statement uses f-string
    |
225 |         # Save response to cache
226 |         logger.info(f"Saving source data to cache: {cache_filepath.name}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
227 |         try:
228 |             with cache_filepath.open("w", encoding="utf-8") as f:
    |

src/floridify/search/lexicon/language_loader.py:232:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
230 |             logger.success(f"Successfully cached source data: {cache_filepath.name}")
231 |         except Exception as e:
232 |             logger.error(f"Failed to save source data to cache {cache_filepath.name}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
233 |
234 |         # Parse based on format
    |
    = help: Replace with `exception`

src/floridify/search/lexicon/language_loader.py:232:26: G004 Logging statement uses f-string
    |
230 |             logger.success(f"Successfully cached source data: {cache_filepath.name}")
231 |         except Exception as e:
232 |             logger.error(f"Failed to save source data to cache {cache_filepath.name}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
233 |
234 |         # Parse based on format
    |

src/floridify/search/lexicon/language_loader.py:237:9: RET505 [*] Unnecessary `elif` after `return` statement
    |
235 |         if source.format == LexiconFormat.TEXT_LINES:
236 |             return self._parse_text_lines(response.text, source.language)
237 |         elif source.format == LexiconFormat.JSON_IDIOMS:
    |         ^^^^ RET505
238 |             return self._parse_json_idioms(response.text, source.language)
239 |         elif source.format == LexiconFormat.FREQUENCY_LIST:
    |
    = help: Remove unnecessary `elif`

src/floridify/search/lexicon/language_loader.py:262:13: PLW2901 `for` loop variable `line` overwritten by assignment target
    |
261 |         for line in text.strip().split("\n"):
262 |             line = line.strip()
    |             ^^^^ PLW2901
263 |             if not line or line.startswith("#"):
264 |                 continue
    |

src/floridify/search/lexicon/language_loader.py:339:13: PLW2901 `for` loop variable `line` overwritten by assignment target
    |
338 |         for line in text.strip().split("\n"):
339 |             line = line.strip()
    |             ^^^^ PLW2901
340 |             if not line or line.startswith("#"):
341 |                 continue
    |

src/floridify/search/lexicon/language_loader.py:345:30: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
343 |             # Split by whitespace - first column is word, second is frequency
344 |             parts = line.split()
345 |             if len(parts) >= 2:
    |                              ^ PLR2004
346 |                 word = parts[0]
347 |                 try:
    |

src/floridify/search/lexicon/language_loader.py:391:22: B007 Loop control variable `value` not used within loop body
    |
390 |         if isinstance(data, dict):
391 |             for key, value in data.items():
    |                      ^^^^^ B007
392 |                 # Key is the word/phrase, value might be expansion or metadata
393 |                 normalized = self.phrase_normalizer.normalize(key)
    |
    = help: Rename unused `value` to `_value`

src/floridify/search/lexicon/language_loader.py:391:31: PERF102 When using only the keys of a dict use the `keys()` method
    |
390 |         if isinstance(data, dict):
391 |             for key, value in data.items():
    |                               ^^^^^^^^^^ PERF102
392 |                 # Key is the word/phrase, value might be expansion or metadata
393 |                 normalized = self.phrase_normalizer.normalize(key)
    |
    = help: Replace `.items()` with `.keys()`

src/floridify/search/lexicon/language_loader.py:444:17: PLC0415 `import` should be at the top-level of a file
    |
442 |             if isinstance(data, dict) and "content" in data:
443 |                 # Decode base64 content
444 |                 import base64
    |                 ^^^^^^^^^^^^^ PLC0415
445 |
446 |                 content = base64.b64decode(data["content"]).decode("utf-8")
    |

src/floridify/search/lexicon/language_loader.py:456:9: PLC0415 `import` should be at the top-level of a file
    |
454 |     ) -> tuple[list[str], list[MultiWordExpression]]:
455 |         """Parse CSV format with idiom,definition columns."""
456 |         import csv
    |         ^^^^^^^^^^ PLC0415
457 |         from io import StringIO
    |

src/floridify/search/lexicon/language_loader.py:457:9: PLC0415 `import` should be at the top-level of a file
    |
455 |         """Parse CSV format with idiom,definition columns."""
456 |         import csv
457 |         from io import StringIO
    |         ^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
458 |
459 |         phrases = []
    |

src/floridify/search/lexicon/language_loader.py:496:28: G004 Logging statement uses f-string
    |
495 |         except Exception as e:
496 |             logger.warning(f"Failed to parse CSV idioms: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
497 |             return [], []
    |

src/floridify/search/lexicon/language_loader.py:540:28: G004 Logging statement uses f-string
    |
539 |         except Exception as e:
540 |             logger.warning(f"Failed to parse JSON phrasal verbs: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
541 |             return [], []
    |

src/floridify/search/lexicon/language_loader.py:581:21: G004 Logging statement uses f-string
    |
579 |                     words.append(normalized)
580 |
581 |         logger.info(f"Parsed scraped data: {len(words)} words, {len(phrases)} phrases")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
582 |         return words, phrases
    |

src/floridify/search/lexicon/language_loader.py:646:33: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
644 |             },
645 |             "metadata": {
646 |                 "generated_at": datetime.datetime.now().isoformat(),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
647 |                 "generator": "Floridify LexiconLoader",
648 |                 "version": "1.0.0",
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/search/lexicon/language_loader.py:733:9: RET505 [*] Unnecessary `else` after `return` statement
    |
731 |         if source.format == LexiconFormat.CUSTOM_SCRAPER:
732 |             return self.lexicon_dir / f"{source.name}.json"
733 |         else:
    |         ^^^^ RET505
734 |             ext = self.get_lexicon_ext(source)
735 |             return self.lexicon_dir / f"{source.name}{ext}"
    |
    = help: Remove unnecessary `else`

src/floridify/search/lexicon/language_loader.py:739:21: G004 Logging statement uses f-string
    |
737 |     async def _save_scraper_data_to_cache(self, data: dict[str, Any], cache_filepath: Path) -> None:
738 |         """Save custom scraper data to cache file."""
739 |         logger.info(f"Saving scraper data to cache: {cache_filepath.name}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
740 |         import json
    |

src/floridify/search/lexicon/language_loader.py:740:9: PLC0415 `import` should be at the top-level of a file
    |
738 |         """Save custom scraper data to cache file."""
739 |         logger.info(f"Saving scraper data to cache: {cache_filepath.name}")
740 |         import json
    |         ^^^^^^^^^^^ PLC0415
741 |
742 |         try:
    |

src/floridify/search/lexicon/language_loader.py:747:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
745 |             logger.success(f"Successfully cached scraper data: {cache_filepath.name}")
746 |         except Exception as e:
747 |             logger.error(f"Failed to save scraper data to cache {cache_filepath.name}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
748 |
749 |     async def _load_from_cache_file(
    |
    = help: Replace with `exception`

src/floridify/search/lexicon/language_loader.py:747:26: G004 Logging statement uses f-string
    |
745 |             logger.success(f"Successfully cached scraper data: {cache_filepath.name}")
746 |         except Exception as e:
747 |             logger.error(f"Failed to save scraper data to cache {cache_filepath.name}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
748 |
749 |     async def _load_from_cache_file(
    |

src/floridify/search/lexicon/language_loader.py:749:15: PLR0911 Too many return statements (11 > 6)
    |
747 |             logger.error(f"Failed to save scraper data to cache {cache_filepath.name}: {e}")
748 |
749 |     async def _load_from_cache_file(
    |               ^^^^^^^^^^^^^^^^^^^^^ PLR0911
750 |         self, cache_filepath: Path, source: LexiconSourceConfig
751 |     ) -> tuple[list[str], list[MultiWordExpression]]:
    |

src/floridify/search/lexicon/language_loader.py:753:21: G004 Logging statement uses f-string
    |
751 |     ) -> tuple[list[str], list[MultiWordExpression]]:
752 |         """Load data from cached file."""
753 |         logger.info(f"Loading from cache: {cache_filepath.name}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
754 |         try:
755 |             if source.format == LexiconFormat.CUSTOM_SCRAPER:
    |

src/floridify/search/lexicon/language_loader.py:757:17: PLC0415 `import` should be at the top-level of a file
    |
755 |             if source.format == LexiconFormat.CUSTOM_SCRAPER:
756 |                 # Load JSON data for custom scrapers
757 |                 import json
    |                 ^^^^^^^^^^^ PLC0415
758 |
759 |                 with cache_filepath.open("r", encoding="utf-8") as f:
    |

src/floridify/search/lexicon/language_loader.py:763:13: RET505 [*] Unnecessary `else` after `return` statement
    |
761 |                 logger.success(f"Successfully loaded cached scraper data: {cache_filepath.name}")
762 |                 return self._parse_scraped_data(data, source.language)
763 |             else:
    |             ^^^^ RET505
764 |                 # Load text data for regular sources
765 |                 with cache_filepath.open("r", encoding="utf-8") as f:
    |
    = help: Remove unnecessary `else`

src/floridify/search/lexicon/language_loader.py:772:17: RET505 [*] Unnecessary `elif` after `return` statement
    |
770 |                 if source.format == LexiconFormat.TEXT_LINES:
771 |                     return self._parse_text_lines(text_data, source.language)
772 |                 elif source.format == LexiconFormat.JSON_IDIOMS:
    |                 ^^^^ RET505
773 |                     return self._parse_json_idioms(text_data, source.language)
774 |                 elif source.format == LexiconFormat.FREQUENCY_LIST:
    |
    = help: Remove unnecessary `elif`

src/floridify/search/lexicon/language_loader.py:787:36: G004 Logging statement uses f-string
    |
785 |                     return self._parse_json_phrasal_verbs(text_data, source.language)
786 |                 else:
787 |                     logger.warning(f"Unknown format for cached source: {source.format}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
788 |                     return [], []
789 |         except Exception as e:
    |

src/floridify/search/lexicon/language_loader.py:790:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
788 |                     return [], []
789 |         except Exception as e:
790 |             logger.error(f"Failed to load from cache {cache_filepath.name}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
791 |             return [], []
    |
    = help: Replace with `exception`

src/floridify/search/lexicon/language_loader.py:790:26: G004 Logging statement uses f-string
    |
788 |                     return [], []
789 |         except Exception as e:
790 |             logger.error(f"Failed to load from cache {cache_filepath.name}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
791 |             return [], []
    |

src/floridify/search/lexicon/language_loader.py:796:9: PIE790 [*] Unnecessary `pass` statement
    |
794 |         """Clean up resources."""
795 |         # HTTP client resources are now managed by the caching layer
796 |         pass
    |         ^^^^ PIE790
    |
    = help: Remove unnecessary `pass`

src/floridify/search/lexicon/parser.py:15:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from typing import Any
14 |
15 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
16 | from ...utils.logging import get_logger
17 | from ..constants import LexiconFormat
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/parser.py:15:26: TC001 Move application import `...constants.Language` into a type-checking block
   |
13 | from typing import Any
14 |
15 | from ...constants import Language
   |                          ^^^^^^^^ TC001
16 | from ...utils.logging import get_logger
17 | from ..constants import LexiconFormat
   |
   = help: Move into type-checking block

src/floridify/search/lexicon/parser.py:16:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...constants import Language
16 | from ...utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
17 | from ..constants import LexiconFormat
18 | from ..phrase import MultiWordExpression, PhraseNormalizer
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/parser.py:17:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
15 | from ...constants import Language
16 | from ...utils.logging import get_logger
17 | from ..constants import LexiconFormat
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
18 | from ..phrase import MultiWordExpression, PhraseNormalizer
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/parser.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...utils.logging import get_logger
17 | from ..constants import LexiconFormat
18 | from ..phrase import MultiWordExpression, PhraseNormalizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 |
20 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/parser.py:18:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
16 | from ...utils.logging import get_logger
17 | from ..constants import LexiconFormat
18 | from ..phrase import MultiWordExpression, PhraseNormalizer
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
19 |
20 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/parser.py:46:9: PLW2901 `for` loop variable `line` overwritten by assignment target
   |
45 |     for line in content.strip().split("\n"):
46 |         line = line.strip()
   |         ^^^^ PLW2901
47 |         if not line or line.startswith("#"):
48 |             continue
   |

src/floridify/search/lexicon/parser.py:71:9: PLW2901 `for` loop variable `line` overwritten by assignment target
   |
70 |     for line in content.strip().split("\n"):
71 |         line = line.strip()
   |         ^^^^ PLW2901
72 |         if not line or line.startswith("#"):
73 |             continue
   |

src/floridify/search/lexicon/parser.py:149:13: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
148 |     if isinstance(data, dict):
149 |         for key in data.keys():
    |             ^^^^^^^^^^^^^^^^^^ SIM118
150 |             normalized = phrase_normalizer.normalize(key)
151 |             if not normalized:
    |
    = help: Remove `.keys()`

src/floridify/search/lexicon/parser.py:235:24: G004 Logging statement uses f-string
    |
234 |     except Exception as e:
235 |         logger.warning(f"Failed to parse CSV idioms: {e}")
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
236 |         return [], []
    |

src/floridify/search/lexicon/parser.py:270:24: G004 Logging statement uses f-string
    |
269 |     except Exception as e:
270 |         logger.warning(f"Failed to parse JSON phrasal verbs: {e}")
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
271 |         return [], []
    |

src/floridify/search/lexicon/parser.py:326:14: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `content`
    |
324 | def parse_content(
325 |     lexicon_format: LexiconFormat | str,
326 |     content: Any,
    |              ^^^ ANN401
327 |     language: Language,
328 |     phrase_normalizer: PhraseNormalizer,
    |

src/floridify/search/lexicon/parser.py:336:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
334 |             lexicon_format = LexiconFormat(lexicon_format)
335 |         except ValueError:
336 |             raise ValueError(f"Unknown format: {lexicon_format}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
337 |
338 |     # Handle scraped data specially since it takes a dict
    |

src/floridify/search/lexicon/parser.py:336:19: TRY003 Avoid specifying long messages outside the exception class
    |
334 |             lexicon_format = LexiconFormat(lexicon_format)
335 |         except ValueError:
336 |             raise ValueError(f"Unknown format: {lexicon_format}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
337 |
338 |     # Handle scraped data specially since it takes a dict
    |

src/floridify/search/lexicon/parser.py:336:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
334 |             lexicon_format = LexiconFormat(lexicon_format)
335 |         except ValueError:
336 |             raise ValueError(f"Unknown format: {lexicon_format}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
337 |
338 |     # Handle scraped data specially since it takes a dict
    |
    = help: Assign to variable; remove f-string literal

src/floridify/search/lexicon/parser.py:344:15: TRY003 Avoid specifying long messages outside the exception class
    |
342 |     parser_func = PARSERS.get(lexicon_format)
343 |     if not parser_func:
344 |         raise ValueError(f"Unknown format: {lexicon_format}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
345 |
346 |     # Convert content to string for text-based parsers
    |

src/floridify/search/lexicon/parser.py:344:26: EM102 Exception must not use an f-string literal, assign to variable first
    |
342 |     parser_func = PARSERS.get(lexicon_format)
343 |     if not parser_func:
344 |         raise ValueError(f"Unknown format: {lexicon_format}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
345 |
346 |     # Convert content to string for text-based parsers
    |
    = help: Assign to variable; remove f-string literal

src/floridify/search/lexicon/scrapers/default.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | import httpx
11 |
12 | from ....caching import get_cached_http_client
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | # Type alias for clarity
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/scrapers/default.py:18:52: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
18 | async def default_scraper(url: str = "", **kwargs: Any) -> httpx.Response:
   |                                                    ^^^ ANN401
19 |     """Default HTTP GET downloader with caching."""
20 |     if not url:
   |

src/floridify/search/lexicon/scrapers/default.py:21:15: TRY003 Avoid specifying long messages outside the exception class
   |
19 |     """Default HTTP GET downloader with caching."""
20 |     if not url:
21 |         raise ValueError("URL is required for default downloader")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
22 |
23 |     # Get cached HTTP client
   |

src/floridify/search/lexicon/scrapers/default.py:21:26: EM101 Exception must not use a string literal, assign to variable first
   |
19 |     """Default HTTP GET downloader with caching."""
20 |     if not url:
21 |         raise ValueError("URL is required for default downloader")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
22 |
23 |     # Get cached HTTP client
   |
   = help: Assign to variable; remove string literal

src/floridify/search/lexicon/scrapers/wikipedia_french_expressions.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 | from bs4 import BeautifulSoup
13 |
14 | from ....utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 |
16 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/scrapers/wikipedia_french_expressions.py:19:62: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
19 | async def scrape_french_expressions(url: str = "", **kwargs: Any) -> dict[str, Any]:
   |                                                              ^^^ ANN401
20 |     """
21 |     Scrape French expressions from Wikipedia glossary page.
   |

src/floridify/search/lexicon/scrapers/wikipedia_french_expressions.py:30:17: G004 Logging statement uses f-string
   |
28 |     )
29 |
30 |     logger.info(f"Scraping French expressions from: {target_url}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
31 |
32 |     async with httpx.AsyncClient(timeout=30.0) as client:
   |

src/floridify/search/lexicon/scrapers/wikipedia_french_expressions.py:47:18: G004 Logging statement uses f-string
   |
45 |     # Get all dt elements (expression names)
46 |     dt_elements = content.find_all("dt")
47 |     logger.debug(f"Found {len(dt_elements)} dt elements")
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
48 |
49 |     for dt in dt_elements:
   |

src/floridify/search/lexicon/scrapers/wikipedia_french_expressions.py:71:17: G004 Logging statement uses f-string
   |
69 |             )
70 |
71 |     logger.info(f"Extracted {len(expressions)} French expressions")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
72 |
73 |     return {
   |

src/floridify/search/lexicon/sources.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from pydantic import BaseModel, Field
12 |
13 | from ...constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ..constants import LexiconFormat
15 | from .scrapers.default import ScraperFunc, default_scraper
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/lexicon/sources.py:14:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
13 | from ...constants import Language
14 | from ..constants import LexiconFormat
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
15 | from .scrapers.default import ScraperFunc, default_scraper
16 | from .scrapers.wikipedia_french_expressions import scrape_french_expressions
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from pydantic import BaseModel, Field
11 |
12 | from ..constants import Language
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..text import (
14 |     TextProcessor,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..constants import Language
13 | / from ..text import (
14 | |     TextProcessor,
15 | |     extract_phrases,
16 | |     is_phrase,
17 | |     join_words,
18 | |     normalize_text,
19 | |     split_phrase,
20 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..constants import Language
13 | / from ..text import (
14 | |     TextProcessor,
15 | |     extract_phrases,
16 | |     is_phrase,
17 | |     join_words,
18 | |     normalize_text,
19 | |     split_phrase,
20 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..constants import Language
13 | / from ..text import (
14 | |     TextProcessor,
15 | |     extract_phrases,
16 | |     is_phrase,
17 | |     join_words,
18 | |     normalize_text,
19 | |     split_phrase,
20 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..constants import Language
13 | / from ..text import (
14 | |     TextProcessor,
15 | |     extract_phrases,
16 | |     is_phrase,
17 | |     join_words,
18 | |     normalize_text,
19 | |     split_phrase,
20 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..constants import Language
13 | / from ..text import (
14 | |     TextProcessor,
15 | |     extract_phrases,
16 | |     is_phrase,
17 | |     join_words,
18 | |     normalize_text,
19 | |     split_phrase,
20 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/phrase.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..constants import Language
13 | / from ..text import (
14 | |     TextProcessor,
15 | |     extract_phrases,
16 | |     is_phrase,
17 | |     join_words,
18 | |     normalize_text,
19 | |     split_phrase,
20 | | )
   | |_^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/semantic.py:13:21: TC003 Move standard library import `pathlib.Path` into a type-checking block
   |
11 | import hashlib
12 | import pickle
13 | from pathlib import Path
   |                     ^^^^ TC003
14 | from typing import Any
   |
   = help: Move into type-checking block

src/floridify/search/semantic.py:46:30: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `x`
   |
44 |     DEFAULT_SENTENCE_MODEL = "all-MiniLM-L6-v2"
45 |
46 |     def cosine_similarity(x: Any, y: Any) -> list[Any]:
   |                              ^^^ ANN401
47 |         return []
   |

src/floridify/search/semantic.py:46:38: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `y`
   |
44 |     DEFAULT_SENTENCE_MODEL = "all-MiniLM-L6-v2"
45 |
46 |     def cosine_similarity(x: Any, y: Any) -> list[Any]:
   |                                      ^^^ ANN401
47 |         return []
   |

src/floridify/search/semantic.py:50:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
50 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
51 | from .constants import EmbeddingLevel
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/semantic.py:135:17: G004 Logging statement uses f-string
    |
133 |         if not SEMANTIC_SEARCH_AVAILABLE:
134 |             logger.warning(
135 |                 f"Semantic search disabled - {len(vocabulary)} words loaded but no embeddings created"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
136 |             )
137 |             return
    |

src/floridify/search/semantic.py:140:13: G004 Logging statement uses f-string
    |
139 |         logger.info(
140 |             f"Initializing modern semantic search with {len(vocabulary)} words using {self.model_name}"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
141 |         )
    |

src/floridify/search/semantic.py:170:22: G004 Logging statement uses f-string
    |
168 |             return
169 |
170 |         logger.debug(f"Building modern semantic embeddings for {len(self.vocabulary)} words")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
171 |
172 |         # Run embedding generation in executor to avoid blocking
    |

src/floridify/search/semantic.py:184:22: G004 Logging statement uses f-string
    |
183 |         # Primary: Modern sentence transformer embeddings (SOTA semantic understanding)
184 |         logger.debug(f"Building sentence transformer embeddings with {self.model_name}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
185 |         try:
186 |             self.sentence_model = SentenceTransformer(self.model_name)
    |

src/floridify/search/semantic.py:194:26: G004 Logging statement uses f-string
    |
192 |                 show_progress_bar=False,
193 |             )
194 |             logger.debug(f"Generated {self.sentence_embeddings.shape} sentence embeddings")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
195 |         except Exception as e:
196 |             logger.warning(f"Failed to build sentence embeddings: {e}, falling back to TF-IDF")
    |

src/floridify/search/semantic.py:196:28: G004 Logging statement uses f-string
    |
194 |             logger.debug(f"Generated {self.sentence_embeddings.shape} sentence embeddings")
195 |         except Exception as e:
196 |             logger.warning(f"Failed to build sentence embeddings: {e}, falling back to TF-IDF")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
197 |             self.sentence_model = None
198 |             self.sentence_embeddings = None
    |

src/floridify/search/semantic.py:247:9: RET505 [*] Unnecessary `else` after `return` statement
    |
245 |                 subwords.extend(self._split_word_into_subwords(w))
246 |             return " ".join(subwords)
247 |         else:
    |         ^^^^ RET505
248 |             return " ".join(self._split_word_into_subwords(word))
    |
    = help: Remove unnecessary `else`

src/floridify/search/semantic.py:252:25: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
250 |     def _split_word_into_subwords(self, word: str) -> list[str]:
251 |         """Split a word into subword units."""
252 |         if len(word) <= 3:
    |                         ^ PLR2004
253 |             return [word]
    |

src/floridify/search/semantic.py:258:25: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
    |
257 |         # Add prefixes and suffixes
258 |         if len(word) >= 4:
    |                         ^ PLR2004
259 |             subwords.append(word[:3])  # Prefix
260 |             subwords.append(word[-3:])  # Suffix
    |

src/floridify/search/semantic.py:262:25: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
    |
260 |             subwords.append(word[-3:])  # Suffix
261 |
262 |         if len(word) >= 6:
    |                         ^ PLR2004
263 |             subwords.append(word[:4])  # Longer prefix
264 |             subwords.append(word[-4:])  # Longer suffix
    |

src/floridify/search/semantic.py:267:25: PLR2004 Magic value used in comparison, consider replacing `8` with a constant variable
    |
266 |         # Add sliding window subwords for long words
267 |         if len(word) >= 8:
    |                         ^ PLR2004
268 |             for i in range(len(word) - 3):
269 |                 subwords.append(word[i : i + 4])
    |

src/floridify/search/semantic.py:269:17: PERF401 Use `list.extend` to create a transformed list
    |
267 |         if len(word) >= 8:
268 |             for i in range(len(word) - 3):
269 |                 subwords.append(word[i : i + 4])
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
270 |
271 |         return subwords
    |
    = help: Replace for loop with list.extend

src/floridify/search/semantic.py:369:34: G004 Logging statement uses f-string
    |
367 |             for file_key in required_files:
368 |                 if not cache_paths[file_key].exists():
369 |                     logger.debug(f"Cache file missing: {cache_paths[file_key].name}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
370 |                     return False
    |

src/floridify/search/semantic.py:425:13: TRY300 Consider moving this statement to an `else` block
    |
424 |             logger.debug("Successfully loaded embeddings from cache")
425 |             return True
    |             ^^^^^^^^^^^ TRY300
426 |
427 |         except Exception as e:
    |

src/floridify/search/semantic.py:428:28: G004 Logging statement uses f-string
    |
427 |         except Exception as e:
428 |             logger.warning(f"Failed to load from cache: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
429 |             return False
    |

src/floridify/search/semantic.py:493:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
492 |         except Exception as e:
493 |             logger.error(f"Failed to save to cache: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
494 |
495 |     async def search(self, query: str, max_results: int = 20) -> list[tuple[str, float]]:
    |
    = help: Replace with `exception`

src/floridify/search/semantic.py:493:26: G004 Logging statement uses f-string
    |
492 |         except Exception as e:
493 |             logger.error(f"Failed to save to cache: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
494 |
495 |     async def search(self, query: str, max_results: int = 20) -> list[tuple[str, float]]:
    |

src/floridify/search/semantic.py:508:17: G004 Logging statement uses f-string
    |
506 |         if not SEMANTIC_SEARCH_AVAILABLE or not self.vocabulary:
507 |             logger.warning(
508 |                 f"Semantic search called for '{query}' but functionality disabled - returning empty results"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
509 |             )
510 |             return []
    |

src/floridify/search/semantic.py:575:32: G004 Logging statement uses f-string
    |
573 |                 embeddings["sentence"] = sentence_vec[0] if sentence_vec.size > 0 else None
574 |             except Exception as e:
575 |                 logger.warning(f"Failed to encode query with sentence transformer: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
576 |                 embeddings["sentence"] = None
577 |         else:
    |

src/floridify/search/semantic.py:615:9: RET505 [*] Unnecessary `elif` after `return` statement
    |
613 |         if level == EmbeddingLevel.CHAR and self.char_index:
614 |             return await self._search_faiss_ip(query_vector, self.char_index, max_results)
615 |         elif level == EmbeddingLevel.SUBWORD and self.subword_index:
    |         ^^^^ RET505
616 |             return await self._search_faiss_ip(query_vector, self.subword_index, max_results)
617 |         elif level == EmbeddingLevel.WORD and self.word_index:
    |
    = help: Remove unnecessary `elif`

src/floridify/search/semantic.py:620:19: TRY003 Avoid specifying long messages outside the exception class
    |
618 |             return await self._search_faiss_ip(query_vector, self.word_index, max_results)
619 |         else:
620 |             raise ValueError(f"Invalid embedding level: {level}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
621 |
622 |     async def _search_sentence_level(
    |

src/floridify/search/semantic.py:620:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
618 |             return await self._search_faiss_ip(query_vector, self.word_index, max_results)
619 |         else:
620 |             raise ValueError(f"Invalid embedding level: {level}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
621 |
622 |     async def _search_sentence_level(
    |
    = help: Assign to variable; remove f-string literal

src/floridify/search/semantic.py:641:30: B905 [*] `zip()` without an explicit `strict=` parameter
    |
639 |         # Convert L2 distances to similarity scores (higher is better)
640 |         results = []
641 |         for distance, idx in zip(distances[0], indices[0]):
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
642 |             if idx >= 0 and idx < len(self.vocabulary):
643 |                 # Convert L2 distance to similarity score (0-1, higher = more similar)
    |
    = help: Add explicit value for parameter `strict=`

src/floridify/search/semantic.py:665:27: B905 [*] `zip()` without an explicit `strict=` parameter
    |
663 |         # Convert to results
664 |         results = []
665 |         for score, idx in zip(scores[0], indices[0]):
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
666 |             if idx >= 0 and idx < len(self.vocabulary):
667 |                 results.append((self.vocabulary[idx], float(score)))
    |
    = help: Add explicit value for parameter `strict=`

src/floridify/search/semantic.py:769:16: RET504 Unnecessary assignment to `results` before `return` statement
    |
767 |         results = [(self.vocabulary[i], float(similarities[i])) for i in indices]
768 |
769 |         return results
    |                ^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src/floridify/search/trie.py:11:21: TC003 Move standard library import `pathlib.Path` into a type-checking block
   |
10 | import pickle
11 | from pathlib import Path
   |                     ^^^^ TC003
12 | from typing import Any
   |
   = help: Move into type-checking block

src/floridify/search/trie.py:60:13: PLW2901 `for` loop variable `word` overwritten by assignment target
   |
58 |         normalized_words = []
59 |         for word in words:
60 |             word = word.strip().lower()
   |             ^^^^ PLW2901
61 |             if not word:
62 |                 continue
   |

src/floridify/search/trie.py:96:9: SIM108 Use ternary operator `phrase_bonus = 200 if " " in word else 0` instead of `if`-`else`-block
    |
 95 |           # Phrase bonus/penalty
 96 | /         if " " in word:
 97 | |             # Phrases: moderate frequency
 98 | |             phrase_bonus = 200
 99 | |         else:
100 | |             # Single words: base frequency
101 | |             phrase_bonus = 0
    | |____________________________^ SIM108
102 |
103 |           # Common word patterns
    |
    = help: Replace `if`-`else`-block with `phrase_bonus = 200 if " " in word else 0`

src/floridify/search/trie.py:156:9: RET505 [*] Unnecessary `else` after `return` statement
    |
154 |             frequency_pairs.sort(key=lambda x: x[1], reverse=True)
155 |             return [word for word, _ in frequency_pairs]
156 |         else:
    |         ^^^^ RET505
157 |             # For many matches, use partial sort for better performance
158 |             import heapq
    |
    = help: Remove unnecessary `else`

src/floridify/search/trie.py:158:13: PLC0415 `import` should be at the top-level of a file
    |
156 |         else:
157 |             # For many matches, use partial sort for better performance
158 |             import heapq
    |             ^^^^^^^^^^^^ PLC0415
159 |
160 |             heap_items: list[tuple[int, str]] = [
    |

src/floridify/search/trie.py:245:19: TRY003 Avoid specifying long messages outside the exception class
    |
243 |         """
244 |         if not self._trie:
245 |             raise ValueError("No trie built to save")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
246 |
247 |         data = {
    |

src/floridify/search/trie.py:245:30: EM101 Exception must not use a string literal, assign to variable first
    |
243 |         """
244 |         if not self._trie:
245 |             raise ValueError("No trie built to save")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ EM101
246 |
247 |         data = {
    |
    = help: Assign to variable; remove string literal

src/floridify/search/utils.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | import unicodedata
11 |
12 | from ..utils.text_utils import normalize_word
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 |
14 | # Common diacritic mappings for reference
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/search/utils.py:122:12: RET504 Unnecessary assignment to `cleaned` before `return` statement
    |
120 |     cleaned = re.sub(r"\s+", " ", cleaned.strip())
121 |
122 |     return cleaned
    |            ^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src/floridify/storage/mongodb.py:6:21: TC003 Move standard library import `pathlib.Path` into a type-checking block
  |
5 | from datetime import datetime
6 | from pathlib import Path
  |                     ^^^^ TC003
7 | from typing import Any
  |
  = help: Move into type-checking block

src/floridify/storage/mongodb.py:12:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
10 | from motor.motor_asyncio import AsyncIOMotorClient, AsyncIOMotorDatabase
11 |
12 | from ..list.models import WordList
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
13 | from ..models import (
14 |     AudioMedia,
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
12 |   from ..list.models import WordList
13 | / from ..models import (
14 | |     AudioMedia,
15 | |     Definition,
16 | |     Example,
17 | |     Fact,
18 | |     PhrasalExpression,
19 | |     Pronunciation,
20 | |     ProviderData,
21 | |     SynthesizedDictionaryEntry,
22 | |     Word,
23 | |     WordRelationship,
24 | | )
   | |_^ TID252
25 |   from ..utils.config import Config
26 |   from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:25:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
23 |     WordRelationship,
24 | )
25 | from ..utils.config import Config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
26 | from ..utils.logging import get_logger
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:26:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
24 | )
25 | from ..utils.config import Config
26 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
27 |
28 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/storage/mongodb.py:111:13: TRY300 Consider moving this statement to an `else` block
    |
109 |             # Ping the database to check connection health
110 |             await self.client.admin.command("ping")
111 |             return True
    |             ^^^^^^^^^^^ TRY300
112 |         except Exception as e:
113 |             logger.warning(f"MongoDB connection unhealthy: {e}")
    |

src/floridify/storage/mongodb.py:113:28: G004 Logging statement uses f-string
    |
111 |             return True
112 |         except Exception as e:
113 |             logger.warning(f"MongoDB connection unhealthy: {e}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
114 |             try:
115 |                 await self.reconnect()
    |

src/floridify/storage/mongodb.py:116:17: TRY300 Consider moving this statement to an `else` block
    |
114 |             try:
115 |                 await self.reconnect()
116 |                 return True
    |                 ^^^^^^^^^^^ TRY300
117 |             except Exception as reconnect_error:
118 |                 logger.error(f"Failed to reconnect to MongoDB: {reconnect_error}")
    |

src/floridify/storage/mongodb.py:118:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
116 |                 return True
117 |             except Exception as reconnect_error:
118 |                 logger.error(f"Failed to reconnect to MongoDB: {reconnect_error}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
119 |                 return False
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:118:30: G004 Logging statement uses f-string
    |
116 |                 return True
117 |             except Exception as reconnect_error:
118 |                 logger.error(f"Failed to reconnect to MongoDB: {reconnect_error}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
119 |                 return False
    |

src/floridify/storage/mongodb.py:152:13: TRY300 Consider moving this statement to an `else` block
    |
150 |                     stats["min_pool_size"] = pool_options.min_pool_size
151 |
152 |             return stats
    |             ^^^^^^^^^^^^ TRY300
153 |         except Exception as e:
154 |             logger.debug(f"Could not get full pool stats: {e}")
    |

src/floridify/storage/mongodb.py:154:26: G004 Logging statement uses f-string
    |
152 |             return stats
153 |         except Exception as e:
154 |             logger.debug(f"Could not get full pool stats: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
155 |             return {"status": "connected", "initialized": self._initialized}
    |

src/floridify/storage/mongodb.py:185:39: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
183 |                 existing.offensive_flag = word.offensive_flag
184 |                 existing.first_known_use = word.first_known_use
185 |                 existing.updated_at = datetime.now()
    |                                       ^^^^^^^^^^^^^^ DTZ005
186 |                 existing.version += 1
187 |                 await existing.save()
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/storage/mongodb.py:192:13: TRY300 Consider moving this statement to an `else` block
    |
190 |                 await word.create()
191 |
192 |             return True
    |             ^^^^^^^^^^^ TRY300
193 |
194 |         except Exception as e:
    |

src/floridify/storage/mongodb.py:195:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
194 |         except Exception as e:
195 |             logger.error(f"Error saving word {word.text}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
196 |             return False
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:195:26: G004 Logging statement uses f-string
    |
194 |         except Exception as e:
195 |             logger.error(f"Error saving word {word.text}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
196 |             return False
    |

src/floridify/storage/mongodb.py:213:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
211 |             return await Word.find_one(Word.text == text)
212 |         except Exception as e:
213 |             logger.error(f"Error retrieving word {text}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
214 |             return None
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:213:26: G004 Logging statement uses f-string
    |
211 |             return await Word.find_one(Word.text == text)
212 |         except Exception as e:
213 |             logger.error(f"Error retrieving word {text}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
214 |             return None
    |

src/floridify/storage/mongodb.py:230:13: TRY300 Consider moving this statement to an `else` block
    |
228 |         try:
229 |             count = await Word.find(Word.text == text).count()
230 |             return count > 0
    |             ^^^^^^^^^^^^^^^^ TRY300
231 |         except Exception as e:
232 |             logger.error(f"Error checking existence for {text}: {e}")
    |

src/floridify/storage/mongodb.py:232:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
230 |             return count > 0
231 |         except Exception as e:
232 |             logger.error(f"Error checking existence for {text}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
233 |             return False
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:232:26: G004 Logging statement uses f-string
    |
230 |             return count > 0
231 |         except Exception as e:
232 |             logger.error(f"Error checking existence for {text}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
233 |             return False
    |

src/floridify/storage/mongodb.py:250:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
248 |             return await Definition.find(Definition.word_id == word_id).to_list()
249 |         except Exception as e:
250 |             logger.error(f"Error retrieving definitions for word {word_id}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
251 |             return []
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:250:26: G004 Logging statement uses f-string
    |
248 |             return await Definition.find(Definition.word_id == word_id).to_list()
249 |         except Exception as e:
250 |             logger.error(f"Error retrieving definitions for word {word_id}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
251 |             return []
    |

src/floridify/storage/mongodb.py:257:12: PLW0603 Using the global statement to update `_storage` is discouraged
    |
255 | async def _ensure_initialized() -> None:
256 |     """Ensure MongoDB is initialized with environment-aware configuration."""
257 |     global _storage
    |            ^^^^^^^^ PLW0603
258 |     if _storage is None:
259 |         try:
    |

src/floridify/storage/mongodb.py:257:12: PLW0603 Using the global statement to update `_storage` is discouraged
    |
255 | async def _ensure_initialized() -> None:
256 |     """Ensure MongoDB is initialized with environment-aware configuration."""
257 |     global _storage
    |            ^^^^^^^^ PLW0603
258 |     if _storage is None:
259 |         try:
    |

src/floridify/storage/mongodb.py:266:25: G004 Logging statement uses f-string
    |
264 |             cert_path = config.database.cert_path
265 |
266 |             logger.info(f"Initializing MongoDB: {database_name} at {mongodb_url[:50]}...")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
267 |
268 |             _storage = MongoDBStorage(
    |

src/floridify/storage/mongodb.py:274:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
272 |             logger.info("MongoDB initialized successfully")
273 |         except Exception as e:
274 |             logger.error(f"MongoDB initialization failed: {type(e).__name__}: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
275 |             logger.error("Stack trace:", exc_info=True)
276 |             _storage = None  # Reset storage on failure
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:274:26: G004 Logging statement uses f-string
    |
272 |             logger.info("MongoDB initialized successfully")
273 |         except Exception as e:
274 |             logger.error(f"MongoDB initialization failed: {type(e).__name__}: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
275 |             logger.error("Stack trace:", exc_info=True)
276 |             _storage = None  # Reset storage on failure
    |

src/floridify/storage/mongodb.py:275:20: G201 Logging `.exception(...)` should be used instead of `.error(..., exc_info=True)`
    |
273 |         except Exception as e:
274 |             logger.error(f"MongoDB initialization failed: {type(e).__name__}: {e}")
275 |             logger.error("Stack trace:", exc_info=True)
    |                    ^^^^^ G201
276 |             _storage = None  # Reset storage on failure
277 |             raise
    |

src/floridify/storage/mongodb.py:291:15: TRY003 Avoid specifying long messages outside the exception class
    |
289 |     storage = await get_storage()
290 |     if not storage.client:
291 |         raise RuntimeError("MongoDB client not initialized")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
292 |     return storage.client[storage.database_name]
    |

src/floridify/storage/mongodb.py:291:28: EM101 Exception must not use a string literal, assign to variable first
    |
289 |     storage = await get_storage()
290 |     if not storage.client:
291 |         raise RuntimeError("MongoDB client not initialized")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
292 |     return storage.client[storage.database_name]
    |
    = help: Assign to variable; remove string literal

src/floridify/storage/mongodb.py:327:35: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
325 |             existing.model_info = entry.model_info
326 |             existing.source_provider_data_ids = entry.source_provider_data_ids
327 |             existing.updated_at = datetime.now()
    |                                   ^^^^^^^^^^^^^^ DTZ005
328 |             existing.version += 1
329 |             await existing.save()
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/floridify/storage/mongodb.py:333:9: TRY400 Use `logging.exception` instead of `logging.error`
    |
331 |             await entry.create()
332 |     except Exception as e:
333 |         logger.error(f"Error saving synthesized entry: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
    |
    = help: Replace with `exception`

src/floridify/storage/mongodb.py:333:22: G004 Logging statement uses f-string
    |
331 |             await entry.create()
332 |     except Exception as e:
333 |         logger.error(f"Error saving synthesized entry: {e}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src/floridify/text/__init__.py:21:11: RUF022 [*] `__all__` is not sorted
   |
19 |   )
20 |
21 |   __all__ = [
   |  ___________^
22 | |     "TextProcessor",
23 | |     "ProcessingResult",
24 | |     "tokenize",
25 | |     "sentence_tokenize",
26 | |     "word_tokenize",
27 | |     "normalize_text",
28 | |     "lemmatize_word",
29 | |     "basic_lemmatize",
30 | |     "is_phrase",
31 | |     "split_phrase",
32 | |     "join_words",
33 | |     "extract_phrases",
34 | |     "find_hyphenated_phrases",
35 | |     "find_quoted_phrases",
36 | |     "detect_multiword_expressions",
37 | |     "calculate_mwe_confidence",
38 | |     "get_phrase_variants",
39 | |     "normalize_phrase",
40 | |     "phrase_word_count",
41 | |     "is_compound_word",
42 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/text/normalizer.py:22:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
20 |     FTFY_AVAILABLE = False
21 |
22 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
23 | from .processor import get_text_processor
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/text/normalizer.py:83:26: G004 Logging statement uses f-string
   |
81 |             normalized = ftfy.fix_text(normalized)
82 |         except Exception as e:
83 |             logger.debug(f"ftfy failed: {e}")
   |                          ^^^^^^^^^^^^^^^^^^^ G004
84 |
85 |     # Step 2: Unicode normalization
   |

src/floridify/text/normalizer.py:99:26: G004 Logging statement uses f-string
    |
 97 |             normalized = contractions.fix(normalized, slang=False)
 98 |         except Exception as e:
 99 |             logger.debug(f"Contractions expansion failed: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
100 |
101 |     # Step 6: Remove excess punctuation (but preserve hyphens and apostrophes)
    |

src/floridify/text/normalizer.py:137:32: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
135 |         Lemmatized word
136 |     """
137 |     if not word or len(word) < 3:
    |                                ^ PLR2004
138 |         return word
    |

src/floridify/text/normalizer.py:148:13: RET505 [*] Unnecessary `elif` after `return` statement
    |
146 |             if suffix == "ing" and word[-4] == word[-5]:  # running -> run
147 |                 return word[:-4]
148 |             elif suffix == "ed" and word[-3] == word[-4]:  # stopped -> stop
    |             ^^^^ RET505
149 |                 return word[:-3]
150 |             else:
    |
    = help: Remove unnecessary `elif`

src/floridify/text/normalizer.py:195:12: RET504 Unnecessary assignment to `cleaned` before `return` statement
    |
193 |     cleaned = re.sub(r"[^a-zA-Z'-]", "", word.strip().lower())
194 |
195 |     return cleaned
    |            ^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src/floridify/text/normalizer.py:219:5: SIM103 Return the condition `any(c.isalpha() for c in cleaned)` directly
    |
218 |       # Must contain at least one alphabetic character
219 | /     if not any(c.isalpha() for c in cleaned):
220 | |         return False
221 | |
222 | |     return True
    | |_______________^ SIM103
    |
    = help: Replace with `return any(c.isalpha() for c in cleaned)`

src/floridify/text/processor.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 7 | from typing import Protocol, runtime_checkable
 8 |
 9 | from ..utils.logging import get_logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 |
11 | logger = get_logger(__name__)
   |
   = help: Replace relative imports from parent modules with absolute imports

src/floridify/text/processor.py:62:9: ANN204 Missing return type annotation for special method `__init__`
   |
60 |     """Spacy-based text processor."""
61 |
62 |     def __init__(self, model: str = "en_core_web_sm"):
   |         ^^^^^^^^ ANN204
63 |         if not SPACY_AVAILABLE:
64 |             raise RuntimeError("Spacy not available")
   |
   = help: Add return type annotation: `None`

src/floridify/text/processor.py:64:19: TRY003 Avoid specifying long messages outside the exception class
   |
62 |     def __init__(self, model: str = "en_core_web_sm"):
63 |         if not SPACY_AVAILABLE:
64 |             raise RuntimeError("Spacy not available")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
65 |
66 |         self.model_name = model
   |

src/floridify/text/processor.py:64:32: EM101 Exception must not use a string literal, assign to variable first
   |
62 |     def __init__(self, model: str = "en_core_web_sm"):
63 |         if not SPACY_AVAILABLE:
64 |             raise RuntimeError("Spacy not available")
   |                                ^^^^^^^^^^^^^^^^^^^^^ EM101
65 |
66 |         self.model_name = model
   |
   = help: Assign to variable; remove string literal

src/floridify/text/processor.py:75:25: G004 Logging statement uses f-string
   |
73 |             # Disable unnecessary components for performance
74 |             self.nlp = spacy.load(self.model_name, disable=["parser", "ner", "textcat"])
75 |             logger.info(f"Loaded spacy model: {self.model_name}")
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
76 |         except OSError:
77 |             logger.warning(f"Spacy model {self.model_name} not found, using blank model")
   |

src/floridify/text/processor.py:77:28: G004 Logging statement uses f-string
   |
75 |             logger.info(f"Loaded spacy model: {self.model_name}")
76 |         except OSError:
77 |             logger.warning(f"Spacy model {self.model_name} not found, using blank model")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
78 |             try:
79 |                 self.nlp = spacy.blank("en")
   |

src/floridify/text/processor.py:81:17: TRY400 Use `logging.exception` instead of `logging.error`
   |
79 |                 self.nlp = spacy.blank("en")
80 |             except Exception as e:
81 |                 logger.error(f"Failed to create blank spacy model: {e}")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
82 |                 raise
   |
   = help: Replace with `exception`

src/floridify/text/processor.py:81:30: G004 Logging statement uses f-string
   |
79 |                 self.nlp = spacy.blank("en")
80 |             except Exception as e:
81 |                 logger.error(f"Failed to create blank spacy model: {e}")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
82 |                 raise
   |

src/floridify/text/processor.py:113:19: TRY003 Avoid specifying long messages outside the exception class
    |
111 |     def __init__(self) -> None:
112 |         if not NLTK_AVAILABLE:
113 |             raise RuntimeError("NLTK not available")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
114 |
115 |         self._setup_nltk()
    |

src/floridify/text/processor.py:113:32: EM101 Exception must not use a string literal, assign to variable first
    |
111 |     def __init__(self) -> None:
112 |         if not NLTK_AVAILABLE:
113 |             raise RuntimeError("NLTK not available")
    |                                ^^^^^^^^^^^^^^^^^^^^ EM101
114 |
115 |         self._setup_nltk()
    |
    = help: Assign to variable; remove string literal

src/floridify/text/processor.py:125:13: PLC0415 `import` should be at the top-level of a file
    |
123 |             nltk.download("averaged_perceptron_tagger", quiet=True)
124 |
125 |             from nltk.stem import WordNetLemmatizer  # type: ignore[import-untyped]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
126 |             from nltk.tokenize import word_tokenize  # type: ignore[import-untyped]
    |

src/floridify/text/processor.py:126:13: PLC0415 `import` should be at the top-level of a file
    |
125 |             from nltk.stem import WordNetLemmatizer  # type: ignore[import-untyped]
126 |             from nltk.tokenize import word_tokenize  # type: ignore[import-untyped]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
127 |
128 |             self.word_tokenize = word_tokenize
    |

src/floridify/text/processor.py:134:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
132 |             logger.info("NLTK processor initialized")
133 |         except Exception as e:
134 |             logger.error(f"Failed to setup NLTK: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
135 |             self._available = False
    |
    = help: Replace with `exception`

src/floridify/text/processor.py:134:26: G004 Logging statement uses f-string
    |
132 |             logger.info("NLTK processor initialized")
133 |         except Exception as e:
134 |             logger.error(f"Failed to setup NLTK: {e}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
135 |             self._available = False
    |

src/floridify/text/processor.py:161:20: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
159 |       # Pre-compiled patterns for performance
160 |       WORD_PATTERN = re.compile(r"\b\w+\b")
161 |       SUFFIX_RULES = {
    |  ____________________^
162 | |         "ing": "",
163 | |         "ed": "",
164 | |         "er": "",
165 | |         "est": "",
166 | |         "ly": "",
167 | |         "s": "",
168 | |     }
    | |_____^ RUF012
169 |
170 |       def tokenize(self, text: str) -> list[str]:
    |

src/floridify/text/processor.py:192:9: ANN204 Missing return type annotation for special method `__init__`
    |
190 |     """Main text processor with automatic fallbacks."""
191 |
192 |     def __init__(self, prefer_method: str = "auto"):
    |         ^^^^^^^^ ANN204
193 |         self.processors: list[TextProcessorProtocol] = []
194 |         self._setup_processors(prefer_method)
    |
    = help: Add return type annotation: `None`

src/floridify/text/processor.py:202:32: G004 Logging statement uses f-string
    |
200 |                 self.processors.append(SpacyProcessor())
201 |             except Exception as e:
202 |                 logger.warning(f"Failed to setup spacy: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
203 |
204 |         if prefer_method in ("nltk", "auto") and NLTK_AVAILABLE:
    |

src/floridify/text/processor.py:208:32: G004 Logging statement uses f-string
    |
206 |                 self.processors.append(NLTKProcessor())
207 |             except Exception as e:
208 |                 logger.warning(f"Failed to setup NLTK: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
209 |
210 |         if prefer_method == "auto" and SPACY_AVAILABLE:
    |

src/floridify/text/processor.py:214:32: G004 Logging statement uses f-string
    |
212 |                 self.processors.append(SpacyProcessor())
213 |             except Exception as e:
214 |                 logger.warning(f"Failed to setup spacy: {e}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
215 |
216 |         # Always add regex as fallback
    |

src/floridify/text/processor.py:224:21: G004 Logging statement uses f-string
    |
222 |             if p.is_available()
223 |         ]
224 |         logger.info(f"Text processors available: {available_methods}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
225 |
226 |     def get_processor(self) -> TextProcessorProtocol:
    |

src/floridify/text/processor.py:232:15: TRY003 Avoid specifying long messages outside the exception class
    |
230 |                 return processor
231 |
232 |         raise RuntimeError("No text processors available")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
233 |
234 |     def tokenize(self, text: str) -> list[str]:
    |

src/floridify/text/processor.py:232:28: EM101 Exception must not use a string literal, assign to variable first
    |
230 |                 return processor
231 |
232 |         raise RuntimeError("No text processors available")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
233 |
234 |     def tokenize(self, text: str) -> list[str]:
    |
    = help: Assign to variable; remove string literal

src/floridify/text/processor.py:252:9: PLC0415 `import` should be at the top-level of a file
    |
250 |     def process(self, text: str) -> ProcessingResult:
251 |         """Process text and return detailed result."""
252 |         import time
    |         ^^^^^^^^^^^ PLC0415
253 |
254 |         start_time = time.time()
    |

src/floridify/text/processor.py:282:12: PLW0603 Using the global statement to update `_default_processor` is discouraged
    |
280 | def get_text_processor() -> TextProcessor:
281 |     """Get global text processor instance."""
282 |     global _default_processor
    |            ^^^^^^^^^^^^^^^^^^ PLW0603
283 |
284 |     if _default_processor is None:
    |

src/floridify/text/tokenizer.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | import re
6 |
7 | from ..utils.logging import get_logger
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
8 | from .processor import get_text_processor
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/text/tokenizer.py:125:56: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
124 |     # Filter out very short tokens and normalize
125 |     return [token for token in tokens if len(token) >= 2 and token.isalpha()]
    |                                                        ^ PLR2004
    |

src/floridify/text/utils.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | import re
6 |
7 | from ..utils.logging import get_logger
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
8 | from .normalizer import normalize_text
9 | from .tokenizer import word_tokenize
  |
  = help: Replace relative imports from parent modules with absolute imports

src/floridify/text/utils.py:15:33: RUF001 String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
14 | # Enhanced pre-compiled patterns for robust phrase detection (2025 best practices)
15 | HYPHEN_PATTERN = re.compile(r"[-–—]")
   |                                 ^ RUF001
16 | HYPHENATED_PATTERN = re.compile(r"\b\w+(?:[-–—]\w+){1,4}\b", re.UNICODE)
17 | QUOTED_PATTERN = re.compile(r'["\'\'""\«]([^"\'\'""\»]+)["\'\'""\»]')
   |

src/floridify/text/utils.py:16:45: RUF001 String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
14 | # Enhanced pre-compiled patterns for robust phrase detection (2025 best practices)
15 | HYPHEN_PATTERN = re.compile(r"[-–—]")
16 | HYPHENATED_PATTERN = re.compile(r"\b\w+(?:[-–—]\w+){1,4}\b", re.UNICODE)
   |                                             ^ RUF001
17 | QUOTED_PATTERN = re.compile(r'["\'\'""\«]([^"\'\'""\»]+)["\'\'""\»]')
   |

src/floridify/text/utils.py:53:5: SIM103 Return the condition directly
   |
52 |       # Single hyphenated compound = phrase
53 | /     if len(tokens) == 1 and HYPHEN_PATTERN.search(tokens[0]):
54 | |         return True
55 | |
56 | |     return False
   | |________________^ SIM103
   |
   = help: Inline condition

src/floridify/text/utils.py:133:26: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
131 |         word_count = hyphen_count + 1
132 |
133 |         if word_count >= 2:  # At least 2 words
    |                          ^ PLR2004
134 |             normalized = normalize_text(match)
135 |             if normalized:
    |

src/floridify/text/utils.py:165:27: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
163 |         tokens = word_tokenize(normalized)
164 |
165 |         if len(tokens) >= 2:  # Multi-word phrases only
    |                           ^ PLR2004
166 |             phrases.append(normalized)
    |

src/floridify/text/utils.py:171:5: PLR0912 Too many branches (17 > 12)
    |
171 | def extract_phrases(text: str, include_advanced_patterns: bool = True) -> list[str]:
    |     ^^^^^^^^^^^^^^^ PLR0912
172 |     """
173 |     Extract all types of multi-word expressions using advanced NLP patterns.
    |

src/floridify/text/utils.py:204:65: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
202 |         for match in compound_matches:
203 |             normalized = normalize_text(match)
204 |             if normalized and len(word_tokenize(normalized)) >= 2:
    |                                                                 ^ PLR2004
205 |                 phrases.append(normalized)
    |

src/floridify/text/utils.py:217:44: RUF005 Consider `[*words_before, match, *words_after]` instead of concatenation
    |
215 |                 words_after = text[idiom_start + len(match) :].split()[:2]
216 |
217 |                 extended_phrase = " ".join(words_before + [match] + words_after)
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
218 |                 normalized = normalize_text(extended_phrase)
219 |                 if normalized and len(word_tokenize(normalized)) >= 2:
    |
    = help: Replace with `[*words_before, match, *words_after]`

src/floridify/text/utils.py:219:69: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
217 |                 extended_phrase = " ".join(words_before + [match] + words_after)
218 |                 normalized = normalize_text(extended_phrase)
219 |                 if normalized and len(word_tokenize(normalized)) >= 2:
    |                                                                     ^ PLR2004
220 |                     phrases.append(normalized)
    |

src/floridify/text/utils.py:233:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
231 |           for match in prep_matches:
232 |               normalized = normalize_text(match)
233 | /             if normalized and len(word_tokenize(normalized)) >= 2:
234 | |                 # Filter out overly long prepositional phrases
235 | |                 if len(word_tokenize(normalized)) <= 5:
    | |_______________________________________________________^ SIM102
236 |                       phrases.append(normalized)
    |
    = help: Combine `if` statements using `and`

src/floridify/text/utils.py:233:65: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
231 |         for match in prep_matches:
232 |             normalized = normalize_text(match)
233 |             if normalized and len(word_tokenize(normalized)) >= 2:
    |                                                                 ^ PLR2004
234 |                 # Filter out overly long prepositional phrases
235 |                 if len(word_tokenize(normalized)) <= 5:
    |

src/floridify/text/utils.py:235:54: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
233 |             if normalized and len(word_tokenize(normalized)) >= 2:
234 |                 # Filter out overly long prepositional phrases
235 |                 if len(word_tokenize(normalized)) <= 5:
    |                                                      ^ PLR2004
236 |                     phrases.append(normalized)
    |

src/floridify/text/utils.py:253:16: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
251 |             # Quality filter: reasonable length, meaningful content
252 |             tokens = word_tokenize(phrase_clean)
253 |             if 2 <= len(tokens) <= 6 and not all(len(token) <= 2 for token in tokens):
    |                ^ PLR2004
254 |                 seen.add(phrase_clean)
255 |                 unique_phrases.append(phrase_clean)
    |

src/floridify/text/utils.py:253:36: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
    |
251 |             # Quality filter: reasonable length, meaningful content
252 |             tokens = word_tokenize(phrase_clean)
253 |             if 2 <= len(tokens) <= 6 and not all(len(token) <= 2 for token in tokens):
    |                                    ^ PLR2004
254 |                 seen.add(phrase_clean)
255 |                 unique_phrases.append(phrase_clean)
    |

src/floridify/text/utils.py:253:64: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
251 |             # Quality filter: reasonable length, meaningful content
252 |             tokens = word_tokenize(phrase_clean)
253 |             if 2 <= len(tokens) <= 6 and not all(len(token) <= 2 for token in tokens):
    |                                                                ^ PLR2004
254 |                 seen.add(phrase_clean)
255 |                 unique_phrases.append(phrase_clean)
    |

src/floridify/text/utils.py:335:32: RUF001 String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
333 |     if preserve_hyphens:
334 |         # Normalize hyphen variants to standard ASCII hyphen
335 |         normalized = re.sub(r"[–—]", "-", normalized)
    |                                ^ RUF001
336 |
337 |     # Ensure consistent spacing (single spaces)
    |

src/floridify/text/utils.py:399:23: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
398 |     # Base score for multi-word nature
399 |     if len(tokens) >= 2:
    |                       ^ PLR2004
400 |         confidence += 0.3
    |

src/floridify/text/utils.py:419:22: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
418 |     # Penalty for very long phrases (likely spurious)
419 |     if len(tokens) > 5:
    |                      ^ PLR2004
420 |         confidence -= 0.2
    |

src/floridify/text/utils.py:423:26: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
422 |     # Penalty for very short words (likely not meaningful MWEs)
423 |     if all(len(token) <= 2 for token in tokens):
    |                          ^ PLR2004
424 |         confidence -= 0.3
    |

src/floridify/utils/__init__.py:11:11: RUF022 `__all__` is not sorted
   |
 9 |   )
10 |
11 |   __all__ = [
   |  ___________^
12 | |     # Logging
13 | |     "setup_logging",
14 | |     "get_logger",
15 | |     # Text utilities
16 | |     "normalize_word",
17 | |     "bold_word_in_text",
18 | |     "clean_markdown",
19 | |     "ensure_sentence_case",
20 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/floridify/utils/config.py:67:9: SIM108 Use ternary operator `url = self.production_url if is_production else self.development_url` instead of `if`-`else`-block
   |
66 |           # Get the appropriate URL
67 | /         if is_production:
68 | |             url = self.production_url
69 | |         else:
70 | |             # Development always uses SSH tunnel on host
71 | |             url = self.development_url
   | |______________________________________^ SIM108
72 |
73 |           if not url:
   |
   = help: Replace `if`-`else`-block with `url = self.production_url if is_production else self.development_url`

src/floridify/utils/config.py:74:19: TRY003 Avoid specifying long messages outside the exception class
   |
73 |           if not url:
74 |               raise ValueError(
   |  ___________________^
75 | |                 f"No database URL configured for environment "
76 | |                 f"(production={is_production}, docker={is_docker}). "
77 | |                 f"Please check auth/config.toml"
78 | |             )
   | |_____________^ TRY003
79 |
80 |           # For Docker, replace localhost with host.docker.internal
   |

src/floridify/utils/config.py:75:17: EM102 Exception must not use an f-string literal, assign to variable first
   |
73 |           if not url:
74 |               raise ValueError(
75 | /                 f"No database URL configured for environment "
76 | |                 f"(production={is_production}, docker={is_docker}). "
77 | |                 f"Please check auth/config.toml"
   | |________________________________________________^ EM102
78 |               )
   |
   = help: Assign to variable; remove f-string literal

src/floridify/utils/config.py:156:19: TRY003 Avoid specifying long messages outside the exception class
    |
155 |           if not config_path.exists():
156 |               raise FileNotFoundError(
    |  ___________________^
157 | |                 f"Configuration file not found: {config_path}\n"
158 | |                 f"Please create {config_path} with your API keys and database configuration."
159 | |             )
    | |_____________^ TRY003
160 |
161 |           data = toml.load(config_path)
    |

src/floridify/utils/config.py:157:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
155 |           if not config_path.exists():
156 |               raise FileNotFoundError(
157 | /                 f"Configuration file not found: {config_path}\n"
158 | |                 f"Please create {config_path} with your API keys and database configuration."
    | |_____________________________________________________________________________________________^ EM102
159 |               )
    |
    = help: Assign to variable; remove f-string literal

src/floridify/utils/config.py:233:19: TRY003 Avoid specifying long messages outside the exception class
    |
231 |           # Validate required fields
232 |           if not config.openai.api_key:
233 |               raise ValueError(
    |  ___________________^
234 | |                 f"OpenAI API key missing in {config_path}\n"
235 | |                 f"Please update the 'api_key' field in the [openai] section."
236 | |             )
    | |_____________^ TRY003
237 |
238 |           return config
    |

src/floridify/utils/config.py:234:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
232 |           if not config.openai.api_key:
233 |               raise ValueError(
234 | /                 f"OpenAI API key missing in {config_path}\n"
235 | |                 f"Please update the 'api_key' field in the [openai] section."
    | |_____________________________________________________________________________^ EM102
236 |               )
    |
    = help: Assign to variable; remove f-string literal

src/floridify/utils/logging.py:24:85: B039 Do not use mutable data structures for `ContextVar` defaults
   |
23 | # Context variable for request correlation
24 | request_context: ContextVar[dict[str, Any]] = ContextVar("request_context", default={})
   |                                                                                     ^^ B039
25 |
26 | T = TypeVar("T")
   |
   = help: Replace with `None`; initialize with `.set()``

src/floridify/utils/logging.py:34:12: PLW0603 Using the global statement to update `_configured` is discouraged
   |
32 | def _configure_loguru() -> None:
33 |     """Configure loguru with VSCode-compatible format and performance optimizations."""
34 |     global _configured
   |            ^^^^^^^^^^^ PLW0603
35 |     if _configured:
36 |         return
   |

src/floridify/utils/logging.py:88:5: SIM105 Use `contextlib.suppress(ValueError)` instead of `try`-`except`-`pass`
   |
87 |       # Add custom SUCCESS level for compatibility
88 | /     try:
89 | |         loguru_logger.level("SUCCESS", no=25, color="<green><bold>")
90 | |     except ValueError:
91 | |         # Level already exists
92 | |         pass
   | |____________^ SIM105
93 |
94 |       _configured = True
   |
   = help: Replace with `contextlib.suppress(ValueError)`

src/floridify/utils/logging.py:104:9: ANN204 Missing return type annotation for special method `__init__`
    |
102 |     """Wrapper around loguru logger to provide compatible API with enhanced features."""
103 |
104 |     def __init__(self, name: str):
    |         ^^^^^^^^ ANN204
105 |         self._name = name
106 |         self._logger = loguru_logger.bind(name=name)
    |
    = help: Add return type annotation: `None`

src/floridify/utils/logging.py:108:39: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
106 |         self._logger = loguru_logger.bind(name=name)
107 |
108 |     def _with_context(self, **kwargs: Any) -> Any:
    |                                       ^^^ ANN401
109 |         """Add request context to log message."""
110 |         context = request_context.get({})
    |

src/floridify/utils/logging.py:108:47: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_with_context`
    |
106 |         self._logger = loguru_logger.bind(name=name)
107 |
108 |     def _with_context(self, **kwargs: Any) -> Any:
    |                                               ^^^ ANN401
109 |         """Add request context to log message."""
110 |         context = request_context.get({})
    |

src/floridify/utils/logging.py:113:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
111 |         return self._logger.bind(**context, **kwargs)
112 |
113 |     def debug(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                          ^^^ ANN401
114 |         """Log debug message with context."""
115 |         self._with_context().opt(depth=1).debug(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:113:57: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
111 |         return self._logger.bind(**context, **kwargs)
112 |
113 |     def debug(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                         ^^^ ANN401
114 |         """Log debug message with context."""
115 |         self._with_context().opt(depth=1).debug(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:117:41: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
115 |         self._with_context().opt(depth=1).debug(message, *args, **kwargs)
116 |
117 |     def info(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                         ^^^ ANN401
118 |         """Log info message with context."""
119 |         self._with_context().opt(depth=1).info(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:117:56: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
115 |         self._with_context().opt(depth=1).debug(message, *args, **kwargs)
116 |
117 |     def info(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                        ^^^ ANN401
118 |         """Log info message with context."""
119 |         self._with_context().opt(depth=1).info(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:121:44: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
119 |         self._with_context().opt(depth=1).info(message, *args, **kwargs)
120 |
121 |     def warning(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                            ^^^ ANN401
122 |         """Log warning message with context."""
123 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:121:59: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
119 |         self._with_context().opt(depth=1).info(message, *args, **kwargs)
120 |
121 |     def warning(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                           ^^^ ANN401
122 |         """Log warning message with context."""
123 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:125:41: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
123 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
124 |
125 |     def warn(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                         ^^^ ANN401
126 |         """Alias for warning (stdlib compatibility)."""
127 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:125:56: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
123 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
124 |
125 |     def warn(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                        ^^^ ANN401
126 |         """Alias for warning (stdlib compatibility)."""
127 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:129:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
127 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
128 |
129 |     def error(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                          ^^^ ANN401
130 |         """Log error message with context."""
131 |         self._with_context().opt(depth=1).error(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:129:57: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
127 |         self._with_context().opt(depth=1).warning(message, *args, **kwargs)
128 |
129 |     def error(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                         ^^^ ANN401
130 |         """Log error message with context."""
131 |         self._with_context().opt(depth=1).error(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:133:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
131 |         self._with_context().opt(depth=1).error(message, *args, **kwargs)
132 |
133 |     def critical(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                             ^^^ ANN401
134 |         """Log critical message with context."""
135 |         self._with_context().opt(depth=1).critical(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:133:60: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
131 |         self._with_context().opt(depth=1).error(message, *args, **kwargs)
132 |
133 |     def critical(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                            ^^^ ANN401
134 |         """Log critical message with context."""
135 |         self._with_context().opt(depth=1).critical(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:137:46: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
135 |         self._with_context().opt(depth=1).critical(message, *args, **kwargs)
136 |
137 |     def exception(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                              ^^^ ANN401
138 |         """Log exception message with traceback."""
139 |         self._with_context().opt(depth=1).exception(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:137:61: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
135 |         self._with_context().opt(depth=1).critical(message, *args, **kwargs)
136 |
137 |     def exception(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                             ^^^ ANN401
138 |         """Log exception message with traceback."""
139 |         self._with_context().opt(depth=1).exception(message, *args, **kwargs)
    |

src/floridify/utils/logging.py:141:44: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
139 |         self._with_context().opt(depth=1).exception(message, *args, **kwargs)
140 |
141 |     def success(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                            ^^^ ANN401
142 |         """Log success message with success prefix (preserved API)."""
143 |         self._with_context().opt(depth=1).log("SUCCESS", f"✅ {message}", *args, **kwargs)
    |

src/floridify/utils/logging.py:141:59: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
139 |         self._with_context().opt(depth=1).exception(message, *args, **kwargs)
140 |
141 |     def success(self, message: str, *args: Any, **kwargs: Any) -> None:
    |                                                           ^^^ ANN401
142 |         """Log success message with success prefix (preserved API)."""
143 |         self._with_context().opt(depth=1).log("SUCCESS", f"✅ {message}", *args, **kwargs)
    |

src/floridify/utils/logging.py:145:30: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
143 |         self._with_context().opt(depth=1).log("SUCCESS", f"✅ {message}", *args, **kwargs)
144 |
145 |     def bind(self, **kwargs: Any) -> "LoggerWrapper":
    |                              ^^^ ANN401
146 |         """Create logger with bound context."""
147 |         wrapper = LoggerWrapper(self._name)
    |

src/floridify/utils/logging.py:168:12: PLW0603 Using the global statement to update `_configured` is discouraged
    |
166 |     The actual configuration is handled by _configure_loguru().
167 |     """
168 |     global _configured
    |            ^^^^^^^^^^^ PLW0603
169 |     _configured = False  # Force reconfiguration with new level
    |

src/floridify/utils/logging.py:185:36: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
184 |     @functools.wraps(func)
185 |     async def async_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                    ^^^ ANN401
186 |         start_time = time.perf_counter()
187 |         func_name = f"{func.__module__}.{func.__name__}"
    |

src/floridify/utils/logging.py:185:51: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
184 |     @functools.wraps(func)
185 |     async def async_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                                   ^^^ ANN401
186 |         start_time = time.perf_counter()
187 |         func_name = f"{func.__module__}.{func.__name__}"
    |

src/floridify/utils/logging.py:192:27: G004 Logging statement uses f-string
    |
190 |         func_logger = loguru_logger.bind(function_name=func_name, execution_type="async")
191 |
192 |         func_logger.debug(f"⏱️  Starting {func_name}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
193 |         try:
194 |             result: T = await func(*args, **kwargs)  # type: ignore[misc]
    |

src/floridify/utils/logging.py:196:30: G004 Logging statement uses f-string
    |
194 |             result: T = await func(*args, **kwargs)  # type: ignore[misc]
195 |             elapsed = time.perf_counter() - start_time
196 |             func_logger.info(f"✅ {func_name} completed in {elapsed:.2f}s", duration=elapsed)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
197 |             return result
198 |         except Exception as e:
    |

src/floridify/utils/logging.py:197:13: TRY300 Consider moving this statement to an `else` block
    |
195 |             elapsed = time.perf_counter() - start_time
196 |             func_logger.info(f"✅ {func_name} completed in {elapsed:.2f}s", duration=elapsed)
197 |             return result
    |             ^^^^^^^^^^^^^ TRY300
198 |         except Exception as e:
199 |             elapsed = time.perf_counter() - start_time
    |

src/floridify/utils/logging.py:200:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
198 |           except Exception as e:
199 |               elapsed = time.perf_counter() - start_time
200 | /             func_logger.error(
201 | |                 f"❌ {func_name} failed after {elapsed:.2f}s: {e}", duration=elapsed, error=str(e)
202 | |             )
    | |_____________^ TRY400
203 |               raise
    |
    = help: Replace with `exception`

src/floridify/utils/logging.py:201:17: G004 Logging statement uses f-string
    |
199 |             elapsed = time.perf_counter() - start_time
200 |             func_logger.error(
201 |                 f"❌ {func_name} failed after {elapsed:.2f}s: {e}", duration=elapsed, error=str(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
202 |             )
203 |             raise
    |

src/floridify/utils/logging.py:206:29: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
205 |     @functools.wraps(func)
206 |     def sync_wrapper(*args: Any, **kwargs: Any) -> T:
    |                             ^^^ ANN401
207 |         start_time = time.perf_counter()
208 |         func_name = f"{func.__module__}.{func.__name__}"
    |

src/floridify/utils/logging.py:206:44: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
205 |     @functools.wraps(func)
206 |     def sync_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                            ^^^ ANN401
207 |         start_time = time.perf_counter()
208 |         func_name = f"{func.__module__}.{func.__name__}"
    |

src/floridify/utils/logging.py:213:27: G004 Logging statement uses f-string
    |
211 |         func_logger = loguru_logger.bind(function_name=func_name, execution_type="sync")
212 |
213 |         func_logger.debug(f"⏱️  Starting {func_name}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
214 |         try:
215 |             result = func(*args, **kwargs)
    |

src/floridify/utils/logging.py:217:30: G004 Logging statement uses f-string
    |
215 |             result = func(*args, **kwargs)
216 |             elapsed = time.perf_counter() - start_time
217 |             func_logger.info(f"✅ {func_name} completed in {elapsed:.2f}s", duration=elapsed)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
218 |             return result
219 |         except Exception as e:
    |

src/floridify/utils/logging.py:218:13: TRY300 Consider moving this statement to an `else` block
    |
216 |             elapsed = time.perf_counter() - start_time
217 |             func_logger.info(f"✅ {func_name} completed in {elapsed:.2f}s", duration=elapsed)
218 |             return result
    |             ^^^^^^^^^^^^^ TRY300
219 |         except Exception as e:
220 |             elapsed = time.perf_counter() - start_time
    |

src/floridify/utils/logging.py:221:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
219 |           except Exception as e:
220 |               elapsed = time.perf_counter() - start_time
221 | /             func_logger.error(
222 | |                 f"❌ {func_name} failed after {elapsed:.2f}s: {e}", duration=elapsed, error=str(e)
223 | |             )
    | |_____________^ TRY400
224 |               raise
    |
    = help: Replace with `exception`

src/floridify/utils/logging.py:222:17: G004 Logging statement uses f-string
    |
220 |             elapsed = time.perf_counter() - start_time
221 |             func_logger.error(
222 |                 f"❌ {func_name} failed after {elapsed:.2f}s: {e}", duration=elapsed, error=str(e)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
223 |             )
224 |             raise
    |

src/floridify/utils/logging.py:227:21: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
226 |     if asyncio.iscoroutinefunction(func):
227 |         return cast(Callable[..., T], async_wrapper)
    |                     ^^^^^^^^^^^^^^^^ TC006
228 |     else:
229 |         return cast(Callable[..., T], sync_wrapper)
    |
    = help: Add quotes

src/floridify/utils/logging.py:228:5: RET505 [*] Unnecessary `else` after `return` statement
    |
226 |     if asyncio.iscoroutinefunction(func):
227 |         return cast(Callable[..., T], async_wrapper)
228 |     else:
    |     ^^^^ RET505
229 |         return cast(Callable[..., T], sync_wrapper)
    |
    = help: Remove unnecessary `else`

src/floridify/utils/logging.py:229:21: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
227 |         return cast(Callable[..., T], async_wrapper)
228 |     else:
229 |         return cast(Callable[..., T], sync_wrapper)
    |                     ^^^^^^^^^^^^^^^^ TC006
    |
    = help: Add quotes

src/floridify/utils/logging.py:237:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
235 |     def decorator(func: Callable[..., T]) -> Callable[..., T]:
236 |         @functools.wraps(func)
237 |         async def async_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                        ^^^ ANN401
238 |             # Use loguru with stage context
239 |             stage_logger = loguru_logger.bind(
    |

src/floridify/utils/logging.py:237:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
235 |     def decorator(func: Callable[..., T]) -> Callable[..., T]:
236 |         @functools.wraps(func)
237 |         async def async_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                                       ^^^ ANN401
238 |             # Use loguru with stage context
239 |             stage_logger = loguru_logger.bind(
    |

src/floridify/utils/logging.py:243:31: G004 Logging statement uses f-string
    |
241 |             )
242 |
243 |             stage_logger.info(f"{emoji} Entering stage: {stage_name}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
244 |             # Preserve Rich console output
245 |             console.print(
    |

src/floridify/utils/logging.py:255:35: G004 Logging statement uses f-string
    |
253 |             try:
254 |                 result: T = await func(*args, **kwargs)  # type: ignore[misc]
255 |                 stage_logger.info(f"✅ Stage '{stage_name}' completed successfully")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
256 |                 return result
257 |             except Exception as e:
    |

src/floridify/utils/logging.py:256:17: TRY300 Consider moving this statement to an `else` block
    |
254 |                 result: T = await func(*args, **kwargs)  # type: ignore[misc]
255 |                 stage_logger.info(f"✅ Stage '{stage_name}' completed successfully")
256 |                 return result
    |                 ^^^^^^^^^^^^^ TRY300
257 |             except Exception as e:
258 |                 stage_logger.error(f"❌ Stage '{stage_name}' failed: {e}", error=str(e))
    |

src/floridify/utils/logging.py:258:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
256 |                 return result
257 |             except Exception as e:
258 |                 stage_logger.error(f"❌ Stage '{stage_name}' failed: {e}", error=str(e))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
259 |                 raise
    |
    = help: Replace with `exception`

src/floridify/utils/logging.py:258:36: G004 Logging statement uses f-string
    |
256 |                 return result
257 |             except Exception as e:
258 |                 stage_logger.error(f"❌ Stage '{stage_name}' failed: {e}", error=str(e))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
259 |                 raise
    |

src/floridify/utils/logging.py:262:33: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
    |
261 |         @functools.wraps(func)
262 |         def sync_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                 ^^^ ANN401
263 |             # Use loguru with stage context
264 |             stage_logger = loguru_logger.bind(
    |

src/floridify/utils/logging.py:262:48: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    |
261 |         @functools.wraps(func)
262 |         def sync_wrapper(*args: Any, **kwargs: Any) -> T:
    |                                                ^^^ ANN401
263 |             # Use loguru with stage context
264 |             stage_logger = loguru_logger.bind(
    |

src/floridify/utils/logging.py:268:31: G004 Logging statement uses f-string
    |
266 |             )
267 |
268 |             stage_logger.info(f"{emoji} Entering stage: {stage_name}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
269 |             # Preserve Rich console output
270 |             console.print(
    |

src/floridify/utils/logging.py:280:35: G004 Logging statement uses f-string
    |
278 |             try:
279 |                 result = func(*args, **kwargs)
280 |                 stage_logger.info(f"✅ Stage '{stage_name}' completed successfully")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
281 |                 return result
282 |             except Exception as e:
    |

src/floridify/utils/logging.py:281:17: TRY300 Consider moving this statement to an `else` block
    |
279 |                 result = func(*args, **kwargs)
280 |                 stage_logger.info(f"✅ Stage '{stage_name}' completed successfully")
281 |                 return result
    |                 ^^^^^^^^^^^^^ TRY300
282 |             except Exception as e:
283 |                 stage_logger.error(f"❌ Stage '{stage_name}' failed: {e}", error=str(e))
    |

src/floridify/utils/logging.py:283:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
281 |                 return result
282 |             except Exception as e:
283 |                 stage_logger.error(f"❌ Stage '{stage_name}' failed: {e}", error=str(e))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
284 |                 raise
    |
    = help: Replace with `exception`

src/floridify/utils/logging.py:283:36: G004 Logging statement uses f-string
    |
281 |                 return result
282 |             except Exception as e:
283 |                 stage_logger.error(f"❌ Stage '{stage_name}' failed: {e}", error=str(e))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
284 |                 raise
    |

src/floridify/utils/logging.py:287:25: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
286 |         if asyncio.iscoroutinefunction(func):
287 |             return cast(Callable[..., T], async_wrapper)
    |                         ^^^^^^^^^^^^^^^^ TC006
288 |         else:
289 |             return cast(Callable[..., T], sync_wrapper)
    |
    = help: Add quotes

src/floridify/utils/logging.py:288:9: RET505 [*] Unnecessary `else` after `return` statement
    |
286 |         if asyncio.iscoroutinefunction(func):
287 |             return cast(Callable[..., T], async_wrapper)
288 |         else:
    |         ^^^^ RET505
289 |             return cast(Callable[..., T], sync_wrapper)
    |
    = help: Remove unnecessary `else`

src/floridify/utils/logging.py:289:25: TC006 [*] Add quotes to type expression in `typing.cast()`
    |
287 |             return cast(Callable[..., T], async_wrapper)
288 |         else:
289 |             return cast(Callable[..., T], sync_wrapper)
    |                         ^^^^^^^^^^^^^^^^ TC006
290 |
291 |     return decorator
    |
    = help: Add quotes

src/floridify/utils/logging.py:294:28: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**metrics`
    |
294 | def log_metrics(**metrics: Any) -> None:
    |                            ^^^ ANN401
295 |     """Log structured metrics with enhanced context."""
296 |     metrics_str = " | ".join(f"{k}={v}" for k, v in metrics.items())
    |

src/floridify/utils/logging.py:363:36: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**context`
    |
363 | def set_request_context(**context: Any) -> None:
    |                                    ^^^ ANN401
364 |     """Set request-scoped context for all subsequent logs.
    |

src/floridify/utils/logging.py:385:5: SLF001 Private member accessed: `_logger`
    |
383 |     """
384 |     wrapper = LoggerWrapper("correlation")
385 |     wrapper._logger = loguru_logger.bind(correlation_id=correlation_id)
    |     ^^^^^^^^^^^^^^^ SLF001
386 |     return wrapper
    |

src/floridify/utils/logging.py:389:48: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**metrics`
    |
389 | def log_performance(operation: str, **metrics: Any) -> None:
    |                                                ^^^ ANN401
390 |     """Log performance metrics with structured data.
    |

src/floridify/utils/paths.py:9:5: PLR0911 Too many return statements (7 > 6)
   |
 9 | def get_project_root() -> Path:
   |     ^^^^^^^^^^^^^^^^ PLR0911
10 |     """Find project root by looking for both backend/ and auth/ directories.
   |

src/floridify/utils/sanitization.py:60:15: TRY003 Avoid specifying long messages outside the exception class
   |
58 |     # Check minimum length
59 |     if not word or len(word) < 1:
60 |         raise ValueError("Word cannot be empty")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
61 |
62 |     # Check maximum length
   |

src/floridify/utils/sanitization.py:60:26: EM101 Exception must not use a string literal, assign to variable first
   |
58 |     # Check minimum length
59 |     if not word or len(word) < 1:
60 |         raise ValueError("Word cannot be empty")
   |                          ^^^^^^^^^^^^^^^^^^^^^^ EM101
61 |
62 |     # Check maximum length
   |
   = help: Assign to variable; remove string literal

src/floridify/utils/sanitization.py:63:20: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
62 |     # Check maximum length
63 |     if len(word) > 100:
   |                    ^^^ PLR2004
64 |         raise ValueError("Word too long (max 100 characters)")
   |

src/floridify/utils/sanitization.py:64:15: TRY003 Avoid specifying long messages outside the exception class
   |
62 |     # Check maximum length
63 |     if len(word) > 100:
64 |         raise ValueError("Word too long (max 100 characters)")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
65 |
66 |     # Allow letters, spaces, hyphens, apostrophes, and common diacritics
   |

src/floridify/utils/sanitization.py:64:26: EM101 Exception must not use a string literal, assign to variable first
   |
62 |     # Check maximum length
63 |     if len(word) > 100:
64 |         raise ValueError("Word too long (max 100 characters)")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
65 |
66 |     # Allow letters, spaces, hyphens, apostrophes, and common diacritics
   |
   = help: Assign to variable; remove string literal

src/floridify/utils/sanitization.py:68:15: TRY003 Avoid specifying long messages outside the exception class
   |
66 |     # Allow letters, spaces, hyphens, apostrophes, and common diacritics
67 |     if not re.match(r"^[\w\s\-\'àâäçèéêëîïôùûüÿæœÀÂÄÇÈÉÊËÎÏÔÙÛÜŸÆŒ]+$", word):
68 |         raise ValueError("Word contains invalid characters")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
69 |
70 |     return word
   |

src/floridify/utils/sanitization.py:68:26: EM101 Exception must not use a string literal, assign to variable first
   |
66 |     # Allow letters, spaces, hyphens, apostrophes, and common diacritics
67 |     if not re.match(r"^[\w\s\-\'àâäçèéêëîïôùûüÿæœÀÂÄÇÈÉÊËÎÏÔÙÛÜŸÆŒ]+$", word):
68 |         raise ValueError("Word contains invalid characters")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
69 |
70 |     return word
   |
   = help: Assign to variable; remove string literal

src/floridify/utils/sanitization.py:88:15: TRY003 Avoid specifying long messages outside the exception class
   |
86 |     # Only allow alphanumeric and underscore
87 |     if not re.match(r"^[a-zA-Z_][a-zA-Z0-9_]*$", field):
88 |         raise ValueError(f"Invalid field name: {field}")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
89 |
90 |     # Prevent access to private/magic attributes
   |

src/floridify/utils/sanitization.py:88:26: EM102 Exception must not use an f-string literal, assign to variable first
   |
86 |     # Only allow alphanumeric and underscore
87 |     if not re.match(r"^[a-zA-Z_][a-zA-Z0-9_]*$", field):
88 |         raise ValueError(f"Invalid field name: {field}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
89 |
90 |     # Prevent access to private/magic attributes
   |
   = help: Assign to variable; remove f-string literal

src/floridify/utils/sanitization.py:92:15: TRY003 Avoid specifying long messages outside the exception class
   |
90 |     # Prevent access to private/magic attributes
91 |     if field.startswith("_"):
92 |         raise ValueError(f"Cannot access private field: {field}")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
93 |
94 |     return field
   |

src/floridify/utils/sanitization.py:92:26: EM102 Exception must not use an f-string literal, assign to variable first
   |
90 |     # Prevent access to private/magic attributes
91 |     if field.startswith("_"):
92 |         raise ValueError(f"Cannot access private field: {field}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
93 |
94 |     return field
   |
   = help: Assign to variable; remove f-string literal

src/floridify/utils/sanitization.py:116:14: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
114 |         if isinstance(value, str):
115 |             sanitized[clean_key] = sanitize_mongodb_input(value)
116 |         elif isinstance(value, (list, tuple)):
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
117 |             sanitized[clean_key] = [
118 |                 sanitize_mongodb_input(v) if isinstance(v, str) else v for v in value
    |
    = help: Convert to `X | Y`

src/floridify/utils/text_utils.py:36:12: RET504 Unnecessary assignment to `normalized` before `return` statement
   |
34 |     normalized = unicodedata.normalize("NFC", normalized)
35 |
36 |     return normalized
   |            ^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src/floridify/utils/text_utils.py:56:12: RET504 Unnecessary assignment to `text` before `return` statement
   |
54 |     # Remove links, keep link text
55 |     text = re.sub(r"\[(.*?)\]\(.*?\)", r"\1", text)
56 |     return text
   |            ^^^^ RET504
   |
   = help: Remove unnecessary assignment

src/floridify/utils/text_utils.py:120:29: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
118 |     # Single word fallback - try to bold significant word parts
119 |     for word_part in word_parts:
120 |         if len(word_part) > 3 and word_part in text_lower:
    |                             ^ PLR2004
121 |             pattern = re.compile(re.escape(word_part), re.IGNORECASE)
122 |             if pattern.search(text):
    |

src/utils.py:18:21: FURB129 [*] Instead of calling `readlines()`, iterate over file object directly
   |
17 |     with open(word_list_path) as word_list_file:
18 |         for line in word_list_file.readlines():
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ FURB129
19 |             if (match := re.match(word_re, line)) is not None:
20 |                 word = match.group(1).strip().lower()
   |
   = help: Remove `readlines()`

Found 2750 errors.
[*] 747 fixable with the `--fix` option (818 hidden fixes can be enabled with the `--unsafe-fixes` option).

# Base docker-compose configuration
# For development: docker-compose up
# For production: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
version: '3.8'

services:
  backend:
    build:
      context: ./backend
      target: ${BUILD_TARGET:-development}
    container_name: floridify-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://localhost:5173"]}
      # Database configuration handled by auth/config.toml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
    # Development volume mounts
    volumes:
      - ./backend:/app
      - /app/.venv
      - ./auth:/app/auth
    # Development command with reload
    command: ["uvicorn", "src.floridify.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  frontend:
    build:
      context: ./frontend
      target: ${BUILD_TARGET:-development}
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
        VITE_APP_TITLE: ${VITE_APP_TITLE:-Floridify}
        VITE_VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
    container_name: floridify-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_APP_TITLE: ${VITE_APP_TITLE:-Floridify}
      VITE_VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      CHOKIDAR_USEPOLLING: "true"
    networks:
      - app-network
    # Development volume mounts
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Notification server for PWA push notifications
  notification-server:
    build:
      context: ./notification-server
      target: ${BUILD_TARGET:-development}
    container_name: floridify-notifications
    restart: unless-stopped
    ports:
      - "${NOTIFICATION_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      VAPID_SUBJECT: ${VAPID_SUBJECT:-mailto:notifications@floridify.com}
      MONGO_URI: ${MONGO_URI:-mongodb://mongodb:27017}
      DB_NAME: ${MONGO_DATABASE:-floridify}
      API_URL: ${API_URL:-http://backend:8000}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://frontend:3000}
    networks:
      - app-network
    depends_on:
      - backend
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Development volume mounts
    volumes:
      - ./notification-server:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    profiles:
      - dev

  # MongoDB - only for local development
  # Comment out this service if using a remote MongoDB instance
  mongodb:
    image: mongo:7.0
    container_name: floridify-mongodb
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-floridify}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles:
      - dev

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
#!/bin/bash

# Production setup script
# Configures GitHub secrets and copies auth config to EC2

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) is not installed. Install with: brew install gh"
        exit 1
    fi
    
    if ! gh auth status &> /dev/null; then
        print_error "GitHub CLI not authenticated. Run: gh auth login"
        exit 1
    fi
    
    if [ ! -f "auth/config.toml" ]; then
        print_error "auth/config.toml not found (should be at project root)"
        exit 1
    fi
    
    if [ ! -f ".env.production" ]; then
        print_error ".env.production not found"
        exit 1
    fi
    
    if [ ! -f "$HOME/.ssh/id_rsa" ]; then
        print_error "SSH private key not found at ~/.ssh/id_rsa"
        exit 1
    fi
    
    print_status "Prerequisites check passed"
}

# Extract values from config files
extract_secrets() {
    print_status "Extracting secrets from local config files..."
    
    # Extract from .env.production
    CERTBOT_EMAIL=$(grep '^CERTBOT_EMAIL=' .env.production | cut -d'=' -f2-)
    DOMAIN=$(grep '^DOMAIN=' .env.production | cut -d'=' -f2-)
    
    # Read SSH private key
    EC2_SSH_KEY=$(cat ~/.ssh/id_rsa)
    
    print_status "Secrets extracted successfully"
}

# Set GitHub repository secrets
set_github_secrets() {
    print_status "Setting GitHub repository secrets..."
    
    # Set EC2_SSH_KEY
    echo "$EC2_SSH_KEY" | gh secret set EC2_SSH_KEY --repo="$GITHUB_REPO"
    print_status "âœ“ Set EC2_SSH_KEY"
    
    # Set CERTBOT_EMAIL
    echo "$CERTBOT_EMAIL" | gh secret set CERTBOT_EMAIL --repo="$GITHUB_REPO"
    print_status "âœ“ Set CERTBOT_EMAIL"
    
    # Set DOMAIN
    echo "$DOMAIN" | gh secret set DOMAIN --repo="$GITHUB_REPO"
    print_status "âœ“ Set DOMAIN"
    
    print_status "All GitHub secrets have been set successfully!"
}

# Copy config.toml to EC2
copy_config_to_ec2() {
    print_status "Copying auth/config.toml to EC2..."
    
    # Extract EC2 details from .env.production
    EC2_HOST=$(grep '^EC2_HOST=' .env.production | cut -d'=' -f2-)
    EC2_USER=$(grep '^EC2_USER=' .env.production | cut -d'=' -f2-)
    
    # Test SSH connection first
    if ! ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST 'echo "SSH connection successful"' &>/dev/null; then
        print_error "Cannot connect to EC2 via SSH. Make sure your key is in EC2 authorized_keys."
        return 1
    fi
    
    # Create auth directory on EC2
    ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST 'mkdir -p ~/floridify/auth'
    
    # Copy config file
    scp -o StrictHostKeyChecking=no auth/config.toml $EC2_USER@$EC2_HOST:~/floridify/auth/
    
    print_status "âœ“ Config copied to EC2 successfully"
}

# Verify secrets were set
verify_secrets() {
    print_status "Verifying secrets were set..."
    
    SECRETS=$(gh secret list --repo="$GITHUB_REPO")
    
    for secret in "EC2_SSH_KEY" "CERTBOT_EMAIL" "DOMAIN"; do
        if echo "$SECRETS" | grep -q "$secret"; then
            print_status "âœ“ $secret verified"
        else
            print_error "âœ— $secret not found"
        fi
    done
}

# Load configuration from .env.production
load_config() {
    if [ ! -f ".env.production" ]; then
        print_error ".env.production not found"
        exit 1
    fi
    
    # Source GitHub configuration from .env.production
    GITHUB_REPO_OWNER=$(grep '^GITHUB_REPO_OWNER=' .env.production | cut -d'=' -f2-)
    GITHUB_REPO_NAME=$(grep '^GITHUB_REPO_NAME=' .env.production | cut -d'=' -f2-)
    GITHUB_REPO="${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}"
    
    if [ -z "$GITHUB_REPO_OWNER" ] || [ -z "$GITHUB_REPO_NAME" ]; then
        print_error "GitHub configuration missing in .env.production"
        exit 1
    fi
}

# Main execution
main() {
    load_config
    print_status "Setting up production deployment for $GITHUB_REPO"
    print_warning "This will upload sensitive data to GitHub and EC2"
    
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Cancelled by user"
        exit 0
    fi
    
    check_prerequisites
    extract_secrets
    set_github_secrets
    copy_config_to_ec2
    verify_secrets
    
    print_status "ðŸŽ‰ Setup complete!"
    print_status "1. GitHub secrets configured for CI/CD"
    print_status "2. auth/config.toml copied to EC2 for runtime use"
    print_status "3. Ready to deploy with: ./scripts/deploy"
}

# Help message
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Production Setup Script"
    echo ""
    echo "This script automatically:"
    echo "  - Sets essential GitHub repository secrets for CI/CD"
    echo "  - Copies auth/config.toml to EC2 for runtime use"
    echo "  - Configures SSL certificate email and domain"
    echo ""
    echo "Streamlined production deployment setup."
    echo ""
    echo "Prerequisites:"
    echo "  - GitHub CLI installed and authenticated (gh auth login)"
    echo "  - Local config files present (auth/config.toml, .env.production)"
    echo "  - SSH access to EC2 instance"
    echo ""
    echo "Usage: $0"
    exit 0
fi

main "$@"